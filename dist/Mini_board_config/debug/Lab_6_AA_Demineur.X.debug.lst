

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Nov 29 16:49:03 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K20
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec,minocg
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec,minocg
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec,minocg
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1,minocg
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec,minocg
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec,minocg
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec,minocg
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1,minocg
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,minocg
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,minocg
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2,minocg
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1,minocg
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1,minocg
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,minocg
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,minocg
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,minocg
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,minocg
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,minocg
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,minocg
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,minocg
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2,minocg
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,minocg
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,minocg
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1,minocg
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,minocg
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,minocg
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,minocg
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,minocg
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,minocg
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,minocg
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,minocg
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,minocg
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,minocg
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,minocg
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,minocg
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	param0,global,class=BANK0,space=1,delta=1,noexec
    43  0000                     
    44                           ; Version 2.10
    45                           ; Generated 31/07/2019 GMT
    46                           ; 
    47                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F45K20 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataBANK0
    80  001412                     __pidataBANK0:
    81                           	opt callstack 0
    82                           
    83                           ;initializer for _randx
    84  001412  0001               	dw	1
    85  001414  0000               	dw	0
    86                           
    87                           	psect	idataBANK1
    88  0012C8                     __pidataBANK1:
    89                           	opt callstack 0
    90                           
    91                           ;initializer for _matCGRAM
    92  0012C8  08                 	db	8
    93  0012C9  04                 	db	4
    94  0012CA  04                 	db	4
    95  0012CB  0A                 	db	10
    96  0012CC  11                 	db	17
    97  0012CD  1F                 	db	31
    98  0012CE  11                 	db	17
    99  0012CF  00                 	db	0
   100  0012D0  1F                 	db	31
   101  0012D1  1F                 	db	31
   102  0012D2  1F                 	db	31
   103  0012D3  1F                 	db	31
   104  0012D4  1F                 	db	31
   105  0012D5  1F                 	db	31
   106  0012D6  1F                 	db	31
   107  0012D7  1F                 	db	31
   108  0012D8  02                 	db	2
   109  0012D9  04                 	db	4
   110  0012DA  04                 	db	4
   111  0012DB  0E                 	db	14
   112  0012DC  1F                 	db	31
   113  0012DD  1F                 	db	31
   114  0012DE  1F                 	db	31
   115  0012DF  0E                 	db	14
   116  0012E0  1F                 	db	31
   117  0012E1  15                 	db	21
   118  0012E2  15                 	db	21
   119  0012E3  04                 	db	4
   120  0012E4  04                 	db	4
   121  0012E5  15                 	db	21
   122  0012E6  15                 	db	21
   123  0012E7  1F                 	db	31
   124  0012E8  08                 	db	8
   125  0012E9  04                 	db	4
   126  0012EA  1F                 	db	31
   127  0012EB  10                 	db	16
   128  0012EC  1E                 	db	30
   129  0012ED  10                 	db	16
   130  0012EE  1F                 	db	31
   131  0012EF  00                 	db	0
   132  0012F0  04                 	db	4
   133  0012F1  0A                 	db	10
   134  0012F2  0E                 	db	14
   135  0012F3  11                 	db	17
   136  0012F4  1F                 	db	31
   137  0012F5  10                 	db	16
   138  0012F6  0E                 	db	14
   139  0012F7  00                 	db	0
   140  0012F8  08                 	db	8
   141  0012F9  04                 	db	4
   142  0012FA  0E                 	db	14
   143  0012FB  01                 	db	1
   144  0012FC  0F                 	db	15
   145  0012FD  11                 	db	17
   146  0012FE  0F                 	db	15
   147  0012FF  00                 	db	0
   148  001300  04                 	db	4
   149  001301  0A                 	db	10
   150  001302  0E                 	db	14
   151  001303  01                 	db	1
   152  001304  0F                 	db	15
   153  001305  11                 	db	17
   154  001306  0F                 	db	15
   155  001307  00                 	db	0
   156                           
   157                           	psect	smallconst
   158  000600                     __psmallconst:
   159                           	opt callstack 0
   160  000600  00                 	db	0
   161  000601                     main@F2873:
   162                           	opt callstack 0
   163  000601  4C                 	db	76
   164  000602  61                 	db	97
   165  000603  62                 	db	98
   166  000604  36                 	db	54
   167  000605  20                 	db	32
   168  000606  41                 	db	65
   169  000607  6C                 	db	108
   170  000608  65                 	db	101
   171  000609  78                 	db	120
   172  00060A  61                 	db	97
   173  00060B  6E                 	db	110
   174  00060C  64                 	db	100
   175  00060D  72                 	db	114
   176  00060E  65                 	db	101
   177  00060F  20                 	db	32
   178  000610  41                 	db	65
   179  000611  6C                 	db	108
   180  000612  61                 	db	97
   181  000613  69                 	db	105
   182  000614  6E                 	db	110
   183  000615  00                 	db	0
   184  000616                     __end_ofmain@F2873:
   185                           	opt callstack 0
   186  0000                     _TRISCbits	set	3988
   187  0000                     _PORTAbits	set	3968
   188  0000                     _PORTD	set	3971
   189  0000                     _ANSELbits	set	3966
   190  0000                     _TRISA	set	3986
   191  0000                     _ANSEL	set	3966
   192  0000                     _TRISB	set	3987
   193  0000                     _ANSELH	set	3967
   194  0000                     _TRISD	set	3989
   195  0000                     _PORTBbits	set	3969
   196  0000                     _TMR1	set	4046
   197  0000                     _RCREG	set	4014
   198  0000                     _TXREG	set	4013
   199  0000                     _RCSTAbits	set	4011
   200  0000                     _TXSTAbits	set	4012
   201  0000                     _BAUDCONbits	set	4024
   202  0000                     _SPBRG	set	4015
   203  0000                     _SPBRGH	set	4016
   204  0000                     _ADCON2bits	set	4032
   205  0000                     _ADCON1	set	4033
   206  0000                     _T1CONbits	set	4045
   207  0000                     _ADRESH	set	4036
   208  0000                     _ADCON0bits	set	4034
   209  0000                     _RCIF	set	31989
   210  0000                     _T0CONbits	set	4053
   211  0000                     _INTCONbits	set	4082
   212                           
   213                           ; #config settings
   214  000616  00                 	db	0	; dummy byte at the end
   215  0000                     
   216                           	psect	cinit
   217  00119A                     __pcinit:
   218                           	opt callstack 0
   219  00119A                     start_initialization:
   220                           	opt callstack 0
   221  00119A                     __initialization:
   222                           	opt callstack 0
   223                           
   224                           ; Initialize objects allocated to BANK1 (64 bytes)
   225                           ; load TBLPTR registers with __pidataBANK1
   226  00119A  0EC8               	movlw	low __pidataBANK1
   227  00119C  6EF6               	movwf	tblptrl,c
   228  00119E  0E12               	movlw	high __pidataBANK1
   229  0011A0  6EF7               	movwf	tblptrh,c
   230  0011A2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   231  0011A4  6EF8               	movwf	tblptru,c
   232  0011A6  EE01  F0A8         	lfsr	0,__pdataBANK1
   233  0011AA  EE10 F040          	lfsr	1,64
   234  0011AE                     copy_data0:
   235  0011AE  0009               	tblrd		*+
   236  0011B0  CFF5 FFEE          	movff	tablat,postinc0
   237  0011B4  50E5               	movf	postdec1,w,c
   238  0011B6  50E1               	movf	fsr1l,w,c
   239  0011B8  E1FA               	bnz	copy_data0
   240                           
   241                           ; Initialize objects allocated to BANK0 (4 bytes)
   242                           ; load TBLPTR registers with __pidataBANK0
   243  0011BA  0E12               	movlw	low __pidataBANK0
   244  0011BC  6EF6               	movwf	tblptrl,c
   245  0011BE  0E14               	movlw	high __pidataBANK0
   246  0011C0  6EF7               	movwf	tblptrh,c
   247  0011C2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   248  0011C4  6EF8               	movwf	tblptru,c
   249  0011C6  EE00  F0EF         	lfsr	0,__pdataBANK0
   250  0011CA  EE10 F004          	lfsr	1,4
   251  0011CE                     copy_data1:
   252  0011CE  0009               	tblrd		*+
   253  0011D0  CFF5 FFEE          	movff	tablat,postinc0
   254  0011D4  50E5               	movf	postdec1,w,c
   255  0011D6  50E1               	movf	fsr1l,w,c
   256  0011D8  E1FA               	bnz	copy_data1
   257                           
   258                           ; Clear objects allocated to BANK1 (168 bytes)
   259  0011DA  EE01  F000         	lfsr	0,__pbssBANK1
   260  0011DE  0EA8               	movlw	168
   261  0011E0                     clear_0:
   262  0011E0  6AEE               	clrf	postinc0,c
   263  0011E2  06E8               	decf	wreg,f,c
   264  0011E4  E1FD               	bnz	clear_0
   265  0011E6                     end_of_initialization:
   266                           	opt callstack 0
   267  0011E6                     __end_of__initialization:
   268                           	opt callstack 0
   269  0011E6  0100               	movlb	0
   270  0011E8  EFB7  F005         	goto	_main	;jump to C main() function
   271                           
   272                           	psect	dataBANK0
   273  0000EF                     __pdataBANK0:
   274                           	opt callstack 0
   275  0000EF                     _randx:
   276                           	opt callstack 0
   277  0000EF                     	ds	4
   278                           
   279                           	psect	bssBANK1
   280  000100                     __pbssBANK1:
   281                           	opt callstack 0
   282  000100                     _m_tabVue:
   283                           	opt callstack 0
   284  000100                     	ds	84
   285  000154                     _m_tabMines:
   286                           	opt callstack 0
   287  000154                     	ds	84
   288                           
   289                           	psect	dataBANK1
   290  0001A8                     __pdataBANK1:
   291                           	opt callstack 0
   292  0001A8                     _matCGRAM:
   293                           	opt callstack 0
   294  0001A8                     	ds	64
   295                           
   296                           	psect	cstackBANK0
   297  000060                     __pcstackBANK0:
   298                           	opt callstack 0
   299  000060                     ??_lcd_ecrireDonnees:
   300  000060                     ??_lcd_busy:
   301  000060                     ?___wmul:
   302                           	opt callstack 0
   303  000060                     ?___lmul:
   304                           	opt callstack 0
   305  000060                     ___wmul@multiplier:
   306                           	opt callstack 0
   307  000060                     srand@x:
   308                           	opt callstack 0
   309  000060                     ___lmul@multiplier:
   310                           	opt callstack 0
   311                           
   312                           ; 4 bytes @ 0x0
   313  000060                     	ds	1
   314  000061                     lcd_ecrireDonnees@donnee:
   315                           	opt callstack 0
   316  000061                     lcd_busy@adresse:
   317                           	opt callstack 0
   318                           
   319                           ; 1 bytes @ 0x1
   320  000061                     	ds	1
   321  000062                     ??_lcd_resetSequence:
   322  000062                     lcd_wrCom@commande:
   323                           	opt callstack 0
   324  000062                     lcd_wrData@caractere:
   325                           	opt callstack 0
   326  000062                     ___wmul@multiplicand:
   327                           	opt callstack 0
   328                           
   329                           ; 2 bytes @ 0x2
   330  000062                     	ds	1
   331  000063                     ??_lcd_initCGRam:
   332  000063                     lcd_gotoXY@y:
   333                           	opt callstack 0
   334  000063                     lcd_ecritChar@car:
   335                           	opt callstack 0
   336                           
   337                           ; 1 bytes @ 0x3
   338  000063                     	ds	1
   339  000064                     lcd_gotoXY@x:
   340                           	opt callstack 0
   341  000064                     lcd_ecritChar@posRam:
   342                           	opt callstack 0
   343  000064                     ___wmul@product:
   344                           	opt callstack 0
   345  000064                     ___lmul@multiplicand:
   346                           	opt callstack 0
   347                           
   348                           ; 4 bytes @ 0x4
   349  000064                     	ds	1
   350  000065                     lcd_initCGRam@i:
   351                           	opt callstack 0
   352  000065                     lcd_putMessage@chaine:
   353                           	opt callstack 0
   354                           
   355                           ; 2 bytes @ 0x5
   356  000065                     	ds	1
   357  000066                     ??_initTabVue:
   358  000066                     lcd_initCGRam@j:
   359                           	opt callstack 0
   360  000066                     calculToucheCombien@ligne:
   361                           	opt callstack 0
   362                           
   363                           ; 2 bytes @ 0x6
   364  000066                     	ds	1
   365  000067                     lcd_putMessage@j:
   366                           	opt callstack 0
   367                           
   368                           ; 1 bytes @ 0x7
   369  000067                     	ds	1
   370  000068                     initTabVue@i:
   371                           	opt callstack 0
   372  000068                     calculToucheCombien@colonne:
   373                           	opt callstack 0
   374  000068                     ___lmul@product:
   375                           	opt callstack 0
   376                           
   377                           ; 4 bytes @ 0x8
   378  000068                     	ds	2
   379  00006A                     ??_calculToucheCombien:
   380  00006A                     initTabVue@k:
   381                           	opt callstack 0
   382                           
   383                           ; 2 bytes @ 0xA
   384  00006A                     	ds	2
   385  00006C                     ?_rand:
   386                           	opt callstack 0
   387                           
   388                           ; 2 bytes @ 0xC
   389  00006C                     	ds	2
   390  00006E                     ?___awmod:
   391                           	opt callstack 0
   392  00006E                     ___awmod@dividend:
   393                           	opt callstack 0
   394                           
   395                           ; 2 bytes @ 0xE
   396  00006E                     	ds	1
   397  00006F                     calculToucheCombien@nombre:
   398                           	opt callstack 0
   399                           
   400                           ; 1 bytes @ 0xF
   401  00006F                     	ds	1
   402  000070                     calculToucheCombien@minLigne:
   403                           	opt callstack 0
   404  000070                     ___awmod@divisor:
   405                           	opt callstack 0
   406                           
   407                           ; 2 bytes @ 0x10
   408  000070                     	ds	1
   409  000071                     calculToucheCombien@maxLigne:
   410                           	opt callstack 0
   411                           
   412                           ; 1 bytes @ 0x11
   413  000071                     	ds	1
   414  000072                     calculToucheCombien@minCol:
   415                           	opt callstack 0
   416  000072                     ___awmod@counter:
   417                           	opt callstack 0
   418                           
   419                           ; 1 bytes @ 0x12
   420  000072                     	ds	1
   421  000073                     calculToucheCombien@maxCol:
   422                           	opt callstack 0
   423  000073                     ___awmod@sign:
   424                           	opt callstack 0
   425                           
   426                           ; 1 bytes @ 0x13
   427  000073                     	ds	1
   428  000074                     calculToucheCombien@j:
   429                           	opt callstack 0
   430  000074                     rempliMines@nb:
   431                           	opt callstack 0
   432                           
   433                           ; 2 bytes @ 0x14
   434  000074                     	ds	1
   435  000075                     calculToucheCombien@m:
   436                           	opt callstack 0
   437                           
   438                           ; 1 bytes @ 0x15
   439  000075                     	ds	1
   440  000076                     ??_rempliMines:
   441  000076                     ??_metToucheCombien:
   442                           
   443                           ; 1 bytes @ 0x16
   444  000076                     	ds	3
   445  000079                     metToucheCombien@chiffre:
   446                           	opt callstack 0
   447  000079                     rempliMines@tabSafe:
   448                           	opt callstack 0
   449                           
   450                           ; 80 bytes @ 0x19
   451  000079                     	ds	1
   452  00007A                     metToucheCombien@j:
   453                           	opt callstack 0
   454                           
   455                           ; 2 bytes @ 0x1A
   456  00007A                     	ds	2
   457  00007C                     metToucheCombien@m:
   458                           	opt callstack 0
   459                           
   460                           ; 2 bytes @ 0x1C
   461  00007C                     	ds	77
   462  0000C9                     rempliMines@i:
   463                           	opt callstack 0
   464                           
   465                           ; 2 bytes @ 0x69
   466  0000C9                     	ds	2
   467  0000CB                     rempliMines@testX:
   468                           	opt callstack 0
   469                           
   470                           ; 1 bytes @ 0x6B
   471  0000CB                     	ds	1
   472  0000CC                     rempliMines@testY:
   473                           	opt callstack 0
   474                           
   475                           ; 1 bytes @ 0x6C
   476  0000CC                     	ds	1
   477  0000CD                     rempliMines@j:
   478                           	opt callstack 0
   479                           
   480                           ; 2 bytes @ 0x6D
   481  0000CD                     	ds	2
   482  0000CF                     rempliMines@m:
   483                           	opt callstack 0
   484                           
   485                           ; 2 bytes @ 0x6F
   486  0000CF                     	ds	2
   487  0000D1                     ??_main:
   488                           
   489                           ; 1 bytes @ 0x71
   490  0000D1                     	ds	1
   491  0000D2                     main@afficheNom:
   492                           	opt callstack 0
   493                           
   494                           ; 21 bytes @ 0x72
   495  0000D2                     	ds	21
   496  0000E7                     main@posX:
   497                           	opt callstack 0
   498                           
   499                           ; 2 bytes @ 0x87
   500  0000E7                     	ds	2
   501  0000E9                     main@posY:
   502                           	opt callstack 0
   503                           
   504                           ; 2 bytes @ 0x89
   505  0000E9                     	ds	2
   506  0000EB                     main@nbMines:
   507                           	opt callstack 0
   508                           
   509                           ; 2 bytes @ 0x8B
   510  0000EB                     	ds	2
   511  0000ED                     main@etatAfterSW:
   512                           	opt callstack 0
   513                           
   514                           ; 1 bytes @ 0x8D
   515  0000ED                     	ds	1
   516  0000EE                     main@etatInitSW:
   517                           	opt callstack 0
   518                           
   519                           ; 1 bytes @ 0x8E
   520  0000EE                     	ds	1
   521                           
   522 ;;
   523 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   524 ;;
   525 ;; *************** function _main *****************
   526 ;; Defined at:
   527 ;;		line 73 in file "main.c"
   528 ;; Parameters:    Size  Location     Type
   529 ;;		None
   530 ;; Auto vars:     Size  Location     Type
   531 ;;  afficheNom     21  114[BANK0 ] const unsigned char [21]
   532 ;;  nbMines         2  139[BANK0 ] int 
   533 ;;  posY            2  137[BANK0 ] int 
   534 ;;  posX            2  135[BANK0 ] int 
   535 ;;  etatInitSW      1  142[BANK0 ] unsigned char 
   536 ;;  etatAfterSW     1  141[BANK0 ] unsigned char 
   537 ;; Return value:  Size  Location     Type
   538 ;;                  1    wreg      void 
   539 ;; Registers used:
   540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   541 ;; Tracked objects:
   542 ;;		On entry : 0/0
   543 ;;		On exit  : 0/0
   544 ;;		Unchanged: 0/0
   545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   546 ;;      Params:         0       0       0       0       0       0       0
   547 ;;      Locals:         0      29       0       0       0       0       0
   548 ;;      Temps:          0       1       0       0       0       0       0
   549 ;;      Totals:         0      30       0       0       0       0       0
   550 ;;Total ram usage:       30 bytes
   551 ;; Hardware stack levels required when called:    6
   552 ;; This function calls:
   553 ;;		_afficheTabVue
   554 ;;		_initTabVue
   555 ;;		_init_serie
   556 ;;		_initialisation
   557 ;;		_lcd_effaceAffichage
   558 ;;		_lcd_gotoXY
   559 ;;		_lcd_init
   560 ;;		_lcd_putMessage
   561 ;;		_metToucheCombien
   562 ;;		_rempliMines
   563 ;;		_testEtat
   564 ;; This function is called by:
   565 ;;		Startup code after reset
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           	psect	text0
   570  000B6E                     __ptext0:
   571                           	opt callstack 0
   572  000B6E                     _main:
   573                           	opt callstack 25
   574  000B6E                     
   575                           ;main.c: 76: const char afficheNom[] = "Lab6 Alexandre Alain";
   576  000B6E  0E01               	movlw	low main@F2873
   577  000B70  6EF6               	movwf	tblptrl,c
   578  000B72                     	if	1	;There is more than 1 active tblptr byte
   579  000B72  0E06               	movlw	high main@F2873
   580  000B74  6EF7               	movwf	tblptrh,c
   581  000B76                     	endif
   582  000B76                     	if	1	;There are 3 active tblptr bytes
   583  000B76  0E00               	movlw	low (main@F2873 shr (0+16))
   584  000B78  6EF8               	movwf	tblptru,c
   585  000B7A                     	endif
   586  000B7A  EE20  F0D2         	lfsr	2,main@afficheNom
   587  000B7E  0E14               	movlw	20
   588  000B80                     u900:
   589  000B80  0009               	tblrd		*+
   590  000B82  CFF5 FFDE          	movff	tablat,postinc2
   591  000B86  06E8               	decf	wreg,f,c
   592  000B88  E2FB               	bc	u900
   593  000B8A                     
   594                           ;main.c: 77: int posX = 1;
   595  000B8A  0E00               	movlw	0
   596  000B8C  0100               	movlb	0	; force () banked
   597  000B8E  6FE8               	movwf	(main@posX+1)& (0+255),b
   598  000B90  0E01               	movlw	1
   599  000B92  6FE7               	movwf	main@posX& (0+255),b
   600  000B94                     
   601                           ; BSR set to: 0
   602                           ;main.c: 78: int posY = 1;
   603  000B94  0E00               	movlw	0
   604  000B96  0100               	movlb	0	; force () banked
   605  000B98  6FEA               	movwf	(main@posY+1)& (0+255),b
   606  000B9A  0E01               	movlw	1
   607  000B9C  6FE9               	movwf	main@posY& (0+255),b
   608  000B9E                     
   609                           ; BSR set to: 0
   610                           ;main.c: 79: bool etatInitSW = 0;
   611  000B9E  0E00               	movlw	0
   612  000BA0  0100               	movlb	0	; force () banked
   613  000BA2  6FEE               	movwf	main@etatInitSW& (0+255),b
   614  000BA4                     
   615                           ; BSR set to: 0
   616                           ;main.c: 80: bool etatAfterSW = 0;
   617  000BA4  0E00               	movlw	0
   618  000BA6  0100               	movlb	0	; force () banked
   619  000BA8  6FED               	movwf	main@etatAfterSW& (0+255),b
   620  000BAA                     
   621                           ; BSR set to: 0
   622                           ;main.c: 81: int nbMines = 10;
   623  000BAA  0E00               	movlw	0
   624  000BAC  0100               	movlb	0	; force () banked
   625  000BAE  6FEC               	movwf	(main@nbMines+1)& (0+255),b
   626  000BB0  0E0A               	movlw	10
   627  000BB2  6FEB               	movwf	main@nbMines& (0+255),b
   628  000BB4                     
   629                           ; BSR set to: 0
   630                           ;main.c: 84: initialisation();
   631  000BB4  EC1D  F009         	call	_initialisation	;wreg free
   632  000BB8                     
   633                           ;main.c: 85: lcd_init();
   634  000BB8  EC9E  F009         	call	_lcd_init	;wreg free
   635  000BBC                     
   636                           ;main.c: 86: init_serie();
   637  000BBC  ECC6  F009         	call	_init_serie	;wreg free
   638  000BC0                     
   639                           ;main.c: 88: lcd_gotoXY(1, 1);
   640  000BC0  0E01               	movlw	1
   641  000BC2  0100               	movlb	0	; force () banked
   642  000BC4  6F63               	movwf	lcd_gotoXY@y& (0+255),b
   643  000BC6  0E01               	movlw	1
   644  000BC8  EC67  F007         	call	_lcd_gotoXY
   645  000BCC                     
   646                           ;main.c: 89: lcd_putMessage(afficheNom);
   647  000BCC  0ED2               	movlw	low main@afficheNom
   648  000BCE  0100               	movlb	0	; force () banked
   649  000BD0  6F65               	movwf	lcd_putMessage@chaine& (0+255),b
   650  000BD2  0E00               	movlw	high main@afficheNom
   651  000BD4  6F66               	movwf	(lcd_putMessage@chaine+1)& (0+255),b
   652  000BD6  ECF6  F008         	call	_lcd_putMessage	;wreg free
   653  000BDA                     
   654                           ;main.c: 93: etatInitSW = testEtat();
   655  000BDA  ECE3  F009         	call	_testEtat	;wreg free
   656  000BDE  0100               	movlb	0	; force () banked
   657  000BE0  6FEE               	movwf	main@etatInitSW& (0+255),b
   658  000BE2                     
   659                           ; BSR set to: 0
   660                           ;main.c: 94: etatAfterSW = etatInitSW;
   661  000BE2  C0EE  F0ED         	movff	main@etatInitSW,main@etatAfterSW
   662  000BE6                     
   663                           ; BSR set to: 0
   664                           ;main.c: 96: initTabVue();
   665  000BE6  EC48  F006         	call	_initTabVue	;wreg free
   666  000BEA                     
   667                           ;main.c: 97: rempliMines(nbMines);
   668  000BEA  C0EB  F074         	movff	main@nbMines,rempliMines@nb
   669  000BEE  C0EC  F075         	movff	main@nbMines+1,rempliMines@nb+1
   670  000BF2  EC0C  F003         	call	_rempliMines	;wreg free
   671  000BF6                     
   672                           ;main.c: 98: metToucheCombien();
   673  000BF6  ECFD  F004         	call	_metToucheCombien	;wreg free
   674  000BFA                     
   675                           ;main.c: 100: lcd_effaceAffichage();
   676  000BFA  ECF7  F009         	call	_lcd_effaceAffichage	;wreg free
   677  000BFE                     
   678                           ;main.c: 101: lcd_gotoXY(1, 1);
   679  000BFE  0E01               	movlw	1
   680  000C00  0100               	movlb	0	; force () banked
   681  000C02  6F63               	movwf	lcd_gotoXY@y& (0+255),b
   682  000C04  0E01               	movlw	1
   683  000C06  EC67  F007         	call	_lcd_gotoXY
   684  000C0A                     
   685                           ;main.c: 102: lcd_putMessage(m_tabMines[0]);
   686  000C0A  0E54               	movlw	low _m_tabMines
   687  000C0C  0100               	movlb	0	; force () banked
   688  000C0E  6F65               	movwf	lcd_putMessage@chaine& (0+255),b
   689  000C10  0E01               	movlw	high _m_tabMines
   690  000C12  6F66               	movwf	(lcd_putMessage@chaine+1)& (0+255),b
   691  000C14  ECF6  F008         	call	_lcd_putMessage	;wreg free
   692  000C18                     
   693                           ;main.c: 103: lcd_gotoXY(1, 2);
   694  000C18  0E02               	movlw	2
   695  000C1A  0100               	movlb	0	; force () banked
   696  000C1C  6F63               	movwf	lcd_gotoXY@y& (0+255),b
   697  000C1E  0E01               	movlw	1
   698  000C20  EC67  F007         	call	_lcd_gotoXY
   699  000C24                     
   700                           ;main.c: 104: lcd_putMessage(m_tabMines[1]);
   701  000C24  0E69               	movlw	low (_m_tabMines+21)
   702  000C26  0100               	movlb	0	; force () banked
   703  000C28  6F65               	movwf	lcd_putMessage@chaine& (0+255),b
   704  000C2A  0E01               	movlw	high (_m_tabMines+21)
   705  000C2C  6F66               	movwf	(lcd_putMessage@chaine+1)& (0+255),b
   706  000C2E  ECF6  F008         	call	_lcd_putMessage	;wreg free
   707  000C32                     
   708                           ;main.c: 105: lcd_gotoXY(1, 3);
   709  000C32  0E03               	movlw	3
   710  000C34  0100               	movlb	0	; force () banked
   711  000C36  6F63               	movwf	lcd_gotoXY@y& (0+255),b
   712  000C38  0E01               	movlw	1
   713  000C3A  EC67  F007         	call	_lcd_gotoXY
   714  000C3E                     
   715                           ;main.c: 106: lcd_putMessage(m_tabMines[2]);
   716  000C3E  0E7E               	movlw	low (_m_tabMines+42)
   717  000C40  0100               	movlb	0	; force () banked
   718  000C42  6F65               	movwf	lcd_putMessage@chaine& (0+255),b
   719  000C44  0E01               	movlw	high (_m_tabMines+42)
   720  000C46  6F66               	movwf	(lcd_putMessage@chaine+1)& (0+255),b
   721  000C48  ECF6  F008         	call	_lcd_putMessage	;wreg free
   722  000C4C                     
   723                           ;main.c: 107: lcd_gotoXY(1, 4);
   724  000C4C  0E04               	movlw	4
   725  000C4E  0100               	movlb	0	; force () banked
   726  000C50  6F63               	movwf	lcd_gotoXY@y& (0+255),b
   727  000C52  0E01               	movlw	1
   728  000C54  EC67  F007         	call	_lcd_gotoXY
   729  000C58                     
   730                           ;main.c: 108: lcd_putMessage(m_tabMines[3]);
   731  000C58  0E93               	movlw	low (_m_tabMines+63)
   732  000C5A  0100               	movlb	0	; force () banked
   733  000C5C  6F65               	movwf	lcd_putMessage@chaine& (0+255),b
   734  000C5E  0E01               	movlw	high (_m_tabMines+63)
   735  000C60  6F66               	movwf	(lcd_putMessage@chaine+1)& (0+255),b
   736  000C62  ECF6  F008         	call	_lcd_putMessage	;wreg free
   737  000C66                     
   738                           ;main.c: 110: afficheTabVue();
   739  000C66  ECA0  F007         	call	_afficheTabVue	;wreg free
   740  000C6A                     l2170:
   741                           
   742                           ;main.c: 113: {;main.c: 117: etatInitSW = testEtat();
   743  000C6A  ECE3  F009         	call	_testEtat	;wreg free
   744  000C6E  0100               	movlb	0	; force () banked
   745  000C70  6FEE               	movwf	main@etatInitSW& (0+255),b
   746  000C72                     
   747                           ; BSR set to: 0
   748                           ;main.c: 122: };main.c: 124: etatAfterSW = etatInitSW;
   749  000C72  C0EE  F0ED         	movff	main@etatInitSW,main@etatAfterSW
   750  000C76                     
   751                           ; BSR set to: 0
   752                           ;main.c: 127: _delay((unsigned long)((100)*(1000000/4000.0)));
   753  000C76  0E21               	movlw	33
   754  000C78  0100               	movlb	0	; force () banked
   755  000C7A  6FD1               	movwf	??_main& (0+255),b
   756  000C7C  0E76               	movlw	118
   757  000C7E                     u917:
   758  000C7E  2EE8               	decfsz	wreg,f,c
   759  000C80  D7FE               	bra	u917
   760  000C82  2FD1               	decfsz	??_main& (0+255),f,b
   761  000C84  D7FC               	bra	u917
   762  000C86  F000               	nop	
   763  000C88  EF35  F006         	goto	l2170
   764  000C8C  EF00  F000         	goto	start
   765  000C90                     __end_of_main:
   766                           	opt callstack 0
   767                           
   768 ;; *************** function _testEtat *****************
   769 ;; Defined at:
   770 ;;		line 324 in file "main.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;		None
   773 ;; Auto vars:     Size  Location     Type
   774 ;;		None
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      unsigned char 
   777 ;; Registers used:
   778 ;;		wreg
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   784 ;;      Params:         0       0       0       0       0       0       0
   785 ;;      Locals:         0       0       0       0       0       0       0
   786 ;;      Temps:          0       0       0       0       0       0       0
   787 ;;      Totals:         0       0       0       0       0       0       0
   788 ;;Total ram usage:        0 bytes
   789 ;; Hardware stack levels used:    1
   790 ;; This function calls:
   791 ;;		Nothing
   792 ;; This function is called by:
   793 ;;		_main
   794 ;; This function uses a non-reentrant model
   795 ;;
   796                           
   797                           	psect	text1
   798  0013C6                     __ptext1:
   799                           	opt callstack 0
   800  0013C6                     _testEtat:
   801                           	opt callstack 30
   802  0013C6                     
   803                           ;main.c: 326: if(PORTBbits.RB1 == 0)
   804  0013C6  B281               	btfsc	129,1,c	;volatile
   805  0013C8  EFE8  F009         	goto	u721
   806  0013CC  EFEA  F009         	goto	u720
   807  0013D0                     u721:
   808  0013D0  EFED  F009         	goto	l2010
   809  0013D4                     u720:
   810  0013D4                     
   811                           ;main.c: 327: {;main.c: 328: return 1;
   812  0013D4  0E01               	movlw	1
   813  0013D6  EFEE  F009         	goto	l135
   814  0013DA                     l2010:
   815                           
   816                           ;main.c: 330: else;main.c: 331: {;main.c: 332: return 0;
   817  0013DA  0E00               	movlw	0
   818  0013DC                     l135:
   819  0013DC  0012               	return		;funcret
   820  0013DE                     __end_of_testEtat:
   821                           	opt callstack 0
   822                           
   823 ;; *************** function _rempliMines *****************
   824 ;; Defined at:
   825 ;;		line 175 in file "main.c"
   826 ;; Parameters:    Size  Location     Type
   827 ;;  nb              2   20[BANK0 ] int 
   828 ;; Auto vars:     Size  Location     Type
   829 ;;  m               2  111[BANK0 ] int 
   830 ;;  i               2  105[BANK0 ] int 
   831 ;;  j               2  109[BANK0 ] int 
   832 ;;  tabSafe        80   25[BANK0 ] unsigned char [20][4]
   833 ;;  testY           1  108[BANK0 ] unsigned char 
   834 ;;  testX           1  107[BANK0 ] unsigned char 
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   844 ;;      Params:         0       2       0       0       0       0       0
   845 ;;      Locals:         0      88       0       0       0       0       0
   846 ;;      Temps:          0       3       0       0       0       0       0
   847 ;;      Totals:         0      93       0       0       0       0       0
   848 ;;Total ram usage:       93 bytes
   849 ;; Hardware stack levels used:    1
   850 ;; Hardware stack levels required when called:    2
   851 ;; This function calls:
   852 ;;		___awmod
   853 ;;		___wmul
   854 ;;		_rand
   855 ;; This function is called by:
   856 ;;		_main
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           	psect	text2
   861  000618                     __ptext2:
   862                           	opt callstack 0
   863  000618                     _rempliMines:
   864                           	opt callstack 28
   865  000618                     
   866                           ;main.c: 177: bool tabSafe[4][20];;main.c: 178: char testX = 0;
   867  000618  0E00               	movlw	0
   868  00061A  0100               	movlb	0	; force () banked
   869  00061C  6FCB               	movwf	rempliMines@testX& (0+255),b
   870                           
   871                           ;main.c: 179: char testY = 0;
   872  00061E  0E00               	movlw	0
   873  000620  0100               	movlb	0	; force () banked
   874  000622  6FCC               	movwf	rempliMines@testY& (0+255),b
   875                           
   876                           ;main.c: 182: for(int j = 0 ; j < 20 ; j++)
   877  000624  0E00               	movlw	0
   878  000626  0100               	movlb	0	; force () banked
   879  000628  6FCE               	movwf	(rempliMines@j+1)& (0+255),b
   880  00062A  0E00               	movlw	0
   881  00062C  6FCD               	movwf	rempliMines@j& (0+255),b
   882  00062E                     
   883                           ; BSR set to: 0
   884  00062E  0100               	movlb	0	; force () banked
   885  000630  BFCE               	btfsc	(rempliMines@j+1)& (0+255),7,b
   886  000632  EF24  F003         	goto	u771
   887  000636  51CE               	movf	(rempliMines@j+1)& (0+255),w,b
   888  000638  E109               	bnz	u770
   889  00063A  0E14               	movlw	20
   890  00063C  5DCD               	subwf	rempliMines@j& (0+255),w,b
   891  00063E  A0D8               	btfss	status,0,c
   892  000640  EF24  F003         	goto	u771
   893  000644  EF26  F003         	goto	u770
   894  000648                     u771:
   895  000648  EF28  F003         	goto	l2042
   896  00064C                     u770:
   897  00064C  EFAA  F003         	goto	l2058
   898  000650                     l2042:
   899                           
   900                           ; BSR set to: 0
   901                           ;main.c: 183: {;main.c: 184: for(int m = 0; m < 4 ; m++)
   902  000650  0E00               	movlw	0
   903  000652  0100               	movlb	0	; force () banked
   904  000654  6FD0               	movwf	(rempliMines@m+1)& (0+255),b
   905  000656  0E00               	movlw	0
   906  000658  6FCF               	movwf	rempliMines@m& (0+255),b
   907  00065A                     
   908                           ; BSR set to: 0
   909  00065A  0100               	movlb	0	; force () banked
   910  00065C  BFD0               	btfsc	(rempliMines@m+1)& (0+255),7,b
   911  00065E  EF3A  F003         	goto	u781
   912  000662  51D0               	movf	(rempliMines@m+1)& (0+255),w,b
   913  000664  E109               	bnz	u780
   914  000666  0E04               	movlw	4
   915  000668  5DCF               	subwf	rempliMines@m& (0+255),w,b
   916  00066A  A0D8               	btfss	status,0,c
   917  00066C  EF3A  F003         	goto	u781
   918  000670  EF3C  F003         	goto	u780
   919  000674                     u781:
   920  000674  EF3E  F003         	goto	l2048
   921  000678                     u780:
   922  000678  EF98  F003         	goto	l2054
   923  00067C                     l2048:
   924                           
   925                           ; BSR set to: 0
   926                           ;main.c: 185: {;main.c: 186: tabSafe[m][j] = 0;
   927  00067C  C0CF  F060         	movff	rempliMines@m,___wmul@multiplier
   928  000680  C0D0  F061         	movff	rempliMines@m+1,___wmul@multiplier+1
   929  000684  0E00               	movlw	0
   930  000686  0100               	movlb	0	; force () banked
   931  000688  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   932  00068A  0E14               	movlw	20
   933  00068C  6F62               	movwf	___wmul@multiplicand& (0+255),b
   934  00068E  ECB2  F009         	call	___wmul	;wreg free
   935  000692  0E79               	movlw	low rempliMines@tabSafe
   936  000694  0100               	movlb	0	; force () banked
   937  000696  6F76               	movwf	??_rempliMines& (0+255),b
   938  000698  0E00               	movlw	high rempliMines@tabSafe
   939  00069A  6F77               	movwf	(??_rempliMines+1)& (0+255),b
   940  00069C  0100               	movlb	0	; force () banked
   941  00069E  5160               	movf	?___wmul& (0+255),w,b
   942  0006A0  0100               	movlb	0	; force () banked
   943  0006A2  2776               	addwf	??_rempliMines& (0+255),f,b
   944  0006A4  0100               	movlb	0	; force () banked
   945  0006A6  5161               	movf	(?___wmul+1)& (0+255),w,b
   946  0006A8  0100               	movlb	0	; force () banked
   947  0006AA  2377               	addwfc	(??_rempliMines+1)& (0+255),f,b
   948  0006AC  0100               	movlb	0	; force () banked
   949  0006AE  51CD               	movf	rempliMines@j& (0+255),w,b
   950  0006B0  0100               	movlb	0	; force () banked
   951  0006B2  2576               	addwf	??_rempliMines& (0+255),w,b
   952  0006B4  6ED9               	movwf	fsr2l,c
   953  0006B6  0100               	movlb	0	; force () banked
   954  0006B8  51CE               	movf	(rempliMines@j+1)& (0+255),w,b
   955  0006BA  0100               	movlb	0	; force () banked
   956  0006BC  2177               	addwfc	(??_rempliMines+1)& (0+255),w,b
   957  0006BE  6EDA               	movwf	fsr2h,c
   958  0006C0  0E00               	movlw	0
   959  0006C2  6EDF               	movwf	indf2,c
   960                           
   961                           ;main.c: 187: m_tabMines[m][j] = ' ';
   962  0006C4  C0CF  F060         	movff	rempliMines@m,___wmul@multiplier
   963  0006C8  C0D0  F061         	movff	rempliMines@m+1,___wmul@multiplier+1
   964  0006CC  0E00               	movlw	0
   965  0006CE  0100               	movlb	0	; force () banked
   966  0006D0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   967  0006D2  0E15               	movlw	21
   968  0006D4  6F62               	movwf	___wmul@multiplicand& (0+255),b
   969  0006D6  ECB2  F009         	call	___wmul	;wreg free
   970  0006DA  0E54               	movlw	low _m_tabMines
   971  0006DC  0100               	movlb	0	; force () banked
   972  0006DE  6F76               	movwf	??_rempliMines& (0+255),b
   973  0006E0  0E01               	movlw	high _m_tabMines
   974  0006E2  6F77               	movwf	(??_rempliMines+1)& (0+255),b
   975  0006E4  0100               	movlb	0	; force () banked
   976  0006E6  5160               	movf	?___wmul& (0+255),w,b
   977  0006E8  0100               	movlb	0	; force () banked
   978  0006EA  2776               	addwf	??_rempliMines& (0+255),f,b
   979  0006EC  0100               	movlb	0	; force () banked
   980  0006EE  5161               	movf	(?___wmul+1)& (0+255),w,b
   981  0006F0  0100               	movlb	0	; force () banked
   982  0006F2  2377               	addwfc	(??_rempliMines+1)& (0+255),f,b
   983  0006F4  0100               	movlb	0	; force () banked
   984  0006F6  51CD               	movf	rempliMines@j& (0+255),w,b
   985  0006F8  0100               	movlb	0	; force () banked
   986  0006FA  2576               	addwf	??_rempliMines& (0+255),w,b
   987  0006FC  6ED9               	movwf	fsr2l,c
   988  0006FE  0100               	movlb	0	; force () banked
   989  000700  51CE               	movf	(rempliMines@j+1)& (0+255),w,b
   990  000702  0100               	movlb	0	; force () banked
   991  000704  2177               	addwfc	(??_rempliMines+1)& (0+255),w,b
   992  000706  6EDA               	movwf	fsr2h,c
   993  000708  0E20               	movlw	32
   994  00070A  6EDF               	movwf	indf2,c
   995  00070C                     
   996                           ; BSR set to: 0
   997  00070C  0100               	movlb	0	; force () banked
   998  00070E  4BCF               	infsnz	rempliMines@m& (0+255),f,b
   999  000710  2BD0               	incf	(rempliMines@m+1)& (0+255),f,b
  1000  000712                     
  1001                           ; BSR set to: 0
  1002  000712  0100               	movlb	0	; force () banked
  1003  000714  BFD0               	btfsc	(rempliMines@m+1)& (0+255),7,b
  1004  000716  EF96  F003         	goto	u791
  1005  00071A  51D0               	movf	(rempliMines@m+1)& (0+255),w,b
  1006  00071C  E109               	bnz	u790
  1007  00071E  0E04               	movlw	4
  1008  000720  5DCF               	subwf	rempliMines@m& (0+255),w,b
  1009  000722  A0D8               	btfss	status,0,c
  1010  000724  EF96  F003         	goto	u791
  1011  000728  EF98  F003         	goto	u790
  1012  00072C                     u791:
  1013  00072C  EF3E  F003         	goto	l2048
  1014  000730                     u790:
  1015  000730                     l2054:
  1016                           
  1017                           ; BSR set to: 0
  1018  000730  0100               	movlb	0	; force () banked
  1019  000732  4BCD               	infsnz	rempliMines@j& (0+255),f,b
  1020  000734  2BCE               	incf	(rempliMines@j+1)& (0+255),f,b
  1021  000736                     
  1022                           ; BSR set to: 0
  1023  000736  0100               	movlb	0	; force () banked
  1024  000738  BFCE               	btfsc	(rempliMines@j+1)& (0+255),7,b
  1025  00073A  EFA8  F003         	goto	u801
  1026  00073E  51CE               	movf	(rempliMines@j+1)& (0+255),w,b
  1027  000740  E109               	bnz	u800
  1028  000742  0E14               	movlw	20
  1029  000744  5DCD               	subwf	rempliMines@j& (0+255),w,b
  1030  000746  A0D8               	btfss	status,0,c
  1031  000748  EFA8  F003         	goto	u801
  1032  00074C  EFAA  F003         	goto	u800
  1033  000750                     u801:
  1034  000750  EF28  F003         	goto	l2042
  1035  000754                     u800:
  1036  000754                     l2058:
  1037                           
  1038                           ; BSR set to: 0
  1039                           ;main.c: 188: };main.c: 189: };main.c: 192: for(int i = 0 ; i < nb ; i++)
  1040  000754  0E00               	movlw	0
  1041  000756  0100               	movlb	0	; force () banked
  1042  000758  6FCA               	movwf	(rempliMines@i+1)& (0+255),b
  1043  00075A  0E00               	movlw	0
  1044  00075C  6FC9               	movwf	rempliMines@i& (0+255),b
  1045  00075E  EF1B  F004         	goto	l2068
  1046  000762                     l2060:
  1047                           
  1048                           ; BSR set to: 0
  1049                           ;main.c: 195: {;main.c: 196: testX = rand()%20;
  1050  000762  EC78  F008         	call	_rand	;wreg free
  1051  000766  C06C  F06E         	movff	?_rand,___awmod@dividend
  1052  00076A  C06D  F06F         	movff	?_rand+1,___awmod@dividend+1
  1053  00076E  0E00               	movlw	0
  1054  000770  0100               	movlb	0	; force () banked
  1055  000772  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
  1056  000774  0E14               	movlw	20
  1057  000776  6F70               	movwf	___awmod@divisor& (0+255),b
  1058  000778  ECBD  F006         	call	___awmod	;wreg free
  1059  00077C  0100               	movlb	0	; force () banked
  1060  00077E  516E               	movf	?___awmod& (0+255),w,b
  1061  000780  0100               	movlb	0	; force () banked
  1062  000782  6FCB               	movwf	rempliMines@testX& (0+255),b
  1063                           
  1064                           ;main.c: 197: testY = rand()%4;
  1065  000784  EC78  F008         	call	_rand	;wreg free
  1066  000788  0100               	movlb	0	; force () banked
  1067  00078A  516C               	movf	?_rand& (0+255),w,b
  1068  00078C  0B03               	andlw	3
  1069  00078E  0100               	movlb	0	; force () banked
  1070  000790  6FCC               	movwf	rempliMines@testY& (0+255),b
  1071  000792                     
  1072                           ; BSR set to: 0
  1073                           ;main.c: 198: };main.c: 199: while(m_tabMines[testY][testX] == 2);
  1074  000792  0100               	movlb	0	; force () banked
  1075  000794  51CC               	movf	rempliMines@testY& (0+255),w,b
  1076  000796  0D15               	mullw	21
  1077  000798  0E54               	movlw	low _m_tabMines
  1078  00079A  0100               	movlb	0	; force () banked
  1079  00079C  6F76               	movwf	??_rempliMines& (0+255),b
  1080  00079E  0E01               	movlw	high _m_tabMines
  1081  0007A0  6F77               	movwf	(??_rempliMines+1)& (0+255),b
  1082  0007A2  50F3               	movf	243,w,c
  1083  0007A4  2776               	addwf	??_rempliMines& (0+255),f,b
  1084  0007A6  50F4               	movf	244,w,c
  1085  0007A8  2377               	addwfc	(??_rempliMines+1)& (0+255),f,b
  1086  0007AA  0100               	movlb	0	; force () banked
  1087  0007AC  51CB               	movf	rempliMines@testX& (0+255),w,b
  1088  0007AE  0100               	movlb	0	; force () banked
  1089  0007B0  2576               	addwf	??_rempliMines& (0+255),w,b
  1090  0007B2  6ED9               	movwf	fsr2l,c
  1091  0007B4  0100               	movlb	0	; force () banked
  1092  0007B6  0E00               	movlw	0
  1093  0007B8  0100               	movlb	0	; force () banked
  1094  0007BA  2177               	addwfc	(??_rempliMines+1)& (0+255),w,b
  1095  0007BC  6EDA               	movwf	fsr2h,c
  1096  0007BE  0E02               	movlw	2
  1097  0007C0  18DE               	xorwf	postinc2,w,c
  1098  0007C2  B4D8               	btfsc	status,2,c
  1099  0007C4  EFE6  F003         	goto	u811
  1100  0007C8  EFE8  F003         	goto	u810
  1101  0007CC                     u811:
  1102  0007CC  EFB1  F003         	goto	l2060
  1103  0007D0                     u810:
  1104  0007D0                     
  1105                           ; BSR set to: 0
  1106                           ;main.c: 201: tabSafe[testY][testX] = 1;
  1107  0007D0  0100               	movlb	0	; force () banked
  1108  0007D2  51CC               	movf	rempliMines@testY& (0+255),w,b
  1109  0007D4  0D14               	mullw	20
  1110  0007D6  0E79               	movlw	low rempliMines@tabSafe
  1111  0007D8  0100               	movlb	0	; force () banked
  1112  0007DA  6F76               	movwf	??_rempliMines& (0+255),b
  1113  0007DC  0E00               	movlw	high rempliMines@tabSafe
  1114  0007DE  6F77               	movwf	(??_rempliMines+1)& (0+255),b
  1115  0007E0  50F3               	movf	243,w,c
  1116  0007E2  2776               	addwf	??_rempliMines& (0+255),f,b
  1117  0007E4  50F4               	movf	244,w,c
  1118  0007E6  2377               	addwfc	(??_rempliMines+1)& (0+255),f,b
  1119  0007E8  0100               	movlb	0	; force () banked
  1120  0007EA  51CB               	movf	rempliMines@testX& (0+255),w,b
  1121  0007EC  0100               	movlb	0	; force () banked
  1122  0007EE  2576               	addwf	??_rempliMines& (0+255),w,b
  1123  0007F0  6ED9               	movwf	fsr2l,c
  1124  0007F2  0100               	movlb	0	; force () banked
  1125  0007F4  0E00               	movlw	0
  1126  0007F6  0100               	movlb	0	; force () banked
  1127  0007F8  2177               	addwfc	(??_rempliMines+1)& (0+255),w,b
  1128  0007FA  6EDA               	movwf	fsr2h,c
  1129  0007FC  0E01               	movlw	1
  1130  0007FE  6EDF               	movwf	indf2,c
  1131                           
  1132                           ;main.c: 202: m_tabMines[testY][testX] = 2;
  1133  000800  0100               	movlb	0	; force () banked
  1134  000802  51CC               	movf	rempliMines@testY& (0+255),w,b
  1135  000804  0D15               	mullw	21
  1136  000806  0E54               	movlw	low _m_tabMines
  1137  000808  0100               	movlb	0	; force () banked
  1138  00080A  6F76               	movwf	??_rempliMines& (0+255),b
  1139  00080C  0E01               	movlw	high _m_tabMines
  1140  00080E  6F77               	movwf	(??_rempliMines+1)& (0+255),b
  1141  000810  50F3               	movf	243,w,c
  1142  000812  2776               	addwf	??_rempliMines& (0+255),f,b
  1143  000814  50F4               	movf	244,w,c
  1144  000816  2377               	addwfc	(??_rempliMines+1)& (0+255),f,b
  1145  000818  0100               	movlb	0	; force () banked
  1146  00081A  51CB               	movf	rempliMines@testX& (0+255),w,b
  1147  00081C  0100               	movlb	0	; force () banked
  1148  00081E  2576               	addwf	??_rempliMines& (0+255),w,b
  1149  000820  6ED9               	movwf	fsr2l,c
  1150  000822  0100               	movlb	0	; force () banked
  1151  000824  0E00               	movlw	0
  1152  000826  0100               	movlb	0	; force () banked
  1153  000828  2177               	addwfc	(??_rempliMines+1)& (0+255),w,b
  1154  00082A  6EDA               	movwf	fsr2h,c
  1155  00082C  0E02               	movlw	2
  1156  00082E  6EDF               	movwf	indf2,c
  1157  000830                     
  1158                           ; BSR set to: 0
  1159  000830  0100               	movlb	0	; force () banked
  1160  000832  4BC9               	infsnz	rempliMines@i& (0+255),f,b
  1161  000834  2BCA               	incf	(rempliMines@i+1)& (0+255),f,b
  1162  000836                     l2068:
  1163                           
  1164                           ; BSR set to: 0
  1165  000836  0100               	movlb	0	; force () banked
  1166  000838  5174               	movf	rempliMines@nb& (0+255),w,b
  1167  00083A  0100               	movlb	0	; force () banked
  1168  00083C  5DC9               	subwf	rempliMines@i& (0+255),w,b
  1169  00083E  51CA               	movf	(rempliMines@i+1)& (0+255),w,b
  1170  000840  0A80               	xorlw	128
  1171  000842  0100               	movlb	0	; force () banked
  1172  000844  6F76               	movwf	??_rempliMines& (0+255),b
  1173  000846  0100               	movlb	0	; force () banked
  1174  000848  5175               	movf	(rempliMines@nb+1)& (0+255),w,b
  1175  00084A  0A80               	xorlw	128
  1176  00084C  0100               	movlb	0	; force () banked
  1177  00084E  5976               	subwfb	??_rempliMines& (0+255),w,b
  1178  000850  A0D8               	btfss	status,0,c
  1179  000852  EF2D  F004         	goto	u821
  1180  000856  EF2F  F004         	goto	u820
  1181  00085A                     u821:
  1182  00085A  EFB1  F003         	goto	l2060
  1183  00085E                     u820:
  1184  00085E                     
  1185                           ; BSR set to: 0
  1186  00085E  0012               	return		;funcret
  1187  000860                     __end_of_rempliMines:
  1188                           	opt callstack 0
  1189                           
  1190 ;; *************** function _rand *****************
  1191 ;; Defined at:
  1192 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;		None
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;		None
  1197 ;; Return value:  Size  Location     Type
  1198 ;;                  2   12[BANK0 ] int 
  1199 ;; Registers used:
  1200 ;;		wreg, status,2, status,0, cstack
  1201 ;; Tracked objects:
  1202 ;;		On entry : 0/0
  1203 ;;		On exit  : 0/0
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1206 ;;      Params:         0       2       0       0       0       0       0
  1207 ;;      Locals:         0       0       0       0       0       0       0
  1208 ;;      Temps:          0       0       0       0       0       0       0
  1209 ;;      Totals:         0       2       0       0       0       0       0
  1210 ;;Total ram usage:        2 bytes
  1211 ;; Hardware stack levels used:    1
  1212 ;; Hardware stack levels required when called:    1
  1213 ;; This function calls:
  1214 ;;		___lmul
  1215 ;; This function is called by:
  1216 ;;		_rempliMines
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           	psect	text3
  1221  0010F0                     __ptext3:
  1222                           	opt callstack 0
  1223  0010F0                     _rand:
  1224                           	opt callstack 28
  1225  0010F0  C0EF  F060         	movff	_randx,___lmul@multiplier
  1226  0010F4  C0F0  F061         	movff	_randx+1,___lmul@multiplier+1
  1227  0010F8  C0F1  F062         	movff	_randx+2,___lmul@multiplier+2
  1228  0010FC  C0F2  F063         	movff	_randx+3,___lmul@multiplier+3
  1229  001100  0E6D               	movlw	109
  1230  001102  0100               	movlb	0	; () banked
  1231  001104  6F64               	movwf	___lmul@multiplicand& (0+255),b
  1232  001106  0E4E               	movlw	78
  1233  001108  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  1234  00110A  0EC6               	movlw	198
  1235  00110C  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
  1236  00110E  0E41               	movlw	65
  1237  001110  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
  1238  001112  ECD7  F007         	call	___lmul	;wreg free
  1239  001116  C060  F0EF         	movff	?___lmul,_randx
  1240  00111A  C061  F0F0         	movff	?___lmul+1,_randx+1
  1241  00111E  C062  F0F1         	movff	?___lmul+2,_randx+2
  1242  001122  C063  F0F2         	movff	?___lmul+3,_randx+3
  1243  001126  0E39               	movlw	57
  1244  001128  0100               	movlb	0	; () banked
  1245  00112A  27EF               	addwf	_randx& (0+255),f,b
  1246  00112C  0E30               	movlw	48
  1247  00112E  23F0               	addwfc	(_randx+1)& (0+255),f,b
  1248  001130  0E00               	movlw	0
  1249  001132  23F1               	addwfc	(_randx+2)& (0+255),f,b
  1250  001134  0E00               	movlw	0
  1251  001136  23F2               	addwfc	(_randx+3)& (0+255),f,b
  1252  001138                     
  1253                           ; BSR set to: 0
  1254  001138  0EFF               	movlw	255
  1255  00113A  15F1               	andwf	(_randx+2)& (0+255),w,b
  1256  00113C  6F6C               	movwf	?_rand& (0+255),b
  1257  00113E  0E7F               	movlw	127
  1258  001140  15F2               	andwf	(_randx+3)& (0+255),w,b
  1259  001142  6F6D               	movwf	(?_rand+1)& (0+255),b
  1260  001144                     
  1261                           ; BSR set to: 0
  1262  001144  0012               	return		;funcret
  1263  001146                     __end_of_rand:
  1264                           	opt callstack 0
  1265                           
  1266 ;; *************** function ___lmul *****************
  1267 ;; Defined at:
  1268 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
  1269 ;; Parameters:    Size  Location     Type
  1270 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1271 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1272 ;; Auto vars:     Size  Location     Type
  1273 ;;  product         4    8[BANK0 ] unsigned long 
  1274 ;; Return value:  Size  Location     Type
  1275 ;;                  4    0[BANK0 ] unsigned long 
  1276 ;; Registers used:
  1277 ;;		wreg, status,2, status,0
  1278 ;; Tracked objects:
  1279 ;;		On entry : 0/0
  1280 ;;		On exit  : 0/0
  1281 ;;		Unchanged: 0/0
  1282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1283 ;;      Params:         0       8       0       0       0       0       0
  1284 ;;      Locals:         0       4       0       0       0       0       0
  1285 ;;      Temps:          0       0       0       0       0       0       0
  1286 ;;      Totals:         0      12       0       0       0       0       0
  1287 ;;Total ram usage:       12 bytes
  1288 ;; Hardware stack levels used:    1
  1289 ;; This function calls:
  1290 ;;		Nothing
  1291 ;; This function is called by:
  1292 ;;		_rand
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           	psect	text4
  1297  000FAE                     __ptext4:
  1298                           	opt callstack 0
  1299  000FAE                     ___lmul:
  1300                           	opt callstack 28
  1301  000FAE  0E00               	movlw	0
  1302  000FB0  0100               	movlb	0	; () banked
  1303  000FB2  6F68               	movwf	___lmul@product& (0+255),b
  1304  000FB4  0E00               	movlw	0
  1305  000FB6  6F69               	movwf	(___lmul@product+1)& (0+255),b
  1306  000FB8  0E00               	movlw	0
  1307  000FBA  6F6A               	movwf	(___lmul@product+2)& (0+255),b
  1308  000FBC  0E00               	movlw	0
  1309  000FBE  6F6B               	movwf	(___lmul@product+3)& (0+255),b
  1310  000FC0                     l1768:
  1311                           
  1312                           ; BSR set to: 0
  1313  000FC0  A160               	btfss	___lmul@multiplier& (0+255),0,b
  1314  000FC2  EFE5  F007         	goto	u521
  1315  000FC6  EFE7  F007         	goto	u520
  1316  000FCA                     u521:
  1317  000FCA  EFEF  F007         	goto	l1772
  1318  000FCE                     u520:
  1319  000FCE                     
  1320                           ; BSR set to: 0
  1321  000FCE  5164               	movf	___lmul@multiplicand& (0+255),w,b
  1322  000FD0  2768               	addwf	___lmul@product& (0+255),f,b
  1323  000FD2  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  1324  000FD4  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
  1325  000FD6  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  1326  000FD8  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
  1327  000FDA  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  1328  000FDC  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
  1329  000FDE                     l1772:
  1330                           
  1331                           ; BSR set to: 0
  1332  000FDE  90D8               	bcf	status,0,c
  1333  000FE0  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
  1334  000FE2  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  1335  000FE4  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  1336  000FE6  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  1337  000FE8                     
  1338                           ; BSR set to: 0
  1339  000FE8  90D8               	bcf	status,0,c
  1340  000FEA  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  1341  000FEC  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  1342  000FEE  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  1343  000FF0  3360               	rrcf	___lmul@multiplier& (0+255),f,b
  1344  000FF2  5160               	movf	___lmul@multiplier& (0+255),w,b
  1345  000FF4  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  1346  000FF6  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  1347  000FF8  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  1348  000FFA  A4D8               	btfss	status,2,c
  1349  000FFC  EF02  F008         	goto	u531
  1350  001000  EF04  F008         	goto	u530
  1351  001004                     u531:
  1352  001004  EFE0  F007         	goto	l1768
  1353  001008                     u530:
  1354  001008                     
  1355                           ; BSR set to: 0
  1356  001008  C068  F060         	movff	___lmul@product,?___lmul
  1357  00100C  C069  F061         	movff	___lmul@product+1,?___lmul+1
  1358  001010  C06A  F062         	movff	___lmul@product+2,?___lmul+2
  1359  001014  C06B  F063         	movff	___lmul@product+3,?___lmul+3
  1360  001018                     
  1361                           ; BSR set to: 0
  1362  001018  0012               	return		;funcret
  1363  00101A                     __end_of___lmul:
  1364                           	opt callstack 0
  1365                           
  1366 ;; *************** function ___awmod *****************
  1367 ;; Defined at:
  1368 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;  dividend        2   14[BANK0 ] int 
  1371 ;;  divisor         2   16[BANK0 ] int 
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;  sign            1   19[BANK0 ] unsigned char 
  1374 ;;  counter         1   18[BANK0 ] unsigned char 
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  2   14[BANK0 ] int 
  1377 ;; Registers used:
  1378 ;;		wreg, status,2, status,0
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1384 ;;      Params:         0       4       0       0       0       0       0
  1385 ;;      Locals:         0       2       0       0       0       0       0
  1386 ;;      Temps:          0       0       0       0       0       0       0
  1387 ;;      Totals:         0       6       0       0       0       0       0
  1388 ;;Total ram usage:        6 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; This function calls:
  1391 ;;		Nothing
  1392 ;; This function is called by:
  1393 ;;		_rempliMines
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text5
  1398  000D7A                     __ptext5:
  1399                           	opt callstack 0
  1400  000D7A                     ___awmod:
  1401                           	opt callstack 29
  1402  000D7A  0E00               	movlw	0
  1403  000D7C  0100               	movlb	0	; () banked
  1404  000D7E  6F73               	movwf	___awmod@sign& (0+255),b
  1405  000D80                     
  1406                           ; BSR set to: 0
  1407  000D80  BF6F               	btfsc	(___awmod@dividend+1)& (0+255),7,b
  1408  000D82  EFC7  F006         	goto	u660
  1409  000D86  EFC5  F006         	goto	u661
  1410  000D8A                     u661:
  1411  000D8A  EFCD  F006         	goto	l1916
  1412  000D8E                     u660:
  1413  000D8E                     
  1414                           ; BSR set to: 0
  1415  000D8E  6D6E               	negf	___awmod@dividend& (0+255),b
  1416  000D90  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
  1417  000D92  B0D8               	btfsc	status,0,c
  1418  000D94  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
  1419  000D96                     
  1420                           ; BSR set to: 0
  1421  000D96  0E01               	movlw	1
  1422  000D98  6F73               	movwf	___awmod@sign& (0+255),b
  1423  000D9A                     l1916:
  1424                           
  1425                           ; BSR set to: 0
  1426  000D9A  BF71               	btfsc	(___awmod@divisor+1)& (0+255),7,b
  1427  000D9C  EFD4  F006         	goto	u670
  1428  000DA0  EFD2  F006         	goto	u671
  1429  000DA4                     u671:
  1430  000DA4  EFD8  F006         	goto	l1920
  1431  000DA8                     u670:
  1432  000DA8                     
  1433                           ; BSR set to: 0
  1434  000DA8  6D70               	negf	___awmod@divisor& (0+255),b
  1435  000DAA  1F71               	comf	(___awmod@divisor+1)& (0+255),f,b
  1436  000DAC  B0D8               	btfsc	status,0,c
  1437  000DAE  2B71               	incf	(___awmod@divisor+1)& (0+255),f,b
  1438  000DB0                     l1920:
  1439                           
  1440                           ; BSR set to: 0
  1441  000DB0  5170               	movf	___awmod@divisor& (0+255),w,b
  1442  000DB2  1171               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  1443  000DB4  B4D8               	btfsc	status,2,c
  1444  000DB6  EFDF  F006         	goto	u681
  1445  000DBA  EFE1  F006         	goto	u680
  1446  000DBE                     u681:
  1447  000DBE  EF05  F007         	goto	l1936
  1448  000DC2                     u680:
  1449  000DC2                     
  1450                           ; BSR set to: 0
  1451  000DC2  0E01               	movlw	1
  1452  000DC4  6F72               	movwf	___awmod@counter& (0+255),b
  1453  000DC6  EFE9  F006         	goto	l1926
  1454  000DCA                     l1924:
  1455                           
  1456                           ; BSR set to: 0
  1457  000DCA  90D8               	bcf	status,0,c
  1458  000DCC  3770               	rlcf	___awmod@divisor& (0+255),f,b
  1459  000DCE  3771               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  1460  000DD0  2B72               	incf	___awmod@counter& (0+255),f,b
  1461  000DD2                     l1926:
  1462                           
  1463                           ; BSR set to: 0
  1464  000DD2  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
  1465  000DD4  EFEE  F006         	goto	u691
  1466  000DD8  EFF0  F006         	goto	u690
  1467  000DDC                     u691:
  1468  000DDC  EFE5  F006         	goto	l1924
  1469  000DE0                     u690:
  1470  000DE0                     l1928:
  1471                           
  1472                           ; BSR set to: 0
  1473  000DE0  5170               	movf	___awmod@divisor& (0+255),w,b
  1474  000DE2  5D6E               	subwf	___awmod@dividend& (0+255),w,b
  1475  000DE4  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
  1476  000DE6  596F               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  1477  000DE8  A0D8               	btfss	status,0,c
  1478  000DEA  EFF9  F006         	goto	u701
  1479  000DEE  EFFB  F006         	goto	u700
  1480  000DF2                     u701:
  1481  000DF2  EFFF  F006         	goto	l1932
  1482  000DF6                     u700:
  1483  000DF6                     
  1484                           ; BSR set to: 0
  1485  000DF6  5170               	movf	___awmod@divisor& (0+255),w,b
  1486  000DF8  5F6E               	subwf	___awmod@dividend& (0+255),f,b
  1487  000DFA  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
  1488  000DFC  5B6F               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  1489  000DFE                     l1932:
  1490                           
  1491                           ; BSR set to: 0
  1492  000DFE  90D8               	bcf	status,0,c
  1493  000E00  3371               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  1494  000E02  3370               	rrcf	___awmod@divisor& (0+255),f,b
  1495  000E04                     
  1496                           ; BSR set to: 0
  1497  000E04  2F72               	decfsz	___awmod@counter& (0+255),f,b
  1498  000E06  EFF0  F006         	goto	l1928
  1499  000E0A                     l1936:
  1500                           
  1501                           ; BSR set to: 0
  1502  000E0A  5173               	movf	___awmod@sign& (0+255),w,b
  1503  000E0C  B4D8               	btfsc	status,2,c
  1504  000E0E  EF0B  F007         	goto	u711
  1505  000E12  EF0D  F007         	goto	u710
  1506  000E16                     u711:
  1507  000E16  EF11  F007         	goto	l1940
  1508  000E1A                     u710:
  1509  000E1A                     
  1510                           ; BSR set to: 0
  1511  000E1A  6D6E               	negf	___awmod@dividend& (0+255),b
  1512  000E1C  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
  1513  000E1E  B0D8               	btfsc	status,0,c
  1514  000E20  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
  1515  000E22                     l1940:
  1516                           
  1517                           ; BSR set to: 0
  1518  000E22  C06E  F06E         	movff	___awmod@dividend,?___awmod
  1519  000E26  C06F  F06F         	movff	___awmod@dividend+1,?___awmod+1
  1520  000E2A                     
  1521                           ; BSR set to: 0
  1522  000E2A  0012               	return		;funcret
  1523  000E2C                     __end_of___awmod:
  1524                           	opt callstack 0
  1525                           
  1526 ;; *************** function _metToucheCombien *****************
  1527 ;; Defined at:
  1528 ;;		line 215 in file "main.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;		None
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;  m               2   28[BANK0 ] int 
  1533 ;;  j               2   26[BANK0 ] int 
  1534 ;;  chiffre         1   25[BANK0 ] unsigned char 
  1535 ;; Return value:  Size  Location     Type
  1536 ;;                  1    wreg      void 
  1537 ;; Registers used:
  1538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1544 ;;      Params:         0       0       0       0       0       0       0
  1545 ;;      Locals:         0       5       0       0       0       0       0
  1546 ;;      Temps:          0       3       0       0       0       0       0
  1547 ;;      Totals:         0       8       0       0       0       0       0
  1548 ;;Total ram usage:        8 bytes
  1549 ;; Hardware stack levels used:    1
  1550 ;; Hardware stack levels required when called:    2
  1551 ;; This function calls:
  1552 ;;		___wmul
  1553 ;;		_calculToucheCombien
  1554 ;; This function is called by:
  1555 ;;		_main
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text6
  1560  0009FA                     __ptext6:
  1561                           	opt callstack 0
  1562  0009FA                     _metToucheCombien:
  1563                           	opt callstack 28
  1564  0009FA                     
  1565                           ;main.c: 217: char chiffre = 0;
  1566  0009FA  0E00               	movlw	0
  1567  0009FC  0100               	movlb	0	; force () banked
  1568  0009FE  6F79               	movwf	metToucheCombien@chiffre& (0+255),b
  1569                           
  1570                           ;main.c: 219: for(int j = 0 ; j < 20 ; j++)
  1571  000A00  0E00               	movlw	0
  1572  000A02  0100               	movlb	0	; force () banked
  1573  000A04  6F7B               	movwf	(metToucheCombien@j+1)& (0+255),b
  1574  000A06  0E00               	movlw	0
  1575  000A08  6F7A               	movwf	metToucheCombien@j& (0+255),b
  1576  000A0A                     
  1577                           ; BSR set to: 0
  1578  000A0A  0100               	movlb	0	; force () banked
  1579  000A0C  BF7B               	btfsc	(metToucheCombien@j+1)& (0+255),7,b
  1580  000A0E  EF12  F005         	goto	u831
  1581  000A12  517B               	movf	(metToucheCombien@j+1)& (0+255),w,b
  1582  000A14  E109               	bnz	u830
  1583  000A16  0E14               	movlw	20
  1584  000A18  5D7A               	subwf	metToucheCombien@j& (0+255),w,b
  1585  000A1A  A0D8               	btfss	status,0,c
  1586  000A1C  EF12  F005         	goto	u831
  1587  000A20  EF14  F005         	goto	u830
  1588  000A24                     u831:
  1589  000A24  EF16  F005         	goto	l2076
  1590  000A28                     u830:
  1591  000A28  EFB6  F005         	goto	l105
  1592  000A2C                     l2076:
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;main.c: 220: {;main.c: 221: for(int m = 0; m < 4 ; m++)
  1596  000A2C  0E00               	movlw	0
  1597  000A2E  0100               	movlb	0	; force () banked
  1598  000A30  6F7D               	movwf	(metToucheCombien@m+1)& (0+255),b
  1599  000A32  0E00               	movlw	0
  1600  000A34  6F7C               	movwf	metToucheCombien@m& (0+255),b
  1601  000A36                     
  1602                           ; BSR set to: 0
  1603  000A36  0100               	movlb	0	; force () banked
  1604  000A38  BF7D               	btfsc	(metToucheCombien@m+1)& (0+255),7,b
  1605  000A3A  EF28  F005         	goto	u841
  1606  000A3E  517D               	movf	(metToucheCombien@m+1)& (0+255),w,b
  1607  000A40  E109               	bnz	u840
  1608  000A42  0E04               	movlw	4
  1609  000A44  5D7C               	subwf	metToucheCombien@m& (0+255),w,b
  1610  000A46  A0D8               	btfss	status,0,c
  1611  000A48  EF28  F005         	goto	u841
  1612  000A4C  EF2A  F005         	goto	u840
  1613  000A50                     u841:
  1614  000A50  EF2C  F005         	goto	l2082
  1615  000A54                     u840:
  1616  000A54  EFA4  F005         	goto	l2094
  1617  000A58                     l2082:
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;main.c: 222: {;main.c: 223: chiffre = calculToucheCombien(m, j);
  1621  000A58  C07C  F066         	movff	metToucheCombien@m,calculToucheCombien@ligne
  1622  000A5C  C07D  F067         	movff	metToucheCombien@m+1,calculToucheCombien@ligne+1
  1623  000A60  C07A  F068         	movff	metToucheCombien@j,calculToucheCombien@colonne
  1624  000A64  C07B  F069         	movff	metToucheCombien@j+1,calculToucheCombien@colonne+1
  1625  000A68  EC30  F004         	call	_calculToucheCombien	;wreg free
  1626  000A6C  0100               	movlb	0	; force () banked
  1627  000A6E  6F79               	movwf	metToucheCombien@chiffre& (0+255),b
  1628  000A70                     
  1629                           ; BSR set to: 0
  1630                           ;main.c: 226: if( chiffre != 0 && m_tabMines[m][j] != 2)
  1631  000A70  0100               	movlb	0	; force () banked
  1632  000A72  5179               	movf	metToucheCombien@chiffre& (0+255),w,b
  1633  000A74  B4D8               	btfsc	status,2,c
  1634  000A76  EF3F  F005         	goto	u851
  1635  000A7A  EF41  F005         	goto	u850
  1636  000A7E                     u851:
  1637  000A7E  EF92  F005         	goto	l2090
  1638  000A82                     u850:
  1639  000A82                     
  1640                           ; BSR set to: 0
  1641  000A82  C07C  F060         	movff	metToucheCombien@m,___wmul@multiplier
  1642  000A86  C07D  F061         	movff	metToucheCombien@m+1,___wmul@multiplier+1
  1643  000A8A  0E00               	movlw	0
  1644  000A8C  0100               	movlb	0	; force () banked
  1645  000A8E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1646  000A90  0E15               	movlw	21
  1647  000A92  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1648  000A94  ECB2  F009         	call	___wmul	;wreg free
  1649  000A98  0E54               	movlw	low _m_tabMines
  1650  000A9A  0100               	movlb	0	; force () banked
  1651  000A9C  6F76               	movwf	??_metToucheCombien& (0+255),b
  1652  000A9E  0E01               	movlw	high _m_tabMines
  1653  000AA0  6F77               	movwf	(??_metToucheCombien+1)& (0+255),b
  1654  000AA2  0100               	movlb	0	; force () banked
  1655  000AA4  5160               	movf	?___wmul& (0+255),w,b
  1656  000AA6  0100               	movlb	0	; force () banked
  1657  000AA8  2776               	addwf	??_metToucheCombien& (0+255),f,b
  1658  000AAA  0100               	movlb	0	; force () banked
  1659  000AAC  5161               	movf	(?___wmul+1)& (0+255),w,b
  1660  000AAE  0100               	movlb	0	; force () banked
  1661  000AB0  2377               	addwfc	(??_metToucheCombien+1)& (0+255),f,b
  1662  000AB2  0100               	movlb	0	; force () banked
  1663  000AB4  517A               	movf	metToucheCombien@j& (0+255),w,b
  1664  000AB6  0100               	movlb	0	; force () banked
  1665  000AB8  2576               	addwf	??_metToucheCombien& (0+255),w,b
  1666  000ABA  6ED9               	movwf	fsr2l,c
  1667  000ABC  0100               	movlb	0	; force () banked
  1668  000ABE  517B               	movf	(metToucheCombien@j+1)& (0+255),w,b
  1669  000AC0  0100               	movlb	0	; force () banked
  1670  000AC2  2177               	addwfc	(??_metToucheCombien+1)& (0+255),w,b
  1671  000AC4  6EDA               	movwf	fsr2h,c
  1672  000AC6  0E02               	movlw	2
  1673  000AC8  18DE               	xorwf	postinc2,w,c
  1674  000ACA  B4D8               	btfsc	status,2,c
  1675  000ACC  EF6A  F005         	goto	u861
  1676  000AD0  EF6C  F005         	goto	u860
  1677  000AD4                     u861:
  1678  000AD4  EF92  F005         	goto	l2090
  1679  000AD8                     u860:
  1680  000AD8                     
  1681                           ; BSR set to: 0
  1682                           ;main.c: 227: {;main.c: 228: m_tabMines[m][j] = 48 + chiffre;
  1683  000AD8  C07C  F060         	movff	metToucheCombien@m,___wmul@multiplier
  1684  000ADC  C07D  F061         	movff	metToucheCombien@m+1,___wmul@multiplier+1
  1685  000AE0  0E00               	movlw	0
  1686  000AE2  0100               	movlb	0	; force () banked
  1687  000AE4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1688  000AE6  0E15               	movlw	21
  1689  000AE8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1690  000AEA  ECB2  F009         	call	___wmul	;wreg free
  1691  000AEE  0E54               	movlw	low _m_tabMines
  1692  000AF0  0100               	movlb	0	; force () banked
  1693  000AF2  6F76               	movwf	??_metToucheCombien& (0+255),b
  1694  000AF4  0E01               	movlw	high _m_tabMines
  1695  000AF6  6F77               	movwf	(??_metToucheCombien+1)& (0+255),b
  1696  000AF8  0100               	movlb	0	; force () banked
  1697  000AFA  5160               	movf	?___wmul& (0+255),w,b
  1698  000AFC  0100               	movlb	0	; force () banked
  1699  000AFE  2776               	addwf	??_metToucheCombien& (0+255),f,b
  1700  000B00  0100               	movlb	0	; force () banked
  1701  000B02  5161               	movf	(?___wmul+1)& (0+255),w,b
  1702  000B04  0100               	movlb	0	; force () banked
  1703  000B06  2377               	addwfc	(??_metToucheCombien+1)& (0+255),f,b
  1704  000B08  0100               	movlb	0	; force () banked
  1705  000B0A  517A               	movf	metToucheCombien@j& (0+255),w,b
  1706  000B0C  0100               	movlb	0	; force () banked
  1707  000B0E  2576               	addwf	??_metToucheCombien& (0+255),w,b
  1708  000B10  6ED9               	movwf	fsr2l,c
  1709  000B12  0100               	movlb	0	; force () banked
  1710  000B14  517B               	movf	(metToucheCombien@j+1)& (0+255),w,b
  1711  000B16  0100               	movlb	0	; force () banked
  1712  000B18  2177               	addwfc	(??_metToucheCombien+1)& (0+255),w,b
  1713  000B1A  6EDA               	movwf	fsr2h,c
  1714  000B1C  0100               	movlb	0	; force () banked
  1715  000B1E  5179               	movf	metToucheCombien@chiffre& (0+255),w,b
  1716  000B20  0F30               	addlw	48
  1717  000B22  6EDF               	movwf	indf2,c
  1718  000B24                     l2090:
  1719                           
  1720                           ; BSR set to: 0
  1721  000B24  0100               	movlb	0	; force () banked
  1722  000B26  4B7C               	infsnz	metToucheCombien@m& (0+255),f,b
  1723  000B28  2B7D               	incf	(metToucheCombien@m+1)& (0+255),f,b
  1724  000B2A                     
  1725                           ; BSR set to: 0
  1726  000B2A  0100               	movlb	0	; force () banked
  1727  000B2C  BF7D               	btfsc	(metToucheCombien@m+1)& (0+255),7,b
  1728  000B2E  EFA2  F005         	goto	u871
  1729  000B32  517D               	movf	(metToucheCombien@m+1)& (0+255),w,b
  1730  000B34  E109               	bnz	u870
  1731  000B36  0E04               	movlw	4
  1732  000B38  5D7C               	subwf	metToucheCombien@m& (0+255),w,b
  1733  000B3A  A0D8               	btfss	status,0,c
  1734  000B3C  EFA2  F005         	goto	u871
  1735  000B40  EFA4  F005         	goto	u870
  1736  000B44                     u871:
  1737  000B44  EF2C  F005         	goto	l2082
  1738  000B48                     u870:
  1739  000B48                     l2094:
  1740                           
  1741                           ; BSR set to: 0
  1742  000B48  0100               	movlb	0	; force () banked
  1743  000B4A  4B7A               	infsnz	metToucheCombien@j& (0+255),f,b
  1744  000B4C  2B7B               	incf	(metToucheCombien@j+1)& (0+255),f,b
  1745  000B4E                     
  1746                           ; BSR set to: 0
  1747  000B4E  0100               	movlb	0	; force () banked
  1748  000B50  BF7B               	btfsc	(metToucheCombien@j+1)& (0+255),7,b
  1749  000B52  EFB4  F005         	goto	u881
  1750  000B56  517B               	movf	(metToucheCombien@j+1)& (0+255),w,b
  1751  000B58  E109               	bnz	u880
  1752  000B5A  0E14               	movlw	20
  1753  000B5C  5D7A               	subwf	metToucheCombien@j& (0+255),w,b
  1754  000B5E  A0D8               	btfss	status,0,c
  1755  000B60  EFB4  F005         	goto	u881
  1756  000B64  EFB6  F005         	goto	u880
  1757  000B68                     u881:
  1758  000B68  EF16  F005         	goto	l2076
  1759  000B6C                     u880:
  1760  000B6C                     l105:
  1761                           
  1762                           ; BSR set to: 0
  1763  000B6C  0012               	return		;funcret
  1764  000B6E                     __end_of_metToucheCombien:
  1765                           	opt callstack 0
  1766                           
  1767 ;; *************** function _calculToucheCombien *****************
  1768 ;; Defined at:
  1769 ;;		line 240 in file "main.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;  ligne           2    6[BANK0 ] int 
  1772 ;;  colonne         2    8[BANK0 ] int 
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  m               1   21[BANK0 ] char 
  1775 ;;  j               1   20[BANK0 ] char 
  1776 ;;  maxCol          1   19[BANK0 ] unsigned char 
  1777 ;;  minCol          1   18[BANK0 ] char 
  1778 ;;  maxLigne        1   17[BANK0 ] unsigned char 
  1779 ;;  minLigne        1   16[BANK0 ] char 
  1780 ;;  nombre          1   15[BANK0 ] unsigned char 
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      unsigned char 
  1783 ;; Registers used:
  1784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1790 ;;      Params:         0       4       0       0       0       0       0
  1791 ;;      Locals:         0       7       0       0       0       0       0
  1792 ;;      Temps:          0       5       0       0       0       0       0
  1793 ;;      Totals:         0      16       0       0       0       0       0
  1794 ;;Total ram usage:       16 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    1
  1797 ;; This function calls:
  1798 ;;		___wmul
  1799 ;; This function is called by:
  1800 ;;		_metToucheCombien
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text7
  1805  000860                     __ptext7:
  1806                           	opt callstack 0
  1807  000860                     _calculToucheCombien:
  1808                           	opt callstack 28
  1809  000860                     
  1810                           ;main.c: 242: char nombre = 0;
  1811  000860  0E00               	movlw	0
  1812  000862  0100               	movlb	0	; force () banked
  1813  000864  6F6F               	movwf	calculToucheCombien@nombre& (0+255),b
  1814  000866                     
  1815                           ; BSR set to: 0
  1816                           ;main.c: 243: signed char minLigne = -1;
  1817  000866  0100               	movlb	0	; force () banked
  1818  000868  6970               	setf	calculToucheCombien@minLigne& (0+255),b
  1819                           
  1820                           ;main.c: 244: char maxLigne = 2;
  1821  00086A  0E02               	movlw	2
  1822  00086C  0100               	movlb	0	; force () banked
  1823  00086E  6F71               	movwf	calculToucheCombien@maxLigne& (0+255),b
  1824  000870                     
  1825                           ; BSR set to: 0
  1826                           ;main.c: 245: signed char minCol = -1;
  1827  000870  0100               	movlb	0	; force () banked
  1828  000872  6972               	setf	calculToucheCombien@minCol& (0+255),b
  1829                           
  1830                           ;main.c: 246: char maxCol = 2;
  1831  000874  0E02               	movlw	2
  1832  000876  0100               	movlb	0	; force () banked
  1833  000878  6F73               	movwf	calculToucheCombien@maxCol& (0+255),b
  1834  00087A                     
  1835                           ; BSR set to: 0
  1836                           ;main.c: 248: if(ligne == 0)
  1837  00087A  0100               	movlb	0	; force () banked
  1838  00087C  5166               	movf	calculToucheCombien@ligne& (0+255),w,b
  1839  00087E  1167               	iorwf	(calculToucheCombien@ligne+1)& (0+255),w,b
  1840  000880  A4D8               	btfss	status,2,c
  1841  000882  EF45  F004         	goto	u551
  1842  000886  EF47  F004         	goto	u550
  1843  00088A                     u551:
  1844  00088A  EF49  F004         	goto	l1818
  1845  00088E                     u550:
  1846  00088E                     
  1847                           ; BSR set to: 0
  1848                           ;main.c: 249: minLigne++;
  1849  00088E  0100               	movlb	0	; force () banked
  1850  000890  2B70               	incf	calculToucheCombien@minLigne& (0+255),f,b
  1851  000892                     l1818:
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;main.c: 250: if(ligne == 3)
  1855  000892  0E03               	movlw	3
  1856  000894  0100               	movlb	0	; force () banked
  1857  000896  1966               	xorwf	calculToucheCombien@ligne& (0+255),w,b
  1858  000898  1167               	iorwf	(calculToucheCombien@ligne+1)& (0+255),w,b
  1859  00089A  A4D8               	btfss	status,2,c
  1860  00089C  EF52  F004         	goto	u561
  1861  0008A0  EF54  F004         	goto	u560
  1862  0008A4                     u561:
  1863  0008A4  EF56  F004         	goto	l1822
  1864  0008A8                     u560:
  1865  0008A8                     
  1866                           ; BSR set to: 0
  1867                           ;main.c: 251: maxLigne--;
  1868  0008A8  0100               	movlb	0	; force () banked
  1869  0008AA  0771               	decf	calculToucheCombien@maxLigne& (0+255),f,b
  1870  0008AC                     l1822:
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;main.c: 252: if(colonne == 0)
  1874  0008AC  0100               	movlb	0	; force () banked
  1875  0008AE  5168               	movf	calculToucheCombien@colonne& (0+255),w,b
  1876  0008B0  1169               	iorwf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1877  0008B2  A4D8               	btfss	status,2,c
  1878  0008B4  EF5E  F004         	goto	u571
  1879  0008B8  EF60  F004         	goto	u570
  1880  0008BC                     u571:
  1881  0008BC  EF62  F004         	goto	l1826
  1882  0008C0                     u570:
  1883  0008C0                     
  1884                           ; BSR set to: 0
  1885                           ;main.c: 253: minCol++;
  1886  0008C0  0100               	movlb	0	; force () banked
  1887  0008C2  2B72               	incf	calculToucheCombien@minCol& (0+255),f,b
  1888  0008C4                     l1826:
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;main.c: 254: if(colonne == 19)
  1892  0008C4  0E13               	movlw	19
  1893  0008C6  0100               	movlb	0	; force () banked
  1894  0008C8  1968               	xorwf	calculToucheCombien@colonne& (0+255),w,b
  1895  0008CA  1169               	iorwf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1896  0008CC  A4D8               	btfss	status,2,c
  1897  0008CE  EF6B  F004         	goto	u581
  1898  0008D2  EF6D  F004         	goto	u580
  1899  0008D6                     u581:
  1900  0008D6  EF6F  F004         	goto	l1830
  1901  0008DA                     u580:
  1902  0008DA                     
  1903                           ; BSR set to: 0
  1904                           ;main.c: 255: maxCol--;
  1905  0008DA  0100               	movlb	0	; force () banked
  1906  0008DC  0773               	decf	calculToucheCombien@maxCol& (0+255),f,b
  1907  0008DE                     l1830:
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;main.c: 258: for(signed char j = minCol ; j < maxCol ; j++)
  1911  0008DE  C072  F074         	movff	calculToucheCombien@minCol,calculToucheCombien@j
  1912  0008E2  EFE1  F004         	goto	l1840
  1913  0008E6                     l113:
  1914                           
  1915                           ; BSR set to: 0
  1916                           ;main.c: 259: {;main.c: 260: for(signed char m = minLigne; m < maxLigne ; m++)
  1917  0008E6  C070  F075         	movff	calculToucheCombien@minLigne,calculToucheCombien@m
  1918  0008EA  EFC6  F004         	goto	l1836
  1919  0008EE                     l1832:
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;main.c: 261: {;main.c: 262: if( m_tabMines[ligne+m][colonne+j] == 2)
  1923  0008EE  C074  F06A         	movff	calculToucheCombien@j,??_calculToucheCombien
  1924  0008F2  0100               	movlb	0	; force () banked
  1925  0008F4  6B6B               	clrf	(??_calculToucheCombien+1)& (0+255),b
  1926  0008F6  BF6A               	btfsc	??_calculToucheCombien& (0+255),7,b
  1927  0008F8  076B               	decf	(??_calculToucheCombien+1)& (0+255),f,b
  1928  0008FA  0100               	movlb	0	; force () banked
  1929  0008FC  5175               	movf	calculToucheCombien@m& (0+255),w,b
  1930  0008FE  0100               	movlb	0	; force () banked
  1931  000900  6F60               	movwf	___wmul@multiplier& (0+255),b
  1932  000902  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  1933  000904  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
  1934  000906  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
  1935  000908  0E00               	movlw	0
  1936  00090A  0100               	movlb	0	; force () banked
  1937  00090C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1938  00090E  0E15               	movlw	21
  1939  000910  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1940  000912  ECB2  F009         	call	___wmul	;wreg free
  1941  000916  0E54               	movlw	low _m_tabMines
  1942  000918  0100               	movlb	0	; force () banked
  1943  00091A  6F6C               	movwf	(??_calculToucheCombien+2)& (0+255),b
  1944  00091C  0E01               	movlw	high _m_tabMines
  1945  00091E  6F6D               	movwf	(??_calculToucheCombien+3)& (0+255),b
  1946  000920  0100               	movlb	0	; force () banked
  1947  000922  5160               	movf	?___wmul& (0+255),w,b
  1948  000924  0100               	movlb	0	; force () banked
  1949  000926  276C               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1950  000928  0100               	movlb	0	; force () banked
  1951  00092A  5161               	movf	(?___wmul+1)& (0+255),w,b
  1952  00092C  0100               	movlb	0	; force () banked
  1953  00092E  236D               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1954  000930  C066  F060         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1955  000934  C067  F061         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1956  000938  0E00               	movlw	0
  1957  00093A  0100               	movlb	0	; force () banked
  1958  00093C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1959  00093E  0E15               	movlw	21
  1960  000940  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1961  000942  ECB2  F009         	call	___wmul	;wreg free
  1962  000946  0100               	movlb	0	; force () banked
  1963  000948  5160               	movf	?___wmul& (0+255),w,b
  1964  00094A  0100               	movlb	0	; force () banked
  1965  00094C  276C               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1966  00094E  0100               	movlb	0	; force () banked
  1967  000950  5161               	movf	(?___wmul+1)& (0+255),w,b
  1968  000952  0100               	movlb	0	; force () banked
  1969  000954  236D               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1970  000956  516A               	movf	??_calculToucheCombien& (0+255),w,b
  1971  000958  276C               	addwf	(??_calculToucheCombien+2)& (0+255),f,b
  1972  00095A  516B               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  1973  00095C  236D               	addwfc	(??_calculToucheCombien+3)& (0+255),f,b
  1974  00095E  0100               	movlb	0	; force () banked
  1975  000960  5168               	movf	calculToucheCombien@colonne& (0+255),w,b
  1976  000962  0100               	movlb	0	; force () banked
  1977  000964  256C               	addwf	(??_calculToucheCombien+2)& (0+255),w,b
  1978  000966  6ED9               	movwf	fsr2l,c
  1979  000968  0100               	movlb	0	; force () banked
  1980  00096A  5169               	movf	(calculToucheCombien@colonne+1)& (0+255),w,b
  1981  00096C  0100               	movlb	0	; force () banked
  1982  00096E  216D               	addwfc	(??_calculToucheCombien+3)& (0+255),w,b
  1983  000970  6EDA               	movwf	fsr2h,c
  1984  000972  0E02               	movlw	2
  1985  000974  18DE               	xorwf	postinc2,w,c
  1986  000976  A4D8               	btfss	status,2,c
  1987  000978  EFC0  F004         	goto	u591
  1988  00097C  EFC2  F004         	goto	u590
  1989  000980                     u591:
  1990  000980  EFC4  F004         	goto	l116
  1991  000984                     u590:
  1992  000984                     
  1993                           ; BSR set to: 0
  1994                           ;main.c: 263: {;main.c: 264: nombre++;
  1995  000984  0100               	movlb	0	; force () banked
  1996  000986  2B6F               	incf	calculToucheCombien@nombre& (0+255),f,b
  1997  000988                     l116:
  1998                           
  1999                           ; BSR set to: 0
  2000  000988  0100               	movlb	0	; force () banked
  2001  00098A  2B75               	incf	calculToucheCombien@m& (0+255),f,b
  2002  00098C                     l1836:
  2003                           
  2004                           ; BSR set to: 0
  2005  00098C  0100               	movlb	0	; force () banked
  2006  00098E  5171               	movf	calculToucheCombien@maxLigne& (0+255),w,b
  2007  000990  0100               	movlb	0	; force () banked
  2008  000992  6F6A               	movwf	??_calculToucheCombien& (0+255),b
  2009  000994  6B6B               	clrf	(??_calculToucheCombien+1)& (0+255),b
  2010  000996  C075  F06C         	movff	calculToucheCombien@m,??_calculToucheCombien+2
  2011  00099A  6B6D               	clrf	(??_calculToucheCombien+3)& (0+255),b
  2012  00099C  BF6C               	btfsc	(??_calculToucheCombien+2)& (0+255),7,b
  2013  00099E  076D               	decf	(??_calculToucheCombien+3)& (0+255),f,b
  2014  0009A0  516A               	movf	??_calculToucheCombien& (0+255),w,b
  2015  0009A2  5D6C               	subwf	(??_calculToucheCombien+2)& (0+255),w,b
  2016  0009A4  516D               	movf	(??_calculToucheCombien+3)& (0+255),w,b
  2017  0009A6  0A80               	xorlw	128
  2018  0009A8  6F6E               	movwf	(??_calculToucheCombien+4)& (0+255),b
  2019  0009AA  516B               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  2020  0009AC  0A80               	xorlw	128
  2021  0009AE  596E               	subwfb	(??_calculToucheCombien+4)& (0+255),w,b
  2022  0009B0  A0D8               	btfss	status,0,c
  2023  0009B2  EFDD  F004         	goto	u601
  2024  0009B6  EFDF  F004         	goto	u600
  2025  0009BA                     u601:
  2026  0009BA  EF77  F004         	goto	l1832
  2027  0009BE                     u600:
  2028  0009BE                     
  2029                           ; BSR set to: 0
  2030  0009BE  0100               	movlb	0	; force () banked
  2031  0009C0  2B74               	incf	calculToucheCombien@j& (0+255),f,b
  2032  0009C2                     l1840:
  2033                           
  2034                           ; BSR set to: 0
  2035  0009C2  0100               	movlb	0	; force () banked
  2036  0009C4  5173               	movf	calculToucheCombien@maxCol& (0+255),w,b
  2037  0009C6  0100               	movlb	0	; force () banked
  2038  0009C8  6F6A               	movwf	??_calculToucheCombien& (0+255),b
  2039  0009CA  6B6B               	clrf	(??_calculToucheCombien+1)& (0+255),b
  2040  0009CC  C074  F06C         	movff	calculToucheCombien@j,??_calculToucheCombien+2
  2041  0009D0  6B6D               	clrf	(??_calculToucheCombien+3)& (0+255),b
  2042  0009D2  BF6C               	btfsc	(??_calculToucheCombien+2)& (0+255),7,b
  2043  0009D4  076D               	decf	(??_calculToucheCombien+3)& (0+255),f,b
  2044  0009D6  516A               	movf	??_calculToucheCombien& (0+255),w,b
  2045  0009D8  5D6C               	subwf	(??_calculToucheCombien+2)& (0+255),w,b
  2046  0009DA  516D               	movf	(??_calculToucheCombien+3)& (0+255),w,b
  2047  0009DC  0A80               	xorlw	128
  2048  0009DE  6F6E               	movwf	(??_calculToucheCombien+4)& (0+255),b
  2049  0009E0  516B               	movf	(??_calculToucheCombien+1)& (0+255),w,b
  2050  0009E2  0A80               	xorlw	128
  2051  0009E4  596E               	subwfb	(??_calculToucheCombien+4)& (0+255),w,b
  2052  0009E6  A0D8               	btfss	status,0,c
  2053  0009E8  EFF8  F004         	goto	u611
  2054  0009EC  EFFA  F004         	goto	u610
  2055  0009F0                     u611:
  2056  0009F0  EF73  F004         	goto	l113
  2057  0009F4                     u610:
  2058  0009F4                     
  2059                           ; BSR set to: 0
  2060                           ;main.c: 265: };main.c: 266: };main.c: 267: };main.c: 269: return nombre;
  2061  0009F4  0100               	movlb	0	; force () banked
  2062  0009F6  516F               	movf	calculToucheCombien@nombre& (0+255),w,b
  2063  0009F8                     
  2064                           ; BSR set to: 0
  2065  0009F8  0012               	return		;funcret
  2066  0009FA                     __end_of_calculToucheCombien:
  2067                           	opt callstack 0
  2068                           
  2069 ;; *************** function _lcd_init *****************
  2070 ;; Defined at:
  2071 ;;		line 258 in file "Lcd4Lignes.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;		None
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;		None
  2076 ;; Return value:  Size  Location     Type
  2077 ;;                  1    wreg      void 
  2078 ;; Registers used:
  2079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2080 ;; Tracked objects:
  2081 ;;		On entry : 0/0
  2082 ;;		On exit  : 0/0
  2083 ;;		Unchanged: 0/0
  2084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2085 ;;      Params:         0       0       0       0       0       0       0
  2086 ;;      Locals:         0       0       0       0       0       0       0
  2087 ;;      Temps:          0       0       0       0       0       0       0
  2088 ;;      Totals:         0       0       0       0       0       0       0
  2089 ;;Total ram usage:        0 bytes
  2090 ;; Hardware stack levels used:    1
  2091 ;; Hardware stack levels required when called:    5
  2092 ;; This function calls:
  2093 ;;		_lcd_initCGRam
  2094 ;;		_lcd_resetSequence
  2095 ;;		_lcd_wrCom
  2096 ;; This function is called by:
  2097 ;;		_main
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text8
  2102  00133C                     __ptext8:
  2103                           	opt callstack 0
  2104  00133C                     _lcd_init:
  2105                           	opt callstack 25
  2106  00133C                     
  2107                           ;Lcd4Lignes.c: 261: lcd_resetSequence();
  2108  00133C  EC43  F008         	call	_lcd_resetSequence	;wreg free
  2109                           
  2110                           ;Lcd4Lignes.c: 262: lcd_wrCom(0x28);
  2111  001340  0E28               	movlw	40
  2112  001342  EC0D  F008         	call	_lcd_wrCom
  2113                           
  2114                           ;Lcd4Lignes.c: 263: lcd_wrCom(0x0F);
  2115  001346  0E0F               	movlw	15
  2116  001348  EC0D  F008         	call	_lcd_wrCom
  2117                           
  2118                           ;Lcd4Lignes.c: 264: lcd_wrCom(0x01);
  2119  00134C  0E01               	movlw	1
  2120  00134E  EC0D  F008         	call	_lcd_wrCom
  2121                           
  2122                           ;Lcd4Lignes.c: 265: lcd_wrCom(0x06);
  2123  001352  0E06               	movlw	6
  2124  001354  EC0D  F008         	call	_lcd_wrCom
  2125                           
  2126                           ;Lcd4Lignes.c: 266: lcd_wrCom(0x80);
  2127  001358  0E80               	movlw	128
  2128  00135A  EC0D  F008         	call	_lcd_wrCom
  2129  00135E                     
  2130                           ;Lcd4Lignes.c: 267: lcd_initCGRam();
  2131  00135E  EC16  F007         	call	_lcd_initCGRam	;wreg free
  2132  001362  0012               	return		;funcret
  2133  001364                     __end_of_lcd_init:
  2134                           	opt callstack 0
  2135                           
  2136 ;; *************** function _lcd_resetSequence *****************
  2137 ;; Defined at:
  2138 ;;		line 221 in file "Lcd4Lignes.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;		None
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;		None
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  1    wreg      void 
  2145 ;; Registers used:
  2146 ;;		wreg, status,2, status,0, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2152 ;;      Params:         0       0       0       0       0       0       0
  2153 ;;      Locals:         0       0       0       0       0       0       0
  2154 ;;      Temps:          0       1       0       0       0       0       0
  2155 ;;      Totals:         0       1       0       0       0       0       0
  2156 ;;Total ram usage:        1 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; Hardware stack levels required when called:    1
  2159 ;; This function calls:
  2160 ;;		_lcd_ecrireDonnees
  2161 ;;		_lcd_strobeEnableBit
  2162 ;; This function is called by:
  2163 ;;		_lcd_init
  2164 ;; This function uses a non-reentrant model
  2165 ;;
  2166                           
  2167                           	psect	text9
  2168  001086                     __ptext9:
  2169                           	opt callstack 0
  2170  001086                     _lcd_resetSequence:
  2171                           	opt callstack 28
  2172  001086                     
  2173                           ;Lcd4Lignes.c: 226: TRISD = 0b00000000;
  2174  001086  0E00               	movlw	0
  2175  001088  6E95               	movwf	149,c	;volatile
  2176  00108A                     
  2177                           ;Lcd4Lignes.c: 228: _delay((unsigned long)((40)*(1000000/4000.0)));
  2178  00108A  0E0D               	movlw	13
  2179  00108C  0100               	movlb	0	; force () banked
  2180  00108E  6F62               	movwf	??_lcd_resetSequence& (0+255),b
  2181  001090  0EFB               	movlw	251
  2182  001092                     u927:
  2183  001092  2EE8               	decfsz	wreg,f,c
  2184  001094  D7FE               	bra	u927
  2185  001096  2F62               	decfsz	??_lcd_resetSequence& (0+255),f,b
  2186  001098  D7FC               	bra	u927
  2187  00109A  F000 F000          	nop2	
  2188  00109E                     
  2189                           ;Lcd4Lignes.c: 229: PORTAbits.RA0 = 0;
  2190  00109E  9080               	bcf	128,0,c	;volatile
  2191  0010A0                     
  2192                           ;Lcd4Lignes.c: 230: PORTAbits.RA1 = 0;
  2193  0010A0  9280               	bcf	128,1,c	;volatile
  2194  0010A2                     
  2195                           ;Lcd4Lignes.c: 232: lcd_ecrireDonnees(0x03);
  2196  0010A2  0E03               	movlw	3
  2197  0010A4  ECD5  F009         	call	_lcd_ecrireDonnees
  2198  0010A8                     
  2199                           ;Lcd4Lignes.c: 233: lcd_strobeEnableBit();
  2200  0010A8  EC02  F00A         	call	_lcd_strobeEnableBit	;wreg free
  2201  0010AC                     
  2202                           ;Lcd4Lignes.c: 234: _delay((unsigned long)((40)*(1000000/4000000.0)));
  2203  0010AC  0E03               	movlw	3
  2204  0010AE                     u937:
  2205  0010AE  2EE8               	decfsz	wreg,f,c
  2206  0010B0  D7FE               	bra	u937
  2207  0010B2  F000               	nop	
  2208  0010B4                     
  2209                           ;Lcd4Lignes.c: 237: lcd_ecrireDonnees(0x03);
  2210  0010B4  0E03               	movlw	3
  2211  0010B6  ECD5  F009         	call	_lcd_ecrireDonnees
  2212  0010BA                     
  2213                           ;Lcd4Lignes.c: 238: lcd_strobeEnableBit();
  2214  0010BA  EC02  F00A         	call	_lcd_strobeEnableBit	;wreg free
  2215  0010BE                     
  2216                           ;Lcd4Lignes.c: 239: _delay((unsigned long)((40)*(1000000/4000000.0)));
  2217  0010BE  0E03               	movlw	3
  2218  0010C0                     u947:
  2219  0010C0  2EE8               	decfsz	wreg,f,c
  2220  0010C2  D7FE               	bra	u947
  2221  0010C4  F000               	nop	
  2222  0010C6                     
  2223                           ;Lcd4Lignes.c: 241: lcd_ecrireDonnees(0x03);
  2224  0010C6  0E03               	movlw	3
  2225  0010C8  ECD5  F009         	call	_lcd_ecrireDonnees
  2226  0010CC                     
  2227                           ;Lcd4Lignes.c: 242: lcd_strobeEnableBit();
  2228  0010CC  EC02  F00A         	call	_lcd_strobeEnableBit	;wreg free
  2229  0010D0                     
  2230                           ;Lcd4Lignes.c: 243: _delay((unsigned long)((40)*(1000000/4000000.0)));
  2231  0010D0  0E03               	movlw	3
  2232  0010D2                     u957:
  2233  0010D2  2EE8               	decfsz	wreg,f,c
  2234  0010D4  D7FE               	bra	u957
  2235  0010D6  F000               	nop	
  2236  0010D8                     
  2237                           ;Lcd4Lignes.c: 245: lcd_ecrireDonnees(0x02);
  2238  0010D8  0E02               	movlw	2
  2239  0010DA  ECD5  F009         	call	_lcd_ecrireDonnees
  2240  0010DE                     
  2241                           ;Lcd4Lignes.c: 246: lcd_strobeEnableBit();
  2242  0010DE  EC02  F00A         	call	_lcd_strobeEnableBit	;wreg free
  2243  0010E2                     
  2244                           ;Lcd4Lignes.c: 247: _delay((unsigned long)((40)*(1000000/4000000.0)));
  2245  0010E2  0E03               	movlw	3
  2246  0010E4                     u967:
  2247  0010E4  2EE8               	decfsz	wreg,f,c
  2248  0010E6  D7FE               	bra	u967
  2249  0010E8  F000               	nop	
  2250  0010EA                     
  2251                           ;Lcd4Lignes.c: 249: TRISD = 0b00001111;
  2252  0010EA  0E0F               	movlw	15
  2253  0010EC  6E95               	movwf	149,c	;volatile
  2254  0010EE  0012               	return		;funcret
  2255  0010F0                     __end_of_lcd_resetSequence:
  2256                           	opt callstack 0
  2257                           
  2258 ;; *************** function _lcd_initCGRam *****************
  2259 ;; Defined at:
  2260 ;;		line 417 in file "Lcd4Lignes.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;		None
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;  j               1    6[BANK0 ] unsigned char 
  2265 ;;  i               1    5[BANK0 ] unsigned char 
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  1    wreg      void 
  2268 ;; Registers used:
  2269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2275 ;;      Params:         0       0       0       0       0       0       0
  2276 ;;      Locals:         0       2       0       0       0       0       0
  2277 ;;      Temps:          0       2       0       0       0       0       0
  2278 ;;      Totals:         0       4       0       0       0       0       0
  2279 ;;Total ram usage:        4 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    4
  2282 ;; This function calls:
  2283 ;;		_lcd_curseurHome
  2284 ;;		_lcd_wrCom
  2285 ;;		_lcd_wrData
  2286 ;; This function is called by:
  2287 ;;		_lcd_init
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291                           	psect	text10
  2292  000E2C                     __ptext10:
  2293                           	opt callstack 0
  2294  000E2C                     _lcd_initCGRam:
  2295                           	opt callstack 25
  2296  000E2C                     
  2297                           ;Lcd4Lignes.c: 419: char i,j;;Lcd4Lignes.c: 421: lcd_wrCom(0x40);
  2298  000E2C  0E40               	movlw	64
  2299  000E2E  EC0D  F008         	call	_lcd_wrCom
  2300  000E32                     
  2301                           ;Lcd4Lignes.c: 422: for(i=0;i<8;i++)
  2302  000E32  0E00               	movlw	0
  2303  000E34  0100               	movlb	0	; force () banked
  2304  000E36  6F65               	movwf	lcd_initCGRam@i& (0+255),b
  2305  000E38                     
  2306                           ; BSR set to: 0
  2307  000E38  0E07               	movlw	7
  2308  000E3A  0100               	movlb	0	; force () banked
  2309  000E3C  6565               	cpfsgt	lcd_initCGRam@i& (0+255),b
  2310  000E3E  EF23  F007         	goto	u621
  2311  000E42  EF25  F007         	goto	u620
  2312  000E46                     u621:
  2313  000E46  EF27  F007         	goto	l1890
  2314  000E4A                     u620:
  2315  000E4A  EF64  F007         	goto	l1906
  2316  000E4E                     l1890:
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;Lcd4Lignes.c: 423: {;Lcd4Lignes.c: 424: for(j=0;j<8;j++)
  2320  000E4E  0E00               	movlw	0
  2321  000E50  0100               	movlb	0	; force () banked
  2322  000E52  6F66               	movwf	lcd_initCGRam@j& (0+255),b
  2323  000E54                     
  2324                           ; BSR set to: 0
  2325  000E54  0E07               	movlw	7
  2326  000E56  0100               	movlb	0	; force () banked
  2327  000E58  6566               	cpfsgt	lcd_initCGRam@j& (0+255),b
  2328  000E5A  EF31  F007         	goto	u631
  2329  000E5E  EF33  F007         	goto	u630
  2330  000E62                     u631:
  2331  000E62  EF35  F007         	goto	l1896
  2332  000E66                     u630:
  2333  000E66  EF59  F007         	goto	l1902
  2334  000E6A                     l1896:
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;Lcd4Lignes.c: 425: lcd_wrData(matCGRAM[i][j]);
  2338  000E6A  0100               	movlb	0	; force () banked
  2339  000E6C  5165               	movf	lcd_initCGRam@i& (0+255),w,b
  2340  000E6E  0D08               	mullw	8
  2341  000E70  0EA8               	movlw	low _matCGRAM
  2342  000E72  0100               	movlb	0	; force () banked
  2343  000E74  6F63               	movwf	??_lcd_initCGRam& (0+255),b
  2344  000E76  0E01               	movlw	high _matCGRAM
  2345  000E78  6F64               	movwf	(??_lcd_initCGRam+1)& (0+255),b
  2346  000E7A  50F3               	movf	243,w,c
  2347  000E7C  2763               	addwf	??_lcd_initCGRam& (0+255),f,b
  2348  000E7E  50F4               	movf	244,w,c
  2349  000E80  2364               	addwfc	(??_lcd_initCGRam+1)& (0+255),f,b
  2350  000E82  0100               	movlb	0	; force () banked
  2351  000E84  5166               	movf	lcd_initCGRam@j& (0+255),w,b
  2352  000E86  0100               	movlb	0	; force () banked
  2353  000E88  2563               	addwf	??_lcd_initCGRam& (0+255),w,b
  2354  000E8A  6ED9               	movwf	fsr2l,c
  2355  000E8C  0100               	movlb	0	; force () banked
  2356  000E8E  0E00               	movlw	0
  2357  000E90  0100               	movlb	0	; force () banked
  2358  000E92  2164               	addwfc	(??_lcd_initCGRam+1)& (0+255),w,b
  2359  000E94  6EDA               	movwf	fsr2h,c
  2360  000E96  50DF               	movf	indf2,w,c
  2361  000E98  EC84  F009         	call	_lcd_wrData
  2362  000E9C  0100               	movlb	0	; force () banked
  2363  000E9E  2B66               	incf	lcd_initCGRam@j& (0+255),f,b
  2364  000EA0                     
  2365                           ; BSR set to: 0
  2366  000EA0  0E07               	movlw	7
  2367  000EA2  0100               	movlb	0	; force () banked
  2368  000EA4  6566               	cpfsgt	lcd_initCGRam@j& (0+255),b
  2369  000EA6  EF57  F007         	goto	u641
  2370  000EAA  EF59  F007         	goto	u640
  2371  000EAE                     u641:
  2372  000EAE  EF35  F007         	goto	l1896
  2373  000EB2                     u640:
  2374  000EB2                     l1902:
  2375                           
  2376                           ; BSR set to: 0
  2377  000EB2  0100               	movlb	0	; force () banked
  2378  000EB4  2B65               	incf	lcd_initCGRam@i& (0+255),f,b
  2379  000EB6                     
  2380                           ; BSR set to: 0
  2381  000EB6  0E07               	movlw	7
  2382  000EB8  0100               	movlb	0	; force () banked
  2383  000EBA  6565               	cpfsgt	lcd_initCGRam@i& (0+255),b
  2384  000EBC  EF62  F007         	goto	u651
  2385  000EC0  EF64  F007         	goto	u650
  2386  000EC4                     u651:
  2387  000EC4  EF27  F007         	goto	l1890
  2388  000EC8                     u650:
  2389  000EC8                     l1906:
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;Lcd4Lignes.c: 426: };Lcd4Lignes.c: 427: lcd_curseurHome();
  2393  000EC8  ECFE  F009         	call	_lcd_curseurHome	;wreg free
  2394  000ECC  0012               	return		;funcret
  2395  000ECE                     __end_of_lcd_initCGRam:
  2396                           	opt callstack 0
  2397                           
  2398 ;; *************** function _lcd_curseurHome *****************
  2399 ;; Defined at:
  2400 ;;		line 288 in file "Lcd4Lignes.c"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;		None
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;		None
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  1    wreg      void 
  2407 ;; Registers used:
  2408 ;;		wreg, status,2, status,0, cstack
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2414 ;;      Params:         0       0       0       0       0       0       0
  2415 ;;      Locals:         0       0       0       0       0       0       0
  2416 ;;      Temps:          0       0       0       0       0       0       0
  2417 ;;      Totals:         0       0       0       0       0       0       0
  2418 ;;Total ram usage:        0 bytes
  2419 ;; Hardware stack levels used:    1
  2420 ;; Hardware stack levels required when called:    3
  2421 ;; This function calls:
  2422 ;;		_lcd_wrCom
  2423 ;; This function is called by:
  2424 ;;		_lcd_initCGRam
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           	psect	text11
  2429  0013FC                     __ptext11:
  2430                           	opt callstack 0
  2431  0013FC                     _lcd_curseurHome:
  2432                           	opt callstack 25
  2433  0013FC                     
  2434                           ;Lcd4Lignes.c: 290: lcd_wrCom(0x02);
  2435  0013FC  0E02               	movlw	2
  2436  0013FE  EC0D  F008         	call	_lcd_wrCom
  2437  001402  0012               	return		;funcret
  2438  001404                     __end_of_lcd_curseurHome:
  2439                           	opt callstack 0
  2440                           
  2441 ;; *************** function _initialisation *****************
  2442 ;; Defined at:
  2443 ;;		line 355 in file "main.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;		None
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;		None
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  1    wreg      void 
  2450 ;; Registers used:
  2451 ;;		wreg, status,2, cstack
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2457 ;;      Params:         0       0       0       0       0       0       0
  2458 ;;      Locals:         0       0       0       0       0       0       0
  2459 ;;      Temps:          0       0       0       0       0       0       0
  2460 ;;      Totals:         0       0       0       0       0       0       0
  2461 ;;Total ram usage:        0 bytes
  2462 ;; Hardware stack levels used:    1
  2463 ;; Hardware stack levels required when called:    1
  2464 ;; This function calls:
  2465 ;;		_srand
  2466 ;; This function is called by:
  2467 ;;		_main
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471                           	psect	text12
  2472  00123A                     __ptext12:
  2473                           	opt callstack 0
  2474  00123A                     _initialisation:
  2475                           	opt callstack 29
  2476  00123A                     
  2477                           ;main.c: 357: TRISD = 0;
  2478  00123A  0E00               	movlw	0
  2479  00123C  6E95               	movwf	149,c	;volatile
  2480                           
  2481                           ;main.c: 359: ANSELH = 0;
  2482  00123E  0E00               	movlw	0
  2483  001240  6E7F               	movwf	127,c	;volatile
  2484  001242                     
  2485                           ;main.c: 360: TRISB = 0xFF;
  2486  001242  6893               	setf	147,c	;volatile
  2487                           
  2488                           ;main.c: 362: ANSEL = 0;
  2489  001244  0E00               	movlw	0
  2490  001246  6E7E               	movwf	126,c	;volatile
  2491                           
  2492                           ;main.c: 363: TRISA = 0;
  2493  001248  0E00               	movlw	0
  2494  00124A  6E92               	movwf	146,c	;volatile
  2495  00124C                     
  2496                           ;main.c: 367: T1CONbits.TMR1ON = 1;
  2497  00124C  80CD               	bsf	205,0,c	;volatile
  2498  00124E                     
  2499                           ;main.c: 368: srand(TMR1);
  2500  00124E  CFCE F060          	movff	4046,srand@x	;volatile
  2501  001252  CFCF F061          	movff	4047,srand@x+1	;volatile
  2502  001256  ECEF  F009         	call	_srand	;wreg free
  2503  00125A                     
  2504                           ;main.c: 371: ANSELbits.ANS7 = 1;
  2505  00125A  8E7E               	bsf	126,7,c	;volatile
  2506  00125C                     
  2507                           ;main.c: 373: ADCON0bits.ADON = 1;
  2508  00125C  80C2               	bsf	194,0,c	;volatile
  2509  00125E                     
  2510                           ;main.c: 374: ADCON1 = 0;
  2511  00125E  0E00               	movlw	0
  2512  001260  6EC1               	movwf	193,c	;volatile
  2513  001262                     
  2514                           ;main.c: 376: ADCON2bits.ADFM = 0;
  2515  001262  9EC0               	bcf	192,7,c	;volatile
  2516  001264                     
  2517                           ;main.c: 377: ADCON2bits.ACQT = 0;
  2518  001264  0EC7               	movlw	-57
  2519  001266  16C0               	andwf	192,f,c	;volatile
  2520  001268                     
  2521                           ;main.c: 378: ADCON2bits.ADCS = 0;
  2522  001268  0EF8               	movlw	-8
  2523  00126A  16C0               	andwf	192,f,c	;volatile
  2524  00126C                     
  2525                           ;main.c: 382: T0CONbits.TMR0ON = 1;
  2526  00126C  8ED5               	bsf	213,7,c	;volatile
  2527  00126E                     
  2528                           ;main.c: 383: T0CONbits.T08BIT = 0;
  2529  00126E  9CD5               	bcf	213,6,c	;volatile
  2530  001270                     
  2531                           ;main.c: 384: T0CONbits.T0CS = 0;
  2532  001270  9AD5               	bcf	213,5,c	;volatile
  2533  001272                     
  2534                           ;main.c: 385: T0CONbits.PSA = 0;
  2535  001272  96D5               	bcf	213,3,c	;volatile
  2536  001274                     
  2537                           ;main.c: 386: T0CONbits.T0PS = 0b010;
  2538  001274  50D5               	movf	213,w,c	;volatile
  2539  001276  0BF8               	andlw	-8
  2540  001278  0902               	iorlw	2
  2541  00127A  6ED5               	movwf	213,c	;volatile
  2542  00127C                     
  2543                           ;main.c: 388: INTCONbits.TMR0IE = 1;
  2544  00127C  8AF2               	bsf	242,5,c	;volatile
  2545  00127E                     
  2546                           ;main.c: 389: INTCONbits.TMR0IF = 0;
  2547  00127E  94F2               	bcf	242,2,c	;volatile
  2548  001280                     
  2549                           ;main.c: 390: INTCONbits.PEIE = 1;
  2550  001280  8CF2               	bsf	242,6,c	;volatile
  2551  001282                     
  2552                           ;main.c: 391: INTCONbits.GIE = 1;
  2553  001282  8EF2               	bsf	242,7,c	;volatile
  2554  001284  0012               	return		;funcret
  2555  001286                     __end_of_initialisation:
  2556                           	opt callstack 0
  2557                           
  2558 ;; *************** function _srand *****************
  2559 ;; Defined at:
  2560 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
  2561 ;; Parameters:    Size  Location     Type
  2562 ;;  x               2    0[BANK0 ] unsigned int 
  2563 ;; Auto vars:     Size  Location     Type
  2564 ;;		None
  2565 ;; Return value:  Size  Location     Type
  2566 ;;                  1    wreg      void 
  2567 ;; Registers used:
  2568 ;;		status,2
  2569 ;; Tracked objects:
  2570 ;;		On entry : 0/0
  2571 ;;		On exit  : 0/0
  2572 ;;		Unchanged: 0/0
  2573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2574 ;;      Params:         0       2       0       0       0       0       0
  2575 ;;      Locals:         0       0       0       0       0       0       0
  2576 ;;      Temps:          0       0       0       0       0       0       0
  2577 ;;      Totals:         0       2       0       0       0       0       0
  2578 ;;Total ram usage:        2 bytes
  2579 ;; Hardware stack levels used:    1
  2580 ;; This function calls:
  2581 ;;		Nothing
  2582 ;; This function is called by:
  2583 ;;		_initialisation
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587                           	psect	text13
  2588  0013DE                     __ptext13:
  2589                           	opt callstack 0
  2590  0013DE                     _srand:
  2591                           	opt callstack 29
  2592  0013DE  C060  F0EF         	movff	srand@x,_randx
  2593  0013E2  C061  F0F0         	movff	srand@x+1,_randx+1
  2594  0013E6  0100               	movlb	0	; () banked
  2595  0013E8  6BF1               	clrf	(_randx+2)& (0+255),b
  2596  0013EA  6BF2               	clrf	(_randx+3)& (0+255),b
  2597  0013EC                     
  2598                           ; BSR set to: 0
  2599  0013EC  0012               	return		;funcret
  2600  0013EE                     __end_of_srand:
  2601                           	opt callstack 0
  2602                           
  2603 ;; *************** function _init_serie *****************
  2604 ;; Defined at:
  2605 ;;		line 29 in file "serie.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;		None
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;		None
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		wreg, status,2
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2619 ;;      Params:         0       0       0       0       0       0       0
  2620 ;;      Locals:         0       0       0       0       0       0       0
  2621 ;;      Temps:          0       0       0       0       0       0       0
  2622 ;;      Totals:         0       0       0       0       0       0       0
  2623 ;;Total ram usage:        0 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; This function calls:
  2626 ;;		Nothing
  2627 ;; This function is called by:
  2628 ;;		_main
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text14
  2633  00138C                     __ptext14:
  2634                           	opt callstack 0
  2635  00138C                     _init_serie:
  2636                           	opt callstack 30
  2637  00138C                     
  2638                           ;serie.c: 32: TRISCbits.TRISC7=1;
  2639  00138C  8E94               	bsf	148,7,c	;volatile
  2640                           
  2641                           ;serie.c: 33: TRISCbits.TRISC6=1;
  2642  00138E  8C94               	bsf	148,6,c	;volatile
  2643  001390                     
  2644                           ;serie.c: 37: SPBRGH=0x00;
  2645  001390  0E00               	movlw	0
  2646  001392  6EB0               	movwf	176,c	;volatile
  2647                           
  2648                           ;serie.c: 38: SPBRG=25;
  2649  001394  0E19               	movlw	25
  2650  001396  6EAF               	movwf	175,c	;volatile
  2651  001398                     
  2652                           ;serie.c: 39: BAUDCONbits.BRG16=1;
  2653  001398  86B8               	bsf	184,3,c	;volatile
  2654  00139A                     
  2655                           ;serie.c: 40: TXSTAbits.BRGH=1;
  2656  00139A  84AC               	bsf	172,2,c	;volatile
  2657  00139C                     
  2658                           ;serie.c: 43: TXSTAbits.SYNC=0;
  2659  00139C  98AC               	bcf	172,4,c	;volatile
  2660  00139E                     
  2661                           ;serie.c: 44: TXSTAbits.TXEN=1;
  2662  00139E  8AAC               	bsf	172,5,c	;volatile
  2663  0013A0                     
  2664                           ;serie.c: 45: RCSTAbits.CREN = 1;
  2665  0013A0  88AB               	bsf	171,4,c	;volatile
  2666  0013A2                     
  2667                           ;serie.c: 46: RCSTAbits.SPEN=1;
  2668  0013A2  8EAB               	bsf	171,7,c	;volatile
  2669                           
  2670                           ;serie.c: 47: ANSEL = 0;
  2671  0013A4  0E00               	movlw	0
  2672  0013A6  6E7E               	movwf	126,c	;volatile
  2673  0013A8  0012               	return		;funcret
  2674  0013AA                     __end_of_init_serie:
  2675                           	opt callstack 0
  2676                           
  2677 ;; *************** function _initTabVue *****************
  2678 ;; Defined at:
  2679 ;;		line 157 in file "main.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;		None
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;  k               2   10[BANK0 ] int 
  2684 ;;  i               2    8[BANK0 ] int 
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  1    wreg      void 
  2687 ;; Registers used:
  2688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2694 ;;      Params:         0       0       0       0       0       0       0
  2695 ;;      Locals:         0       4       0       0       0       0       0
  2696 ;;      Temps:          0       2       0       0       0       0       0
  2697 ;;      Totals:         0       6       0       0       0       0       0
  2698 ;;Total ram usage:        6 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; Hardware stack levels required when called:    1
  2701 ;; This function calls:
  2702 ;;		___wmul
  2703 ;; This function is called by:
  2704 ;;		_main
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           	psect	text15
  2709  000C90                     __ptext15:
  2710                           	opt callstack 0
  2711  000C90                     _initTabVue:
  2712                           	opt callstack 29
  2713  000C90                     
  2714                           ;main.c: 159: for(int i = 0 ; i < 4 ; i++)
  2715  000C90  0E00               	movlw	0
  2716  000C92  0100               	movlb	0	; force () banked
  2717  000C94  6F69               	movwf	(initTabVue@i+1)& (0+255),b
  2718  000C96  0E00               	movlw	0
  2719  000C98  6F68               	movwf	initTabVue@i& (0+255),b
  2720  000C9A                     
  2721                           ; BSR set to: 0
  2722  000C9A  0100               	movlb	0	; force () banked
  2723  000C9C  BF69               	btfsc	(initTabVue@i+1)& (0+255),7,b
  2724  000C9E  EF5A  F006         	goto	u731
  2725  000CA2  5169               	movf	(initTabVue@i+1)& (0+255),w,b
  2726  000CA4  E109               	bnz	u730
  2727  000CA6  0E04               	movlw	4
  2728  000CA8  5D68               	subwf	initTabVue@i& (0+255),w,b
  2729  000CAA  A0D8               	btfss	status,0,c
  2730  000CAC  EF5A  F006         	goto	u731
  2731  000CB0  EF5C  F006         	goto	u730
  2732  000CB4                     u731:
  2733  000CB4  EF5E  F006         	goto	l2020
  2734  000CB8                     u730:
  2735  000CB8  EFBC  F006         	goto	l85
  2736  000CBC                     l2020:
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;main.c: 160: {;main.c: 161: for(int k = 0 ; k < 20 ; k++)
  2740  000CBC  0E00               	movlw	0
  2741  000CBE  0100               	movlb	0	; force () banked
  2742  000CC0  6F6B               	movwf	(initTabVue@k+1)& (0+255),b
  2743  000CC2  0E00               	movlw	0
  2744  000CC4  6F6A               	movwf	initTabVue@k& (0+255),b
  2745  000CC6                     
  2746                           ; BSR set to: 0
  2747  000CC6  0100               	movlb	0	; force () banked
  2748  000CC8  BF6B               	btfsc	(initTabVue@k+1)& (0+255),7,b
  2749  000CCA  EF70  F006         	goto	u741
  2750  000CCE  516B               	movf	(initTabVue@k+1)& (0+255),w,b
  2751  000CD0  E109               	bnz	u740
  2752  000CD2  0E14               	movlw	20
  2753  000CD4  5D6A               	subwf	initTabVue@k& (0+255),w,b
  2754  000CD6  A0D8               	btfss	status,0,c
  2755  000CD8  EF70  F006         	goto	u741
  2756  000CDC  EF72  F006         	goto	u740
  2757  000CE0                     u741:
  2758  000CE0  EF74  F006         	goto	l2026
  2759  000CE4                     u740:
  2760  000CE4  EFAA  F006         	goto	l2032
  2761  000CE8                     l2026:
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;main.c: 162: {;main.c: 163: m_tabVue[i][k] = 1;
  2765  000CE8  C068  F060         	movff	initTabVue@i,___wmul@multiplier
  2766  000CEC  C069  F061         	movff	initTabVue@i+1,___wmul@multiplier+1
  2767  000CF0  0E00               	movlw	0
  2768  000CF2  0100               	movlb	0	; force () banked
  2769  000CF4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2770  000CF6  0E15               	movlw	21
  2771  000CF8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2772  000CFA  ECB2  F009         	call	___wmul	;wreg free
  2773  000CFE  0E00               	movlw	low _m_tabVue
  2774  000D00  0100               	movlb	0	; force () banked
  2775  000D02  6F66               	movwf	??_initTabVue& (0+255),b
  2776  000D04  0E01               	movlw	high _m_tabVue
  2777  000D06  6F67               	movwf	(??_initTabVue+1)& (0+255),b
  2778  000D08  0100               	movlb	0	; force () banked
  2779  000D0A  5160               	movf	?___wmul& (0+255),w,b
  2780  000D0C  0100               	movlb	0	; force () banked
  2781  000D0E  2766               	addwf	??_initTabVue& (0+255),f,b
  2782  000D10  0100               	movlb	0	; force () banked
  2783  000D12  5161               	movf	(?___wmul+1)& (0+255),w,b
  2784  000D14  0100               	movlb	0	; force () banked
  2785  000D16  2367               	addwfc	(??_initTabVue+1)& (0+255),f,b
  2786  000D18  0100               	movlb	0	; force () banked
  2787  000D1A  516A               	movf	initTabVue@k& (0+255),w,b
  2788  000D1C  0100               	movlb	0	; force () banked
  2789  000D1E  2566               	addwf	??_initTabVue& (0+255),w,b
  2790  000D20  6ED9               	movwf	fsr2l,c
  2791  000D22  0100               	movlb	0	; force () banked
  2792  000D24  516B               	movf	(initTabVue@k+1)& (0+255),w,b
  2793  000D26  0100               	movlb	0	; force () banked
  2794  000D28  2167               	addwfc	(??_initTabVue+1)& (0+255),w,b
  2795  000D2A  6EDA               	movwf	fsr2h,c
  2796  000D2C  0E01               	movlw	1
  2797  000D2E  6EDF               	movwf	indf2,c
  2798  000D30                     
  2799                           ; BSR set to: 0
  2800  000D30  0100               	movlb	0	; force () banked
  2801  000D32  4B6A               	infsnz	initTabVue@k& (0+255),f,b
  2802  000D34  2B6B               	incf	(initTabVue@k+1)& (0+255),f,b
  2803  000D36                     
  2804                           ; BSR set to: 0
  2805  000D36  0100               	movlb	0	; force () banked
  2806  000D38  BF6B               	btfsc	(initTabVue@k+1)& (0+255),7,b
  2807  000D3A  EFA8  F006         	goto	u751
  2808  000D3E  516B               	movf	(initTabVue@k+1)& (0+255),w,b
  2809  000D40  E109               	bnz	u750
  2810  000D42  0E14               	movlw	20
  2811  000D44  5D6A               	subwf	initTabVue@k& (0+255),w,b
  2812  000D46  A0D8               	btfss	status,0,c
  2813  000D48  EFA8  F006         	goto	u751
  2814  000D4C  EFAA  F006         	goto	u750
  2815  000D50                     u751:
  2816  000D50  EF74  F006         	goto	l2026
  2817  000D54                     u750:
  2818  000D54                     l2032:
  2819                           
  2820                           ; BSR set to: 0
  2821  000D54  0100               	movlb	0	; force () banked
  2822  000D56  4B68               	infsnz	initTabVue@i& (0+255),f,b
  2823  000D58  2B69               	incf	(initTabVue@i+1)& (0+255),f,b
  2824  000D5A                     
  2825                           ; BSR set to: 0
  2826  000D5A  0100               	movlb	0	; force () banked
  2827  000D5C  BF69               	btfsc	(initTabVue@i+1)& (0+255),7,b
  2828  000D5E  EFBA  F006         	goto	u761
  2829  000D62  5169               	movf	(initTabVue@i+1)& (0+255),w,b
  2830  000D64  E109               	bnz	u760
  2831  000D66  0E04               	movlw	4
  2832  000D68  5D68               	subwf	initTabVue@i& (0+255),w,b
  2833  000D6A  A0D8               	btfss	status,0,c
  2834  000D6C  EFBA  F006         	goto	u761
  2835  000D70  EFBC  F006         	goto	u760
  2836  000D74                     u761:
  2837  000D74  EF5E  F006         	goto	l2020
  2838  000D78                     u760:
  2839  000D78                     l85:
  2840                           
  2841                           ; BSR set to: 0
  2842  000D78  0012               	return		;funcret
  2843  000D7A                     __end_of_initTabVue:
  2844                           	opt callstack 0
  2845                           
  2846 ;; *************** function ___wmul *****************
  2847 ;; Defined at:
  2848 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2851 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;  product         2    4[BANK0 ] unsigned int 
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  2    0[BANK0 ] unsigned int 
  2856 ;; Registers used:
  2857 ;;		wreg, status,2, status,0, prodl, prodh
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2863 ;;      Params:         0       4       0       0       0       0       0
  2864 ;;      Locals:         0       2       0       0       0       0       0
  2865 ;;      Temps:          0       0       0       0       0       0       0
  2866 ;;      Totals:         0       6       0       0       0       0       0
  2867 ;;Total ram usage:        6 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; This function calls:
  2870 ;;		Nothing
  2871 ;; This function is called by:
  2872 ;;		_initTabVue
  2873 ;;		_rempliMines
  2874 ;;		_metToucheCombien
  2875 ;;		_calculToucheCombien
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           	psect	text16
  2880  001364                     __ptext16:
  2881                           	opt callstack 0
  2882  001364                     ___wmul:
  2883                           	opt callstack 29
  2884  001364  0100               	movlb	0	; () banked
  2885  001366  5160               	movf	___wmul@multiplier& (0+255),w,b
  2886  001368  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2887  00136A  CFF3 F064          	movff	prodl,___wmul@product
  2888  00136E  CFF4 F065          	movff	prodh,___wmul@product+1
  2889  001372  5160               	movf	___wmul@multiplier& (0+255),w,b
  2890  001374  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2891  001376  50F3               	movf	243,w,c
  2892  001378  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2893  00137A  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2894  00137C  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2895  00137E  50F3               	movf	243,w,c
  2896  001380  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2897  001382                     
  2898                           ; BSR set to: 0
  2899  001382  C064  F060         	movff	___wmul@product,?___wmul
  2900  001386  C065  F061         	movff	___wmul@product+1,?___wmul+1
  2901  00138A                     
  2902                           ; BSR set to: 0
  2903  00138A  0012               	return		;funcret
  2904  00138C                     __end_of___wmul:
  2905                           	opt callstack 0
  2906                           
  2907 ;; *************** function _afficheTabVue *****************
  2908 ;; Defined at:
  2909 ;;		line 137 in file "main.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;		None
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;		None
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2923 ;;      Params:         0       0       0       0       0       0       0
  2924 ;;      Locals:         0       0       0       0       0       0       0
  2925 ;;      Temps:          0       0       0       0       0       0       0
  2926 ;;      Totals:         0       0       0       0       0       0       0
  2927 ;;Total ram usage:        0 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    5
  2930 ;; This function calls:
  2931 ;;		_lcd_effaceAffichage
  2932 ;;		_lcd_gotoXY
  2933 ;;		_lcd_putMessage
  2934 ;; This function is called by:
  2935 ;;		_main
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           	psect	text17
  2940  000F40                     __ptext17:
  2941                           	opt callstack 0
  2942  000F40                     _afficheTabVue:
  2943                           	opt callstack 25
  2944  000F40                     
  2945                           ;main.c: 139: lcd_effaceAffichage();
  2946  000F40  ECF7  F009         	call	_lcd_effaceAffichage	;wreg free
  2947                           
  2948                           ;main.c: 140: lcd_gotoXY(1, 1);
  2949  000F44  0E01               	movlw	1
  2950  000F46  0100               	movlb	0	; force () banked
  2951  000F48  6F63               	movwf	lcd_gotoXY@y& (0+255),b
  2952  000F4A  0E01               	movlw	1
  2953  000F4C  EC67  F007         	call	_lcd_gotoXY
  2954  000F50                     
  2955                           ;main.c: 141: lcd_putMessage(m_tabVue[0]);
  2956  000F50  0E00               	movlw	low _m_tabVue
  2957  000F52  0100               	movlb	0	; force () banked
  2958  000F54  6F65               	movwf	lcd_putMessage@chaine& (0+255),b
  2959  000F56  0E01               	movlw	high _m_tabVue
  2960  000F58  6F66               	movwf	(lcd_putMessage@chaine+1)& (0+255),b
  2961  000F5A  ECF6  F008         	call	_lcd_putMessage	;wreg free
  2962  000F5E                     
  2963                           ;main.c: 142: lcd_gotoXY(1, 2);
  2964  000F5E  0E02               	movlw	2
  2965  000F60  0100               	movlb	0	; force () banked
  2966  000F62  6F63               	movwf	lcd_gotoXY@y& (0+255),b
  2967  000F64  0E01               	movlw	1
  2968  000F66  EC67  F007         	call	_lcd_gotoXY
  2969                           
  2970                           ;main.c: 143: lcd_putMessage(m_tabVue[1]);
  2971  000F6A  0E15               	movlw	low (_m_tabVue+21)
  2972  000F6C  0100               	movlb	0	; force () banked
  2973  000F6E  6F65               	movwf	lcd_putMessage@chaine& (0+255),b
  2974  000F70  0E01               	movlw	high (_m_tabVue+21)
  2975  000F72  6F66               	movwf	(lcd_putMessage@chaine+1)& (0+255),b
  2976  000F74  ECF6  F008         	call	_lcd_putMessage	;wreg free
  2977  000F78                     
  2978                           ;main.c: 144: lcd_gotoXY(1, 3);
  2979  000F78  0E03               	movlw	3
  2980  000F7A  0100               	movlb	0	; force () banked
  2981  000F7C  6F63               	movwf	lcd_gotoXY@y& (0+255),b
  2982  000F7E  0E01               	movlw	1
  2983  000F80  EC67  F007         	call	_lcd_gotoXY
  2984  000F84                     
  2985                           ;main.c: 145: lcd_putMessage(m_tabVue[2]);
  2986  000F84  0E2A               	movlw	low (_m_tabVue+42)
  2987  000F86  0100               	movlb	0	; force () banked
  2988  000F88  6F65               	movwf	lcd_putMessage@chaine& (0+255),b
  2989  000F8A  0E01               	movlw	high (_m_tabVue+42)
  2990  000F8C  6F66               	movwf	(lcd_putMessage@chaine+1)& (0+255),b
  2991  000F8E  ECF6  F008         	call	_lcd_putMessage	;wreg free
  2992                           
  2993                           ;main.c: 146: lcd_gotoXY(1, 4);
  2994  000F92  0E04               	movlw	4
  2995  000F94  0100               	movlb	0	; force () banked
  2996  000F96  6F63               	movwf	lcd_gotoXY@y& (0+255),b
  2997  000F98  0E01               	movlw	1
  2998  000F9A  EC67  F007         	call	_lcd_gotoXY
  2999  000F9E                     
  3000                           ;main.c: 147: lcd_putMessage(m_tabVue[3]);
  3001  000F9E  0E3F               	movlw	low (_m_tabVue+63)
  3002  000FA0  0100               	movlb	0	; force () banked
  3003  000FA2  6F65               	movwf	lcd_putMessage@chaine& (0+255),b
  3004  000FA4  0E01               	movlw	high (_m_tabVue+63)
  3005  000FA6  6F66               	movwf	(lcd_putMessage@chaine+1)& (0+255),b
  3006  000FA8  ECF6  F008         	call	_lcd_putMessage	;wreg free
  3007  000FAC  0012               	return		;funcret
  3008  000FAE                     __end_of_afficheTabVue:
  3009                           	opt callstack 0
  3010                           
  3011 ;; *************** function _lcd_putMessage *****************
  3012 ;; Defined at:
  3013 ;;		line 387 in file "Lcd4Lignes.c"
  3014 ;; Parameters:    Size  Location     Type
  3015 ;;  chaine          2    5[BANK0 ] PTR const unsigned char 
  3016 ;;		 -> m_tabVue(84), m_tabMines(84), main@afficheNom(21), 
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;  j               1    7[BANK0 ] unsigned char 
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3028 ;;      Params:         0       2       0       0       0       0       0
  3029 ;;      Locals:         0       1       0       0       0       0       0
  3030 ;;      Temps:          0       0       0       0       0       0       0
  3031 ;;      Totals:         0       3       0       0       0       0       0
  3032 ;;Total ram usage:        3 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:    4
  3035 ;; This function calls:
  3036 ;;		_lcd_ecritChar
  3037 ;; This function is called by:
  3038 ;;		_main
  3039 ;;		_afficheTabVue
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           	psect	text18
  3044  0011EC                     __ptext18:
  3045                           	opt callstack 0
  3046  0011EC                     _lcd_putMessage:
  3047                           	opt callstack 26
  3048  0011EC                     
  3049                           ;Lcd4Lignes.c: 389: unsigned char j;;Lcd4Lignes.c: 391: for(j = 0; chaine[j] != 0; j++)
  3050  0011EC  0E00               	movlw	0
  3051  0011EE  0100               	movlb	0	; force () banked
  3052  0011F0  6F67               	movwf	lcd_putMessage@j& (0+255),b
  3053  0011F2  EF0A  F009         	goto	l1796
  3054  0011F6                     l1792:
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;Lcd4Lignes.c: 392: lcd_ecritChar(chaine[j]);
  3058  0011F6  0100               	movlb	0	; force () banked
  3059  0011F8  5167               	movf	lcd_putMessage@j& (0+255),w,b
  3060  0011FA  0100               	movlb	0	; force () banked
  3061  0011FC  2565               	addwf	lcd_putMessage@chaine& (0+255),w,b
  3062  0011FE  6ED9               	movwf	fsr2l,c
  3063  001200  0100               	movlb	0	; force () banked
  3064  001202  0E00               	movlw	0
  3065  001204  0100               	movlb	0	; force () banked
  3066  001206  2166               	addwfc	(lcd_putMessage@chaine+1)& (0+255),w,b
  3067  001208  6EDA               	movwf	fsr2h,c
  3068  00120A  50DF               	movf	indf2,w,c
  3069  00120C  ECA3  F008         	call	_lcd_ecritChar
  3070  001210  0100               	movlb	0	; force () banked
  3071  001212  2B67               	incf	lcd_putMessage@j& (0+255),f,b
  3072  001214                     l1796:
  3073                           
  3074                           ; BSR set to: 0
  3075  001214  0100               	movlb	0	; force () banked
  3076  001216  5167               	movf	lcd_putMessage@j& (0+255),w,b
  3077  001218  0100               	movlb	0	; force () banked
  3078  00121A  2565               	addwf	lcd_putMessage@chaine& (0+255),w,b
  3079  00121C  6ED9               	movwf	fsr2l,c
  3080  00121E  0100               	movlb	0	; force () banked
  3081  001220  0E00               	movlw	0
  3082  001222  0100               	movlb	0	; force () banked
  3083  001224  2166               	addwfc	(lcd_putMessage@chaine+1)& (0+255),w,b
  3084  001226  6EDA               	movwf	fsr2h,c
  3085  001228  50DF               	movf	indf2,w,c
  3086  00122A  A4D8               	btfss	status,2,c
  3087  00122C  EF1A  F009         	goto	u541
  3088  001230  EF1C  F009         	goto	u540
  3089  001234                     u541:
  3090  001234  EFFB  F008         	goto	l1792
  3091  001238                     u540:
  3092  001238                     
  3093                           ; BSR set to: 0
  3094  001238  0012               	return		;funcret
  3095  00123A                     __end_of_lcd_putMessage:
  3096                           	opt callstack 0
  3097                           
  3098 ;; *************** function _lcd_ecritChar *****************
  3099 ;; Defined at:
  3100 ;;		line 359 in file "Lcd4Lignes.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;  car             1    wreg     unsigned char 
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;  car             1    3[BANK0 ] unsigned char 
  3105 ;;  posRam          1    4[BANK0 ] unsigned char 
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      void 
  3108 ;; Registers used:
  3109 ;;		wreg, status,2, status,0, cstack
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3115 ;;      Params:         0       0       0       0       0       0       0
  3116 ;;      Locals:         0       2       0       0       0       0       0
  3117 ;;      Temps:          0       0       0       0       0       0       0
  3118 ;;      Totals:         0       2       0       0       0       0       0
  3119 ;;Total ram usage:        2 bytes
  3120 ;; Hardware stack levels used:    1
  3121 ;; Hardware stack levels required when called:    3
  3122 ;; This function calls:
  3123 ;;		_lcd_wrCom
  3124 ;;		_lcd_wrData
  3125 ;; This function is called by:
  3126 ;;		_lcd_putMessage
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           	psect	text19
  3131  001146                     __ptext19:
  3132                           	opt callstack 0
  3133  001146                     _lcd_ecritChar:
  3134                           	opt callstack 26
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;incstack = 0
  3138                           ;lcd_ecritChar@car stored from wreg
  3139  001146  0100               	movlb	0	; force () banked
  3140  001148  6F63               	movwf	lcd_ecritChar@car& (0+255),b
  3141  00114A                     
  3142                           ;Lcd4Lignes.c: 361: unsigned char posRam;;Lcd4Lignes.c: 363: posRam = lcd_wrData(car);
  3143  00114A  0100               	movlb	0	; force () banked
  3144  00114C  5163               	movf	lcd_ecritChar@car& (0+255),w,b
  3145  00114E  EC84  F009         	call	_lcd_wrData
  3146  001152  0100               	movlb	0	; force () banked
  3147  001154  6F64               	movwf	lcd_ecritChar@posRam& (0+255),b
  3148                           
  3149                           ;Lcd4Lignes.c: 364: switch(posRam)
  3150  001156  EFBC  F008         	goto	l1758
  3151  00115A                     l1750:
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;Lcd4Lignes.c: 367: lcd_wrCom(0xC0|0x80);
  3155  00115A  0EC0               	movlw	192
  3156  00115C  EC0D  F008         	call	_lcd_wrCom
  3157                           
  3158                           ;Lcd4Lignes.c: 368: break;
  3159  001160  EFCC  F008         	goto	l219
  3160  001164                     l1752:
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;Lcd4Lignes.c: 370: lcd_wrCom(0x94|0x80);
  3164  001164  0E94               	movlw	148
  3165  001166  EC0D  F008         	call	_lcd_wrCom
  3166                           
  3167                           ;Lcd4Lignes.c: 371: break;
  3168  00116A  EFCC  F008         	goto	l219
  3169  00116E                     l1754:
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;Lcd4Lignes.c: 373: lcd_wrCom(0xD4|0x80);
  3173  00116E  0ED4               	movlw	212
  3174  001170  EC0D  F008         	call	_lcd_wrCom
  3175                           
  3176                           ;Lcd4Lignes.c: 374: break;
  3177  001174  EFCC  F008         	goto	l219
  3178  001178                     l1758:
  3179                           
  3180                           ; BSR set to: 0
  3181  001178  0100               	movlb	0	; force () banked
  3182  00117A  5164               	movf	lcd_ecritChar@posRam& (0+255),w,b
  3183                           
  3184                           ; Switch size 1, requested type "simple"
  3185                           ; Number of cases is 3, Range of values is 148 to 212
  3186                           ; switch strategies available:
  3187                           ; Name         Instructions Cycles
  3188                           ; simple_byte           10     6 (average)
  3189                           ;	Chosen strategy is simple_byte
  3190  00117C  0A94               	xorlw	148	; case 148
  3191  00117E  B4D8               	btfsc	status,2,c
  3192  001180  EFAD  F008         	goto	l1750
  3193  001184  0A54               	xorlw	84	; case 192
  3194  001186  B4D8               	btfsc	status,2,c
  3195  001188  EFB7  F008         	goto	l1754
  3196  00118C  0A14               	xorlw	20	; case 212
  3197  00118E  B4D8               	btfsc	status,2,c
  3198  001190  EFB2  F008         	goto	l1752
  3199  001194  EFCC  F008         	goto	l219
  3200  001198                     l219:
  3201  001198  0012               	return		;funcret
  3202  00119A                     __end_of_lcd_ecritChar:
  3203                           	opt callstack 0
  3204                           
  3205 ;; *************** function _lcd_wrData *****************
  3206 ;; Defined at:
  3207 ;;		line 188 in file "Lcd4Lignes.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;  caractere       1    wreg     unsigned char 
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  caractere       1    2[BANK0 ] unsigned char 
  3212 ;; Return value:  Size  Location     Type
  3213 ;;                  1    wreg      unsigned char 
  3214 ;; Registers used:
  3215 ;;		wreg, status,2, status,0, cstack
  3216 ;; Tracked objects:
  3217 ;;		On entry : 0/0
  3218 ;;		On exit  : 0/0
  3219 ;;		Unchanged: 0/0
  3220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3221 ;;      Params:         0       0       0       0       0       0       0
  3222 ;;      Locals:         0       1       0       0       0       0       0
  3223 ;;      Temps:          0       0       0       0       0       0       0
  3224 ;;      Totals:         0       1       0       0       0       0       0
  3225 ;;Total ram usage:        1 bytes
  3226 ;; Hardware stack levels used:    1
  3227 ;; Hardware stack levels required when called:    2
  3228 ;; This function calls:
  3229 ;;		_lcd_busy
  3230 ;;		_lcd_ecrireDonnees
  3231 ;;		_lcd_strobeEnableBit
  3232 ;; This function is called by:
  3233 ;;		_lcd_ecritChar
  3234 ;;		_lcd_initCGRam
  3235 ;;		_lcd_effaceChar
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text20
  3240  001308                     __ptext20:
  3241                           	opt callstack 0
  3242  001308                     _lcd_wrData:
  3243                           	opt callstack 26
  3244                           
  3245                           ;incstack = 0
  3246                           ;lcd_wrData@caractere stored from wreg
  3247  001308  0100               	movlb	0	; force () banked
  3248  00130A  6F62               	movwf	lcd_wrData@caractere& (0+255),b
  3249  00130C                     
  3250                           ;Lcd4Lignes.c: 190: lcd_busy();
  3251  00130C  EC43  F009         	call	_lcd_busy	;wreg free
  3252  001310                     
  3253                           ;Lcd4Lignes.c: 191: TRISD = 0b00000000;
  3254  001310  0E00               	movlw	0
  3255  001312  6E95               	movwf	149,c	;volatile
  3256  001314                     
  3257                           ;Lcd4Lignes.c: 194: PORTAbits.RA0 = 1;
  3258  001314  8080               	bsf	128,0,c	;volatile
  3259  001316                     
  3260                           ;Lcd4Lignes.c: 195: PORTAbits.RA1 = 0;
  3261  001316  9280               	bcf	128,1,c	;volatile
  3262  001318                     
  3263                           ;Lcd4Lignes.c: 197: lcd_ecrireDonnees(caractere >> 4);
  3264  001318  0100               	movlb	0	; force () banked
  3265  00131A  3962               	swapf	lcd_wrData@caractere& (0+255),w,b
  3266  00131C  0B0F               	andlw	15
  3267  00131E  ECD5  F009         	call	_lcd_ecrireDonnees
  3268  001322                     
  3269                           ;Lcd4Lignes.c: 198: lcd_strobeEnableBit();
  3270  001322  EC02  F00A         	call	_lcd_strobeEnableBit	;wreg free
  3271  001326                     
  3272                           ;Lcd4Lignes.c: 201: lcd_ecrireDonnees(caractere);
  3273  001326  0100               	movlb	0	; force () banked
  3274  001328  5162               	movf	lcd_wrData@caractere& (0+255),w,b
  3275  00132A  ECD5  F009         	call	_lcd_ecrireDonnees
  3276  00132E                     
  3277                           ;Lcd4Lignes.c: 202: lcd_strobeEnableBit();
  3278  00132E  EC02  F00A         	call	_lcd_strobeEnableBit	;wreg free
  3279  001332                     
  3280                           ;Lcd4Lignes.c: 205: TRISD = 0b00001111;
  3281  001332  0E0F               	movlw	15
  3282  001334  6E95               	movwf	149,c	;volatile
  3283  001336                     
  3284                           ;Lcd4Lignes.c: 206: _delay((unsigned long)((2)*(1000000/4000000.0)));
  3285                           ;Lcd4Lignes.c: 207: return(lcd_busy());
  3286  001336  EC43  F009         	call	_lcd_busy	;wreg free
  3287  00133A  0012               	return		;funcret
  3288  00133C                     __end_of_lcd_wrData:
  3289                           	opt callstack 0
  3290                           
  3291 ;; *************** function _lcd_gotoXY *****************
  3292 ;; Defined at:
  3293 ;;		line 314 in file "Lcd4Lignes.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;  x               1    wreg     unsigned char 
  3296 ;;  y               1    3[BANK0 ] unsigned char 
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;  x               1    4[BANK0 ] unsigned char 
  3299 ;; Return value:  Size  Location     Type
  3300 ;;                  1    wreg      void 
  3301 ;; Registers used:
  3302 ;;		wreg, status,2, status,0, cstack
  3303 ;; Tracked objects:
  3304 ;;		On entry : 0/0
  3305 ;;		On exit  : 0/0
  3306 ;;		Unchanged: 0/0
  3307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3308 ;;      Params:         0       1       0       0       0       0       0
  3309 ;;      Locals:         0       1       0       0       0       0       0
  3310 ;;      Temps:          0       0       0       0       0       0       0
  3311 ;;      Totals:         0       2       0       0       0       0       0
  3312 ;;Total ram usage:        2 bytes
  3313 ;; Hardware stack levels used:    1
  3314 ;; Hardware stack levels required when called:    3
  3315 ;; This function calls:
  3316 ;;		_lcd_wrCom
  3317 ;; This function is called by:
  3318 ;;		_main
  3319 ;;		_afficheTabVue
  3320 ;;		_lcd_effaceLigne
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           	psect	text21
  3325  000ECE                     __ptext21:
  3326                           	opt callstack 0
  3327  000ECE                     _lcd_gotoXY:
  3328                           	opt callstack 27
  3329                           
  3330                           ;incstack = 0
  3331                           ;lcd_gotoXY@x stored from wreg
  3332  000ECE  0100               	movlb	0	; force () banked
  3333  000ED0  6F64               	movwf	lcd_gotoXY@x& (0+255),b
  3334  000ED2                     
  3335                           ;Lcd4Lignes.c: 316: switch(y)
  3336  000ED2  EF8B  F007         	goto	l1788
  3337  000ED6                     l1778:
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;Lcd4Lignes.c: 319: lcd_wrCom((x-1+0x80)|0x80);
  3341  000ED6  0100               	movlb	0	; force () banked
  3342  000ED8  5164               	movf	lcd_gotoXY@x& (0+255),w,b
  3343  000EDA  0F7F               	addlw	127
  3344  000EDC  0980               	iorlw	128
  3345  000EDE  EC0D  F008         	call	_lcd_wrCom
  3346                           
  3347                           ;Lcd4Lignes.c: 320: break;
  3348  000EE2  EF9F  F007         	goto	l208
  3349  000EE6                     l1780:
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;Lcd4Lignes.c: 322: lcd_wrCom((x-1+0xC0)|0x80);
  3353  000EE6  0100               	movlb	0	; force () banked
  3354  000EE8  5164               	movf	lcd_gotoXY@x& (0+255),w,b
  3355  000EEA  0FBF               	addlw	191
  3356  000EEC  0980               	iorlw	128
  3357  000EEE  EC0D  F008         	call	_lcd_wrCom
  3358                           
  3359                           ;Lcd4Lignes.c: 323: break;
  3360  000EF2  EF9F  F007         	goto	l208
  3361  000EF6                     l1782:
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;Lcd4Lignes.c: 325: lcd_wrCom((x-1+0x94)|0x80);
  3365  000EF6  0100               	movlb	0	; force () banked
  3366  000EF8  5164               	movf	lcd_gotoXY@x& (0+255),w,b
  3367  000EFA  0F93               	addlw	147
  3368  000EFC  0980               	iorlw	128
  3369  000EFE  EC0D  F008         	call	_lcd_wrCom
  3370                           
  3371                           ;Lcd4Lignes.c: 326: break;
  3372  000F02  EF9F  F007         	goto	l208
  3373  000F06                     l1784:
  3374                           
  3375                           ; BSR set to: 0
  3376                           ;Lcd4Lignes.c: 328: lcd_wrCom((x-1+0xD4)|0x80);
  3377  000F06  0100               	movlb	0	; force () banked
  3378  000F08  5164               	movf	lcd_gotoXY@x& (0+255),w,b
  3379  000F0A  0FD3               	addlw	211
  3380  000F0C  0980               	iorlw	128
  3381  000F0E  EC0D  F008         	call	_lcd_wrCom
  3382                           
  3383                           ;Lcd4Lignes.c: 329: break;
  3384  000F12  EF9F  F007         	goto	l208
  3385  000F16                     l1788:
  3386  000F16  0100               	movlb	0	; force () banked
  3387  000F18  5163               	movf	lcd_gotoXY@y& (0+255),w,b
  3388                           
  3389                           ; Switch size 1, requested type "simple"
  3390                           ; Number of cases is 4, Range of values is 1 to 4
  3391                           ; switch strategies available:
  3392                           ; Name         Instructions Cycles
  3393                           ; simple_byte           13     7 (average)
  3394                           ;	Chosen strategy is simple_byte
  3395  000F1A  0A01               	xorlw	1	; case 1
  3396  000F1C  B4D8               	btfsc	status,2,c
  3397  000F1E  EF6B  F007         	goto	l1778
  3398  000F22  0A03               	xorlw	3	; case 2
  3399  000F24  B4D8               	btfsc	status,2,c
  3400  000F26  EF73  F007         	goto	l1780
  3401  000F2A  0A01               	xorlw	1	; case 3
  3402  000F2C  B4D8               	btfsc	status,2,c
  3403  000F2E  EF7B  F007         	goto	l1782
  3404  000F32  0A07               	xorlw	7	; case 4
  3405  000F34  B4D8               	btfsc	status,2,c
  3406  000F36  EF83  F007         	goto	l1784
  3407  000F3A  EF9F  F007         	goto	l208
  3408  000F3E                     l208:
  3409  000F3E  0012               	return		;funcret
  3410  000F40                     __end_of_lcd_gotoXY:
  3411                           	opt callstack 0
  3412                           
  3413 ;; *************** function _lcd_effaceAffichage *****************
  3414 ;; Defined at:
  3415 ;;		line 276 in file "Lcd4Lignes.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;		None
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;		None
  3420 ;; Return value:  Size  Location     Type
  3421 ;;                  1    wreg      void 
  3422 ;; Registers used:
  3423 ;;		wreg, status,2, status,0, cstack
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3429 ;;      Params:         0       0       0       0       0       0       0
  3430 ;;      Locals:         0       0       0       0       0       0       0
  3431 ;;      Temps:          0       0       0       0       0       0       0
  3432 ;;      Totals:         0       0       0       0       0       0       0
  3433 ;;Total ram usage:        0 bytes
  3434 ;; Hardware stack levels used:    1
  3435 ;; Hardware stack levels required when called:    3
  3436 ;; This function calls:
  3437 ;;		_lcd_wrCom
  3438 ;; This function is called by:
  3439 ;;		_main
  3440 ;;		_afficheTabVue
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           	psect	text22
  3445  0013EE                     __ptext22:
  3446                           	opt callstack 0
  3447  0013EE                     _lcd_effaceAffichage:
  3448                           	opt callstack 27
  3449  0013EE                     
  3450                           ;Lcd4Lignes.c: 278: lcd_wrCom(0x01);
  3451  0013EE  0E01               	movlw	1
  3452  0013F0  EC0D  F008         	call	_lcd_wrCom
  3453                           
  3454                           ;Lcd4Lignes.c: 279: lcd_wrCom(0x80);
  3455  0013F4  0E80               	movlw	128
  3456  0013F6  EC0D  F008         	call	_lcd_wrCom
  3457  0013FA  0012               	return		;funcret
  3458  0013FC                     __end_of_lcd_effaceAffichage:
  3459                           	opt callstack 0
  3460                           
  3461 ;; *************** function _lcd_wrCom *****************
  3462 ;; Defined at:
  3463 ;;		line 156 in file "Lcd4Lignes.c"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;  commande        1    wreg     unsigned char 
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  commande        1    2[BANK0 ] unsigned char 
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  1    wreg      unsigned char 
  3470 ;; Registers used:
  3471 ;;		wreg, status,2, status,0, cstack
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3477 ;;      Params:         0       0       0       0       0       0       0
  3478 ;;      Locals:         0       1       0       0       0       0       0
  3479 ;;      Temps:          0       0       0       0       0       0       0
  3480 ;;      Totals:         0       1       0       0       0       0       0
  3481 ;;Total ram usage:        1 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; Hardware stack levels required when called:    2
  3484 ;; This function calls:
  3485 ;;		_lcd_busy
  3486 ;;		_lcd_ecrireDonnees
  3487 ;;		_lcd_strobeEnableBit
  3488 ;; This function is called by:
  3489 ;;		_lcd_init
  3490 ;;		_lcd_effaceAffichage
  3491 ;;		_lcd_curseurHome
  3492 ;;		_lcd_gotoXY
  3493 ;;		_lcd_ecritChar
  3494 ;;		_lcd_initCGRam
  3495 ;;		_lcd_cacheCurseur
  3496 ;;		_lcd_montreCurseur
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text23
  3501  00101A                     __ptext23:
  3502                           	opt callstack 0
  3503  00101A                     _lcd_wrCom:
  3504                           	opt callstack 26
  3505                           
  3506                           ;incstack = 0
  3507                           ;lcd_wrCom@commande stored from wreg
  3508  00101A  0100               	movlb	0	; force () banked
  3509  00101C  6F62               	movwf	lcd_wrCom@commande& (0+255),b
  3510  00101E                     
  3511                           ;Lcd4Lignes.c: 158: lcd_busy();
  3512  00101E  EC43  F009         	call	_lcd_busy	;wreg free
  3513  001022                     
  3514                           ;Lcd4Lignes.c: 160: TRISD = 0b00000000;
  3515  001022  0E00               	movlw	0
  3516  001024  6E95               	movwf	149,c	;volatile
  3517  001026                     
  3518                           ;Lcd4Lignes.c: 163: PORTAbits.RA0 = 0;
  3519  001026  9080               	bcf	128,0,c	;volatile
  3520  001028                     
  3521                           ;Lcd4Lignes.c: 164: PORTAbits.RA1 = 0;
  3522  001028  9280               	bcf	128,1,c	;volatile
  3523  00102A                     
  3524                           ;Lcd4Lignes.c: 166: lcd_ecrireDonnees(commande >> 4);
  3525  00102A  0100               	movlb	0	; force () banked
  3526  00102C  3962               	swapf	lcd_wrCom@commande& (0+255),w,b
  3527  00102E  0B0F               	andlw	15
  3528  001030  ECD5  F009         	call	_lcd_ecrireDonnees
  3529  001034                     
  3530                           ;Lcd4Lignes.c: 167: lcd_strobeEnableBit();
  3531  001034  EC02  F00A         	call	_lcd_strobeEnableBit	;wreg free
  3532  001038                     
  3533                           ;Lcd4Lignes.c: 170: lcd_ecrireDonnees(commande);
  3534  001038  0100               	movlb	0	; force () banked
  3535  00103A  5162               	movf	lcd_wrCom@commande& (0+255),w,b
  3536  00103C  ECD5  F009         	call	_lcd_ecrireDonnees
  3537  001040                     
  3538                           ;Lcd4Lignes.c: 171: lcd_strobeEnableBit();
  3539  001040  EC02  F00A         	call	_lcd_strobeEnableBit	;wreg free
  3540  001044                     
  3541                           ;Lcd4Lignes.c: 172: _delay((unsigned long)((40)*(1000000/4000000.0)));
  3542  001044  0E03               	movlw	3
  3543  001046                     u977:
  3544  001046  2EE8               	decfsz	wreg,f,c
  3545  001048  D7FE               	bra	u977
  3546  00104A  F000               	nop	
  3547  00104C                     
  3548                           ;Lcd4Lignes.c: 174: if ((commande == 0x01) || commande == 0x02)
  3549  00104C  0100               	movlb	0	; force () banked
  3550  00104E  0562               	decf	lcd_wrCom@commande& (0+255),w,b
  3551  001050  B4D8               	btfsc	status,2,c
  3552  001052  EF2D  F008         	goto	u501
  3553  001056  EF2F  F008         	goto	u500
  3554  00105A                     u501:
  3555  00105A  EF39  F008         	goto	l1708
  3556  00105E                     u500:
  3557  00105E                     
  3558                           ; BSR set to: 0
  3559  00105E  0E02               	movlw	2
  3560  001060  0100               	movlb	0	; force () banked
  3561  001062  1962               	xorwf	lcd_wrCom@commande& (0+255),w,b
  3562  001064  A4D8               	btfss	status,2,c
  3563  001066  EF37  F008         	goto	u511
  3564  00106A  EF39  F008         	goto	u510
  3565  00106E                     u511:
  3566  00106E  EF3E  F008         	goto	l1710
  3567  001072                     u510:
  3568  001072                     l1708:
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;Lcd4Lignes.c: 175: _delay((unsigned long)((2)*(1000000/4000.0)));
  3572  001072  0EA6               	movlw	166
  3573  001074                     u987:
  3574  001074  2EE8               	decfsz	wreg,f,c
  3575  001076  D7FE               	bra	u987
  3576  001078  F000 F000          	nop2	
  3577  00107C                     l1710:
  3578                           
  3579                           ;Lcd4Lignes.c: 177: TRISD = 0b00001111;
  3580  00107C  0E0F               	movlw	15
  3581  00107E  6E95               	movwf	149,c	;volatile
  3582  001080                     
  3583                           ;Lcd4Lignes.c: 179: return(lcd_busy());
  3584  001080  EC43  F009         	call	_lcd_busy	;wreg free
  3585  001084  0012               	return		;funcret
  3586  001086                     __end_of_lcd_wrCom:
  3587                           	opt callstack 0
  3588                           
  3589 ;; *************** function _lcd_strobeEnableBit *****************
  3590 ;; Defined at:
  3591 ;;		line 431 in file "Lcd4Lignes.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;		None
  3594 ;; Auto vars:     Size  Location     Type
  3595 ;;		None
  3596 ;; Return value:  Size  Location     Type
  3597 ;;                  1    wreg      void 
  3598 ;; Registers used:
  3599 ;;		None
  3600 ;; Tracked objects:
  3601 ;;		On entry : 0/0
  3602 ;;		On exit  : 0/0
  3603 ;;		Unchanged: 0/0
  3604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3605 ;;      Params:         0       0       0       0       0       0       0
  3606 ;;      Locals:         0       0       0       0       0       0       0
  3607 ;;      Temps:          0       0       0       0       0       0       0
  3608 ;;      Totals:         0       0       0       0       0       0       0
  3609 ;;Total ram usage:        0 bytes
  3610 ;; Hardware stack levels used:    1
  3611 ;; This function calls:
  3612 ;;		Nothing
  3613 ;; This function is called by:
  3614 ;;		_lcd_wrCom
  3615 ;;		_lcd_wrData
  3616 ;;		_lcd_resetSequence
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           	psect	text24
  3621  001404                     __ptext24:
  3622                           	opt callstack 0
  3623  001404                     _lcd_strobeEnableBit:
  3624                           	opt callstack 27
  3625  001404                     
  3626                           ;Lcd4Lignes.c: 433: PORTAbits.RA2 = 1;
  3627  001404  8480               	bsf	128,2,c	;volatile
  3628                           
  3629                           ;Lcd4Lignes.c: 434: __nop();
  3630  001406  F000               	nop	
  3631                           
  3632                           ;Lcd4Lignes.c: 435: PORTAbits.RA2 = 0;
  3633  001408  9480               	bcf	128,2,c	;volatile
  3634  00140A  0012               	return		;funcret
  3635  00140C                     __end_of_lcd_strobeEnableBit:
  3636                           	opt callstack 0
  3637                           
  3638 ;; *************** function _lcd_ecrireDonnees *****************
  3639 ;; Defined at:
  3640 ;;		line 107 in file "Lcd4Lignes.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;  donnee          1    wreg     unsigned char 
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;  donnee          1    1[BANK0 ] unsigned char 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  1    wreg      void 
  3647 ;; Registers used:
  3648 ;;		wreg, status,2, status,0
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3654 ;;      Params:         0       0       0       0       0       0       0
  3655 ;;      Locals:         0       1       0       0       0       0       0
  3656 ;;      Temps:          0       1       0       0       0       0       0
  3657 ;;      Totals:         0       2       0       0       0       0       0
  3658 ;;Total ram usage:        2 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; This function calls:
  3661 ;;		Nothing
  3662 ;; This function is called by:
  3663 ;;		_lcd_wrCom
  3664 ;;		_lcd_wrData
  3665 ;;		_lcd_resetSequence
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           	psect	text25
  3670  0013AA                     __ptext25:
  3671                           	opt callstack 0
  3672  0013AA                     _lcd_ecrireDonnees:
  3673                           	opt callstack 27
  3674                           
  3675                           ;incstack = 0
  3676                           ;lcd_ecrireDonnees@donnee stored from wreg
  3677  0013AA  0100               	movlb	0	; force () banked
  3678  0013AC  6F61               	movwf	lcd_ecrireDonnees@donnee& (0+255),b
  3679  0013AE                     
  3680                           ;Lcd4Lignes.c: 110: PORTD = (donnee & 0x0F) | (PORTD & 0xF0);
  3681  0013AE  CF83 F060          	movff	3971,??_lcd_ecrireDonnees	;volatile
  3682  0013B2  0EF0               	movlw	240
  3683  0013B4  0100               	movlb	0	; force () banked
  3684  0013B6  1760               	andwf	??_lcd_ecrireDonnees& (0+255),f,b
  3685  0013B8  0100               	movlb	0	; force () banked
  3686  0013BA  5161               	movf	lcd_ecrireDonnees@donnee& (0+255),w,b
  3687  0013BC  0B0F               	andlw	15
  3688  0013BE  0100               	movlb	0	; force () banked
  3689  0013C0  1160               	iorwf	??_lcd_ecrireDonnees& (0+255),w,b
  3690  0013C2  6E83               	movwf	131,c	;volatile
  3691  0013C4                     
  3692                           ; BSR set to: 0
  3693  0013C4  0012               	return		;funcret
  3694  0013C6                     __end_of_lcd_ecrireDonnees:
  3695                           	opt callstack 0
  3696                           
  3697 ;; *************** function _lcd_busy *****************
  3698 ;; Defined at:
  3699 ;;		line 124 in file "Lcd4Lignes.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;		None
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;  adresse         1    1[BANK0 ] unsigned char 
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  1    wreg      unsigned char 
  3706 ;; Registers used:
  3707 ;;		wreg, status,2, status,0, cstack
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3713 ;;      Params:         0       0       0       0       0       0       0
  3714 ;;      Locals:         0       1       0       0       0       0       0
  3715 ;;      Temps:          0       1       0       0       0       0       0
  3716 ;;      Totals:         0       2       0       0       0       0       0
  3717 ;;Total ram usage:        2 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    1
  3720 ;; This function calls:
  3721 ;;		_lcd_lireDonnees
  3722 ;; This function is called by:
  3723 ;;		_lcd_wrCom
  3724 ;;		_lcd_wrData
  3725 ;; This function uses a non-reentrant model
  3726 ;;
  3727                           
  3728                           	psect	text26
  3729  001286                     __ptext26:
  3730                           	opt callstack 0
  3731  001286                     _lcd_busy:
  3732                           	opt callstack 26
  3733  001286                     
  3734                           ;Lcd4Lignes.c: 126: unsigned char adresse;;Lcd4Lignes.c: 128: PORTAbits.RA0 = 0;
  3735  001286  9080               	bcf	128,0,c	;volatile
  3736                           
  3737                           ;Lcd4Lignes.c: 129: PORTAbits.RA1 = 1;
  3738  001288  8280               	bsf	128,1,c	;volatile
  3739  00128A                     l170:
  3740                           
  3741                           ;Lcd4Lignes.c: 132: {;Lcd4Lignes.c: 133: PORTAbits.RA2 = 1;
  3742  00128A  8480               	bsf	128,2,c	;volatile
  3743                           
  3744                           ;Lcd4Lignes.c: 134: __nop();
  3745  00128C  F000               	nop	
  3746  00128E                     
  3747                           ;Lcd4Lignes.c: 135: adresse = lcd_lireDonnees() << 4;
  3748  00128E  EC06  F00A         	call	_lcd_lireDonnees	;wreg free
  3749  001292  0100               	movlb	0	; force () banked
  3750  001294  6F60               	movwf	??_lcd_busy& (0+255),b
  3751  001296  3960               	swapf	??_lcd_busy& (0+255),w,b
  3752  001298  0BF0               	andlw	240
  3753  00129A  0100               	movlb	0	; force () banked
  3754  00129C  6F61               	movwf	lcd_busy@adresse& (0+255),b
  3755  00129E                     
  3756                           ; BSR set to: 0
  3757                           ;Lcd4Lignes.c: 136: PORTAbits.RA2 = 0;
  3758  00129E  9480               	bcf	128,2,c	;volatile
  3759  0012A0                     
  3760                           ;Lcd4Lignes.c: 138: PORTAbits.RA2 = 1;
  3761  0012A0  8480               	bsf	128,2,c	;volatile
  3762  0012A2                     
  3763                           ;Lcd4Lignes.c: 139: __nop();
  3764  0012A2  F000               	nop	
  3765                           
  3766                           ;Lcd4Lignes.c: 140: adresse |= lcd_lireDonnees();
  3767  0012A4  EC06  F00A         	call	_lcd_lireDonnees	;wreg free
  3768  0012A8  0100               	movlb	0	; force () banked
  3769  0012AA  1361               	iorwf	lcd_busy@adresse& (0+255),f,b
  3770  0012AC                     
  3771                           ; BSR set to: 0
  3772                           ;Lcd4Lignes.c: 141: PORTAbits.RA2 = 0;
  3773  0012AC  9480               	bcf	128,2,c	;volatile
  3774  0012AE                     
  3775                           ;Lcd4Lignes.c: 143: };Lcd4Lignes.c: 144: while(adresse&0x80);
  3776  0012AE  0100               	movlb	0	; force () banked
  3777  0012B0  BF61               	btfsc	lcd_busy@adresse& (0+255),7,b
  3778  0012B2  EF5D  F009         	goto	u491
  3779  0012B6  EF5F  F009         	goto	u490
  3780  0012BA                     u491:
  3781  0012BA  EF45  F009         	goto	l170
  3782  0012BE                     u490:
  3783  0012BE                     
  3784                           ; BSR set to: 0
  3785                           ;Lcd4Lignes.c: 146: PORTAbits.RA1 = 0;
  3786  0012BE  9280               	bcf	128,1,c	;volatile
  3787  0012C0                     
  3788                           ; BSR set to: 0
  3789                           ;Lcd4Lignes.c: 147: return(adresse&0x7f);
  3790  0012C0  0100               	movlb	0	; force () banked
  3791  0012C2  5161               	movf	lcd_busy@adresse& (0+255),w,b
  3792  0012C4  0B7F               	andlw	127
  3793  0012C6                     
  3794                           ; BSR set to: 0
  3795  0012C6  0012               	return		;funcret
  3796  0012C8                     __end_of_lcd_busy:
  3797                           	opt callstack 0
  3798                           
  3799 ;; *************** function _lcd_lireDonnees *****************
  3800 ;; Defined at:
  3801 ;;		line 93 in file "Lcd4Lignes.c"
  3802 ;; Parameters:    Size  Location     Type
  3803 ;;		None
  3804 ;; Auto vars:     Size  Location     Type
  3805 ;;		None
  3806 ;; Return value:  Size  Location     Type
  3807 ;;                  1    wreg      unsigned char 
  3808 ;; Registers used:
  3809 ;;		wreg, status,2, status,0
  3810 ;; Tracked objects:
  3811 ;;		On entry : 0/0
  3812 ;;		On exit  : 0/0
  3813 ;;		Unchanged: 0/0
  3814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3815 ;;      Params:         0       0       0       0       0       0       0
  3816 ;;      Locals:         0       0       0       0       0       0       0
  3817 ;;      Temps:          0       0       0       0       0       0       0
  3818 ;;      Totals:         0       0       0       0       0       0       0
  3819 ;;Total ram usage:        0 bytes
  3820 ;; Hardware stack levels used:    1
  3821 ;; This function calls:
  3822 ;;		Nothing
  3823 ;; This function is called by:
  3824 ;;		_lcd_busy
  3825 ;; This function uses a non-reentrant model
  3826 ;;
  3827                           
  3828                           	psect	text27
  3829  00140C                     __ptext27:
  3830                           	opt callstack 0
  3831  00140C                     _lcd_lireDonnees:
  3832                           	opt callstack 26
  3833  00140C                     
  3834                           ;Lcd4Lignes.c: 96: return (PORTD & 0x0f);
  3835  00140C  5083               	movf	131,w,c	;volatile
  3836  00140E  0B0F               	andlw	15
  3837  001410  0012               	return		;funcret
  3838  001412                     __end_of_lcd_lireDonnees:
  3839                           	opt callstack 0
  3840                           
  3841                           	psect	param0
  3842  0000                     tosu	equ	0xFFF
  3843                           tosh	equ	0xFFE
  3844                           tosl	equ	0xFFD
  3845                           stkptr	equ	0xFFC
  3846                           pclatu	equ	0xFFB
  3847                           pclath	equ	0xFFA
  3848                           pcl	equ	0xFF9
  3849                           tblptru	equ	0xFF8
  3850                           tblptrh	equ	0xFF7
  3851                           tblptrl	equ	0xFF6
  3852                           tablat	equ	0xFF5
  3853                           prodh	equ	0xFF4
  3854                           prodl	equ	0xFF3
  3855                           indf0	equ	0xFEF
  3856                           postinc0	equ	0xFEE
  3857                           postdec0	equ	0xFED
  3858                           preinc0	equ	0xFEC
  3859                           plusw0	equ	0xFEB
  3860                           fsr0h	equ	0xFEA
  3861                           fsr0l	equ	0xFE9
  3862                           wreg	equ	0xFE8
  3863                           indf1	equ	0xFE7
  3864                           postinc1	equ	0xFE6
  3865                           postdec1	equ	0xFE5
  3866                           preinc1	equ	0xFE4
  3867                           plusw1	equ	0xFE3
  3868                           fsr1h	equ	0xFE2
  3869                           fsr1l	equ	0xFE1
  3870                           bsr	equ	0xFE0
  3871                           indf2	equ	0xFDF
  3872                           postinc2	equ	0xFDE
  3873                           postdec2	equ	0xFDD
  3874                           preinc2	equ	0xFDC
  3875                           plusw2	equ	0xFDB
  3876                           fsr2h	equ	0xFDA
  3877                           fsr2l	equ	0xFD9
  3878                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    21
    Data        68
    BSS         168
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      0       0
    BANK0           160    143     147
    BANK1           256      0     232
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    lcd_putMessage@chaine	PTR const unsigned char  size(2) Largest target is 84
		 -> m_tabVue(BANK1[84]), m_tabMines(BANK1[84]), main@afficheNom(BANK0[21]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_rempliMines
    _rempliMines->___awmod
    _rand->___lmul
    ___awmod->_rand
    _metToucheCombien->_calculToucheCombien
    _calculToucheCombien->___wmul
    _lcd_init->_lcd_initCGRam
    _lcd_resetSequence->_lcd_ecrireDonnees
    _lcd_initCGRam->_lcd_wrCom
    _lcd_initCGRam->_lcd_wrData
    _lcd_curseurHome->_lcd_wrCom
    _initialisation->_srand
    _initTabVue->___wmul
    _afficheTabVue->_lcd_putMessage
    _lcd_putMessage->_lcd_ecritChar
    _lcd_ecritChar->_lcd_wrCom
    _lcd_ecritChar->_lcd_wrData
    _lcd_wrData->_lcd_busy
    _lcd_wrData->_lcd_ecrireDonnees
    _lcd_gotoXY->_lcd_wrCom
    _lcd_effaceAffichage->_lcd_wrCom
    _lcd_wrCom->_lcd_busy
    _lcd_wrCom->_lcd_ecrireDonnees

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0   12390
                                            113 BANK0     30    30      0
                      _afficheTabVue
                         _initTabVue
                         _init_serie
                     _initialisation
                _lcd_effaceAffichage
                         _lcd_gotoXY
                           _lcd_init
                     _lcd_putMessage
                   _metToucheCombien
                        _rempliMines
                           _testEtat
 ---------------------------------------------------------------------------------
 (1) _testEtat                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rempliMines                                         93    91      2    2427
                                             20 BANK0     93    91      2
                            ___awmod
                             ___wmul
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 2     0      2     370
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     370
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                             14 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _metToucheCombien                                     8     8      0    3012
                                             22 BANK0      8     8      0
                             ___wmul
                _calculToucheCombien
 ---------------------------------------------------------------------------------
 (2) _calculToucheCombien                                 16    12      4    1619
                                              6 BANK0     16    12      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     738
                      _lcd_initCGRam
                  _lcd_resetSequence
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (2) _lcd_resetSequence                                    1     1      0      22
                                              2 BANK0      1     1      0
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (2) _lcd_initCGRam                                        4     4      0     560
                                              3 BANK0      4     4      0
                    _lcd_curseurHome
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (3) _lcd_curseurHome                                      0     0      0     156
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (1) _initialisation                                       0     0      0      98
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _init_serie                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTabVue                                           6     6      0    1259
                                              6 BANK0      6     6      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1123
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _afficheTabVue                                        0     0      0    2345
                _lcd_effaceAffichage
                         _lcd_gotoXY
                     _lcd_putMessage
 ---------------------------------------------------------------------------------
 (1) _lcd_putMessage                                       3     1      2    1087
                                              5 BANK0      3     1      2
                      _lcd_ecritChar
 ---------------------------------------------------------------------------------
 (2) _lcd_ecritChar                                        2     2      0     313
                                              3 BANK0      2     2      0
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (3) _lcd_wrData                                           1     1      0     112
                                              2 BANK0      1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoXY                                           2     1      1    1102
                                              3 BANK0      2     1      1
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (1) _lcd_effaceAffichage                                  0     0      0     156
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (3) _lcd_wrCom                                            1     1      0     156
                                              2 BANK0      1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (4) _lcd_strobeEnableBit                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _lcd_ecrireDonnees                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _lcd_busy                                             2     2      0      46
                                              0 BANK0      2     2      0
                    _lcd_lireDonnees
 ---------------------------------------------------------------------------------
 (5) _lcd_lireDonnees                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _afficheTabVue
     _lcd_effaceAffichage
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_gotoXY
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_putMessage
       _lcd_ecritChar
         _lcd_wrCom
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
         _lcd_wrData
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
   _initTabVue
     ___wmul
   _init_serie
   _initialisation
     _srand
   _lcd_effaceAffichage
     _lcd_wrCom
       _lcd_busy
         _lcd_lireDonnees
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
   _lcd_gotoXY
     _lcd_wrCom
       _lcd_busy
         _lcd_lireDonnees
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
   _lcd_init
     _lcd_initCGRam
       _lcd_curseurHome
         _lcd_wrCom
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
       _lcd_wrData
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_resetSequence
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
     _lcd_wrCom
       _lcd_busy
         _lcd_lireDonnees
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
   _lcd_putMessage
     _lcd_ecritChar
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
       _lcd_wrData
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
   _metToucheCombien
     ___wmul
     _calculToucheCombien
       ___wmul
   _rempliMines
     ___awmod
       _rand (ARG)
         ___lmul
     ___wmul
     _rand
       ___lmul
   _testEtat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      E8       6       90.6%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     8F      93       4       91.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      0       0       1        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     17B      14        0.0%
DATA                 0      0     17B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Nov 29 16:49:03 2019

 __end_of_calculToucheCombien 09FA                            l72 0C72                            l85 0D78  
                          l78 0FAC                            l97 085E           ___wmul@multiplicand 0062  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000  __size_of_lcd_strobeEnableBit 0008                           l113 08E6  
                         l105 0B6C                           l116 0988                           l302 1008  
                         l119 09F8                           l303 1018                           l135 13DC  
                         l208 0F3E                           l241 140A                           l225 1238  
                         l145 1284                           l170 128A                           l171 12BE  
                         l219 1198                           l164 1410                           l172 12C6  
                         l181 133A                           l190 13FA                           l238 0ECC  
                         l167 13C4                           l264 13A8                           l184 10EE  
                         l193 1402                           l178 1084                           l291 138A  
                         l187 1362                           l535 0E2A                           l955 13EC  
                         l958 1144                  __CFG_CPB$OFF 000000                           u500 105E  
                         u501 105A                           u510 1072                           u511 106E  
                         u600 09BE                           u520 0FCE                           u601 09BA  
                         u521 0FCA                           u610 09F4                           u530 1008  
                __CFG_CPD$OFF 000000                           u611 09F0                           u531 1004  
                         u540 1238                           u620 0E4A                           u700 0DF6  
                         u541 1234                           u621 0E46                           u701 0DF2  
                         u630 0E66                           u550 088E                           u710 0E1A  
                         u631 0E62                           u551 088A                           u711 0E16  
                         u640 0EB2                           u560 08A8                           u800 0754  
                         u720 13D4                           u641 0EAE                           u561 08A4  
                         u801 0750                           u721 13D0                           u490 12BE  
                         u730 0CB8                           u650 0EC8                           u570 08C0  
                         u810 07D0                           u491 12BA                           u731 0CB4  
                         u651 0EC4                           u571 08BC                           u811 07CC  
                         u740 0CE4                           u580 08DA                           u660 0D8E  
                         u820 085E                           u900 0B80                           u741 0CE0  
                         u581 08D6                           u661 0D8A                           u821 085A  
                         u750 0D54                           u590 0984                           u830 0A28  
                         u670 0DA8                           u751 0D50                           u591 0980  
                         u831 0A24                           u671 0DA4                           u760 0D78  
                         u840 0A54                           u680 0DC2                           u761 0D74  
                         u841 0A50                           u681 0DBE                           u850 0A82  
                         u690 0DE0                           u770 064C                           u851 0A7E  
                         u691 0DDC                           u771 0648                           u860 0AD8  
                         u780 0678                           u861 0AD4                           u781 0674  
                         u917 0C7E                           u870 0B48                           u790 0730  
                         u927 1092                           u871 0B44                           u791 072C  
                         u880 0B6C                           u937 10AE                           u881 0B68  
                         u947 10C0                           u957 10D2                           u967 10E4  
                         u977 1046                           u987 1074                  __CFG_BORV$18 000000  
                ___awmod@sign 0073                   lcd_gotoXY@x 0064                           wreg 000FE8  
                 lcd_gotoXY@y 0063  __size_of_lcd_effaceAffichage 000E                   main@nbMines 00EB  
                __CFG_LVP$OFF 000000                          l2000 13A2                          l2010 13DA  
                        l2002 13C6                          l2100 0F50                          l2020 0CBC  
                        l2004 13D4                          l2102 0F5E                          l2030 0D36  
                        l2022 0CC6                          l2014 0C90                          l2104 0F78  
                        l2032 0D54                          l2016 0C9A                          l2120 0B8A  
                        l2106 0F84                          l2034 0D5A                          l2026 0CE8  
                        l2050 070C                          l2042 0650                          l2130 0BB4  
                        l2122 0B94                          l2108 0F9E                          l2028 0D30  
                        l2060 0762                          l2052 0712                          l2044 065A  
                        l2036 0618                          l2140 0BDA                          l2132 0BB8  
                        l2124 0B9E                          l2070 09FA                          l2062 0792  
                        l2054 0730                          l2038 062E                          l2150 0BFA  
                        l2142 0BE2                          l2134 0BBC                          l2126 0BA4  
                        l2118 0B6E                          l2072 0A0A                          l2064 07D0  
                        l2056 0736                          l2048 067C                          l2160 0C32  
                        l2152 0BFE                          l2144 0BE6                          l2136 0BC0  
                        l2128 0BAA                          l2090 0B24                          l2082 0A58  
                        l2066 0830                          l2058 0754                          l2170 0C6A  
                        l2162 0C3E                          l2154 0C0A                          l2146 0BEA  
                        l2138 0BCC                          l1700 1040                          l2092 0B2A  
                        l2084 0A70                          l2076 0A2C                          l2068 0836  
                        l2164 0C4C                          l2156 0C18                          l2148 0BF6  
                        l1710 107C                          l1702 1044                          l2086 0A82  
                        l2094 0B48                          l2078 0A36                          l2166 0C58  
                        l2158 0C24                          l1712 1080                          l1704 104C  
                        l1720 1310                          l2096 0B4E                          l2088 0AD8  
                        l1800 10F0                          l2176 0C76                          l2168 0C66  
                        l1714 1080                          l1706 105E                          l1730 1322  
                        l1722 1314                          l2098 0F40                          l1810 0866  
                        l1802 1126                          l1652 140C                          l1660 128E  
                        l1708 1072                          l1740 1332                          l1732 1326  
                        l1724 1314                          l1900 0EA0                          l1820 08A8  
                        l1812 0870                          l1804 1138                          l1670 12AC  
                        l1662 129E                          l1742 1336                          l1734 1326  
                        l1726 1316                          l1718 130C                          l1750 115A  
                        l1902 0EB2                          l1830 08DE                          l1822 08AC  
                        l1814 087A                          l1910 0D80                          l1672 12AE  
                        l1664 12A0                          l1656 13AE                          l1680 1404  
                        l1736 132E                          l1728 1318                          l1752 1164  
                        l1760 1364                          l1904 0EB6                          l1832 08EE  
                        l1840 09C2                          l1824 08C0                          l1816 088E  
                        l1808 0860                          l1920 0DB0                          l1912 0D8E  
                        l1674 12AE                          l1666 12A0                          l1658 1286  
                        l1690 1028                          l1682 101E                          l1738 1332  
                        l1754 116E                          l1762 1382                          l1746 13FC  
                        l1906 0EC8                          l1850 108A                          l1842 09F4  
                        l1834 0984                          l1826 08C4                          l1818 0892  
                        l1930 0DF6                          l1922 0DC2                          l1914 0D96  
                        l1770 0FCE                          l1676 12C0                          l1668 12A2  
                        l1692 102A                          l1684 1022                          l1780 0EE6  
                        l1748 114A                          l1860 10AC                          l1852 109E  
                        l1836 098C                          l1828 08DA                          l1940 0E22  
                        l1932 0DFE                          l1924 0DCA                          l1916 0D9A  
                        l1908 0D7A                          l1772 0FDE                          l1694 1034  
                        l1686 1026                          l1782 0EF6                          l1758 1178  
                        l1790 11EC                          l1846 13DE                          l1950 124E  
                        l1870 10CC                          l1862 10B4                          l1854 10A0  
                        l1838 09BE                          l1934 0E04                          l1926 0DD2  
                        l1918 0DA8                          l1774 0FE8                          l1766 0FAE  
                        l1696 1038                          l1688 1026                          l1784 0F06  
                        l1776 0ED2                          l1792 11F6                          l1960 1264  
                        l1952 125A                          l1944 123A                          l1880 10EA  
                        l1872 10D0                          l1864 10BA                          l1856 10A2  
                        l1848 1086                          l1928 0DE0                          l1936 0E0A  
                        l1768 0FC0                          l1698 1038                          l1778 0ED6  
                        l1794 1210                          l1970 1272                          l1962 1268  
                        l1954 125C                          l1946 1242                          l1890 0E4E  
                        l1882 0E2C                          l1874 10D8                          l1866 10BE  
                        l1858 10A8                          l1938 0E1A                          l1788 0F16  
                        l1796 1214                          l1980 1282                          l1972 1274  
                        l1964 126C                          l1956 125E                          l1948 124C  
                        l1892 0E54                          l1884 0E32                          l1876 10DE  
                        l1868 10C6                          l1798 13EE                          l1990 1398  
                        l1974 127C                          l1966 126E                          l1958 1262  
                        l1886 0E38                          l1878 10E2                          l1982 133C  
                        l1992 139A                          l1976 127E                          l1968 1270  
                        l1896 0E6A                          l1984 135E                          l1994 139C  
                        l1986 138C                          l1978 1280                          l1898 0E9C  
                        l1996 139E                          l1988 1390                          l1998 13A0  
                        _RCIF 007CF5                          _TMR1 000FCE              ??_initialisation 0062  
                        _main 0B6E                          _rand 10F0                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          prodh 000FF4  
                        prodl 000FF3                          start 0000               ?_lcd_putMessage 0065  
               __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
             ??_lcd_ecritChar 0063                         ?_main 0060                         ?_rand 006C  
             __end_of___awmod 0E2C                         _ANSEL 000F7E                         _RCREG 000FAE  
                       _SPBRG 000FAF                         _PORTD 000F83                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISD 000F95                         _TXREG 000FAD  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000           ___lmul@multiplicand 0064                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
             ??_lcd_initCGRam 0063                         _randx 00EF                         _srand 13DE  
                       tablat 000FF5                         status 000FD8                __CFG_HFOFST$ON 000000  
              __CFG_PBADEN$ON 000000              _metToucheCombien 09FA               __initialization 119A  
                __end_of_main 0C90                  __end_of_rand 1146          lcd_putMessage@chaine 0065  
  calculToucheCombien@colonne 0068                        ??_main 00D1                        ??_rand 006E  
               __activetblptr 000003                        _ADCON1 000FC1                        _ADRESH 000FC4  
                      ?_srand 0060                        _ANSELH 000F7F                   initTabVue@i 0068  
                 initTabVue@k 006A                __CFG_WDTEN$OFF 000000                  ?_rempliMines 0074  
                      _SPBRGH 000FB0                __CFG_XINST$OFF 000000                lcd_initCGRam@i 0065  
              lcd_initCGRam@j 0066              __end_of_lcd_busy 12C8              __end_of_lcd_init 1364  
                      ___lmul 0FAE                        ___wmul 1364                __CFG_STVREN$ON 000000  
                   ??___awmod 0072                        clear_0 11E0               ___awmod@divisor 0070  
             ___awmod@counter 0072              __end_of_testEtat 13DE                  __mediumconst 0000  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                      srand@x 0060        __size_of_afficheTabVue 006E             _lcd_resetSequence 1086  
                  __accesstop 0060       __end_of__initialization 11E6           _lcd_strobeEnableBit 1404  
          ?_lcd_resetSequence 0060                 ___rparam_used 000000                main@afficheNom 00D2  
         _lcd_effaceAffichage 13EE                  __pidataBANK0 1412                  __pidataBANK1 12C8  
         ??_lcd_resetSequence 0062                 __end_of_srand 13EE     calculToucheCombien@maxCol 0073  
   calculToucheCombien@minCol 0072          ?_lcd_strobeEnableBit 0060     calculToucheCombien@nombre 006F  
 calculToucheCombien@maxLigne 0071          ?_lcd_effaceAffichage 0060            __size_of_lcd_wrCom 006C  
 calculToucheCombien@minLigne 0070     __end_of_lcd_resetSequence 10F0                       ??_srand 0062  
    __size_of_lcd_lireDonnees 0006             _lcd_ecrireDonnees 13AA                    __pbssBANK1 0100  
            ??_lcd_putMessage 0067            ?_lcd_ecrireDonnees 0060      __size_of_lcd_curseurHome 0008  
         ??_lcd_ecrireDonnees 0060                       ?___lmul 0060                       ?___wmul 0060  
               _afficheTabVue 0F40                main@etatInitSW 00EE                ___lmul@product 0068  
       ??_lcd_strobeEnableBit 0060  __size_of_calculToucheCombien 019A      __end_of_metToucheCombien 0B6E  
                  _lcd_gotoXY 0ECE         ??_lcd_effaceAffichage 0063                    _lcd_wrData 1308  
   __end_of_lcd_ecrireDonnees 13C6                     ?_lcd_busy 0060                     ?_lcd_init 0060  
     lcd_ecrireDonnees@donnee 0061                    _m_tabMines 0154          __size_of_rempliMines 0248  
                     __Hparam 0000                       __Lparam 0000                     ?_testEtat 0060  
                  _initTabVue 0C90             __end_of_lcd_wrCom 1086                ?_afficheTabVue 0060  
             __size_of___lmul 006C                       ___awmod 0D7A               __size_of___wmul 0028  
          rempliMines@tabSafe 0079                  __psmallconst 0600                       __pcinit 119A  
                  _init_serie 138C                     _ANSELbits 000F7E                       __ramtop 0600  
                     __ptext0 0B6E                       __ptext1 13C6                       __ptext2 0618  
                     __ptext3 10F0                       __ptext4 0FAE                       __ptext5 0D7A  
                     __ptext6 09FA                       __ptext7 0860                       __ptext8 133C  
                     __ptext9 1086         __end_of_lcd_ecritChar 119A                     _T0CONbits 000FD5  
             lcd_busy@adresse 0061                     _T1CONbits 000FCD              ___awmod@dividend 006E  
            lcd_ecritChar@car 0063                    ??_lcd_busy 0060                    ??_lcd_init 0067  
  __size_of_lcd_resetSequence 006A          end_of_initialization 11E6         __end_of_lcd_initCGRam 0ECE  
           __end_ofmain@F2873 0616             ??_lcd_lireDonnees 0060                    ??_testEtat 0060  
                   _RCSTAbits 000FAB                       postdec1 000FE5                       postinc0 000FEE  
                     postinc2 000FDE       __size_of_initialisation 004C             ??_lcd_curseurHome 0063  
         lcd_ecritChar@posRam 0064                     _PORTAbits 000F80                     _PORTBbits 000F81  
                 ?_lcd_gotoXY 0063                     _TRISCbits 000F94                   ?_lcd_wrData 0060  
  __size_of_lcd_ecrireDonnees 001C                     _TXSTAbits 000FAC               ??_afficheTabVue 0068  
                 ?_initTabVue 0060                __end_of___lmul 101A                __end_of___wmul 138C  
                 _BAUDCONbits 000FB8                   ?_init_serie 0060           start_initialization 119A  
         _calculToucheCombien 0860           __size_of_lcd_gotoXY 0072                      ??___lmul 0068  
                    ??___wmul 0064                 rempliMines@nb 0074           __size_of_lcd_wrData 0034  
                 __pdataBANK0 00EF                   __pdataBANK1 01A8              __CFG_LPT1OSC$OFF 000000  
        ?_calculToucheCombien 0066                 __pcstackBANK0 0060             ?_metToucheCombien 0060  
         __size_of_initTabVue 00EA            ??_metToucheCombien 0076             __size_of_lcd_busy 0042  
           __size_of_lcd_init 0028           __size_of_init_serie 001E             __CFG_CCP2MX$PORTC 000000  
 __end_of_lcd_strobeEnableBit 140C                _initialisation 123A                      ?___awmod 006E  
             main@etatAfterSW 00ED             __size_of_testEtat 0018   __end_of_lcd_effaceAffichage 13FC  
                   _lcd_wrCom 101A         ??_calculToucheCombien 006A                   __smallconst 0600  
             _lcd_lireDonnees 140C           lcd_wrData@caractere 0062                __size_of_srand 0010  
               ??_rempliMines 0076               _lcd_curseurHome 13FC                ___wmul@product 0064  
     metToucheCombien@chiffre 0079        __end_of_initialisation 1286              __CFG_WDTPS$32768 000000  
     __size_of_lcd_putMessage 004E                     main@F2873 0601                    ?_lcd_wrCom 0060  
                  _ADCON0bits 000FC2                    _ADCON2bits 000FC0             ___wmul@multiplier 0060  
                ??_lcd_gotoXY 0064                  ??_lcd_wrData 0062             lcd_wrCom@commande 0062  
           ___lmul@multiplier 0060                     copy_data0 11AE                     copy_data1 11CE  
                    __Hparam0 0000        __size_of_lcd_ecritChar 0054                      __Lparam0 0000  
             ?_initialisation 0060           __end_of_rempliMines 0860                  ??_initTabVue 0066  
          __CFG_BOREN$SBORDIS 000000                  rempliMines@i 00C9                  rempliMines@j 00CD  
                rempliMines@m 00CF            __end_of_lcd_gotoXY 0F40            __end_of_lcd_wrData 133C  
            __size_of___awmod 00B2                  ??_init_serie 0060        __size_of_lcd_initCGRam 00A2  
             lcd_putMessage@j 0067       __end_of_lcd_lireDonnees 1412                      _matCGRAM 01A8  
     __end_of_lcd_curseurHome 1404                      __ptext10 0E2C                      __ptext11 13FC  
                    __ptext20 1308                      __ptext12 123A                      __ptext21 0ECE  
                    __ptext13 13DE                      __ptext22 13EE                      __ptext14 138C  
                    __ptext23 101A                      __ptext15 0C90                      __ptext24 1404  
                    __ptext16 1364                      __ptext25 13AA                      __ptext17 0F40  
                    __ptext26 1286                      __ptext18 11EC                      __ptext27 140C  
                    __ptext19 1146             metToucheCombien@j 007A             metToucheCombien@m 007C  
                    _lcd_busy 1286                      _lcd_init 133C            __end_of_initTabVue 0D7A  
    calculToucheCombien@ligne 0066                      _m_tabVue 0100                 __size_of_main 0122  
               __size_of_rand 0056              rempliMines@testX 00CB              rempliMines@testY 00CC  
          __end_of_init_serie 13AA                      _testEtat 13C6         __end_of_afficheTabVue 0FAE  
                    main@posX 00E7                      main@posY 00E9                   ??_lcd_wrCom 0062  
               _lcd_ecritChar 1146                    _INTCONbits 000FF2                 _lcd_initCGRam 0E2C  
                 _rempliMines 0618          calculToucheCombien@j 0074          calculToucheCombien@m 0075  
   __size_of_metToucheCombien 0174                _lcd_putMessage 11EC                ?_lcd_ecritChar 0060  
            ?_lcd_lireDonnees 0060              ?_lcd_curseurHome 0060                ?_lcd_initCGRam 0060  
           __CFG_FOSC$INTIO67 000000        __end_of_lcd_putMessage 123A  
