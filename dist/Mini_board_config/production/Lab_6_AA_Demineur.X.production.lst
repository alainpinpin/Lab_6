

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Nov 29 15:39:54 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    44  0000                     
    45                           ; Version 2.10
    46                           ; Generated 31/07/2019 GMT
    47                           ; 
    48                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F45K20 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	idataCOMRAM
    81  001092                     __pidataCOMRAM:
    82                           	opt callstack 0
    83                           
    84                           ;initializer for _randx
    85  001092  0001               	dw	1
    86  001094  0000               	dw	0
    87                           
    88                           	psect	idataBANK0
    89  000EE8                     __pidataBANK0:
    90                           	opt callstack 0
    91                           
    92                           ;initializer for _matCGRAM
    93  000EE8  08                 	db	8
    94  000EE9  04                 	db	4
    95  000EEA  04                 	db	4
    96  000EEB  0A                 	db	10
    97  000EEC  11                 	db	17
    98  000EED  1F                 	db	31
    99  000EEE  11                 	db	17
   100  000EEF  00                 	db	0
   101  000EF0  1F                 	db	31
   102  000EF1  1F                 	db	31
   103  000EF2  1F                 	db	31
   104  000EF3  1F                 	db	31
   105  000EF4  1F                 	db	31
   106  000EF5  1F                 	db	31
   107  000EF6  1F                 	db	31
   108  000EF7  1F                 	db	31
   109  000EF8  02                 	db	2
   110  000EF9  04                 	db	4
   111  000EFA  04                 	db	4
   112  000EFB  0E                 	db	14
   113  000EFC  1F                 	db	31
   114  000EFD  1F                 	db	31
   115  000EFE  1F                 	db	31
   116  000EFF  0E                 	db	14
   117  000F00  1F                 	db	31
   118  000F01  15                 	db	21
   119  000F02  15                 	db	21
   120  000F03  04                 	db	4
   121  000F04  04                 	db	4
   122  000F05  15                 	db	21
   123  000F06  15                 	db	21
   124  000F07  1F                 	db	31
   125  000F08  08                 	db	8
   126  000F09  04                 	db	4
   127  000F0A  1F                 	db	31
   128  000F0B  10                 	db	16
   129  000F0C  1E                 	db	30
   130  000F0D  10                 	db	16
   131  000F0E  1F                 	db	31
   132  000F0F  00                 	db	0
   133  000F10  04                 	db	4
   134  000F11  0A                 	db	10
   135  000F12  0E                 	db	14
   136  000F13  11                 	db	17
   137  000F14  1F                 	db	31
   138  000F15  10                 	db	16
   139  000F16  0E                 	db	14
   140  000F17  00                 	db	0
   141  000F18  08                 	db	8
   142  000F19  04                 	db	4
   143  000F1A  0E                 	db	14
   144  000F1B  01                 	db	1
   145  000F1C  0F                 	db	15
   146  000F1D  11                 	db	17
   147  000F1E  0F                 	db	15
   148  000F1F  00                 	db	0
   149  000F20  04                 	db	4
   150  000F21  0A                 	db	10
   151  000F22  0E                 	db	14
   152  000F23  01                 	db	1
   153  000F24  0F                 	db	15
   154  000F25  11                 	db	17
   155  000F26  0F                 	db	15
   156  000F27  00                 	db	0
   157                           
   158                           	psect	smallconst
   159  000600                     __psmallconst:
   160                           	opt callstack 0
   161  000600  00                 	db	0
   162  000601                     main@F2872:
   163                           	opt callstack 0
   164  000601  4C                 	db	76
   165  000602  61                 	db	97
   166  000603  62                 	db	98
   167  000604  36                 	db	54
   168  000605  20                 	db	32
   169  000606  41                 	db	65
   170  000607  6C                 	db	108
   171  000608  65                 	db	101
   172  000609  78                 	db	120
   173  00060A  61                 	db	97
   174  00060B  6E                 	db	110
   175  00060C  64                 	db	100
   176  00060D  72                 	db	114
   177  00060E  65                 	db	101
   178  00060F  20                 	db	32
   179  000610  41                 	db	65
   180  000611  6C                 	db	108
   181  000612  61                 	db	97
   182  000613  69                 	db	105
   183  000614  6E                 	db	110
   184  000615  00                 	db	0
   185  000616                     __end_ofmain@F2872:
   186                           	opt callstack 0
   187  0000                     _TMR1	set	4046
   188  0000                     _RCREG	set	4014
   189  0000                     _TXREG	set	4013
   190  0000                     _RCSTAbits	set	4011
   191  0000                     _TXSTAbits	set	4012
   192  0000                     _BAUDCONbits	set	4024
   193  0000                     _SPBRG	set	4015
   194  0000                     _SPBRGH	set	4016
   195  0000                     _TRISCbits	set	3988
   196  0000                     _PORTAbits	set	3968
   197  0000                     _PORTD	set	3971
   198  0000                     _INTCONbits	set	4082
   199  0000                     _T0CONbits	set	4053
   200  0000                     _ADCON2bits	set	4032
   201  0000                     _ADCON1	set	4033
   202  0000                     _ANSELbits	set	3966
   203  0000                     _T1CONbits	set	4045
   204  0000                     _TRISA	set	3986
   205  0000                     _ANSEL	set	3966
   206  0000                     _TRISB	set	3987
   207  0000                     _ANSELH	set	3967
   208  0000                     _TRISD	set	3989
   209  0000                     _ADRESH	set	4036
   210  0000                     _ADCON0bits	set	4034
   211  0000                     _PORTBbits	set	3969
   212  0000                     _RCIF	set	31989
   213                           
   214                           ; #config settings
   215  000616  00                 	db	0	; dummy byte at the end
   216  0000                     
   217                           	psect	cinit
   218  000DA8                     __pcinit:
   219                           	opt callstack 0
   220  000DA8                     start_initialization:
   221                           	opt callstack 0
   222  000DA8                     __initialization:
   223                           	opt callstack 0
   224                           
   225                           ; Initialize objects allocated to BANK0 (64 bytes)
   226                           ; load TBLPTR registers with __pidataBANK0
   227  000DA8  0EE8               	movlw	low __pidataBANK0
   228  000DAA  6EF6               	movwf	tblptrl,c
   229  000DAC  0E0E               	movlw	high __pidataBANK0
   230  000DAE  6EF7               	movwf	tblptrh,c
   231  000DB0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   232  000DB2  6EF8               	movwf	tblptru,c
   233  000DB4  EE00  F0B8         	lfsr	0,__pdataBANK0
   234  000DB8  EE10 F040          	lfsr	1,64
   235  000DBC                     copy_data0:
   236  000DBC  0009               	tblrd		*+
   237  000DBE  CFF5 FFEE          	movff	tablat,postinc0
   238  000DC2  50E5               	movf	postdec1,w,c
   239  000DC4  50E1               	movf	fsr1l,w,c
   240  000DC6  E1FA               	bnz	copy_data0
   241                           
   242                           ; Initialize objects allocated to COMRAM (4 bytes)
   243                           ; load TBLPTR registers with __pidataCOMRAM
   244  000DC8  0E92               	movlw	low __pidataCOMRAM
   245  000DCA  6EF6               	movwf	tblptrl,c
   246  000DCC  0E10               	movlw	high __pidataCOMRAM
   247  000DCE  6EF7               	movwf	tblptrh,c
   248  000DD0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   249  000DD2  6EF8               	movwf	tblptru,c
   250  000DD4  EE00  F03D         	lfsr	0,__pdataCOMRAM
   251  000DD8  EE10 F004          	lfsr	1,4
   252  000DDC                     copy_data1:
   253  000DDC  0009               	tblrd		*+
   254  000DDE  CFF5 FFEE          	movff	tablat,postinc0
   255  000DE2  50E5               	movf	postdec1,w,c
   256  000DE4  50E1               	movf	fsr1l,w,c
   257  000DE6  E1FA               	bnz	copy_data1
   258                           
   259                           ; Clear objects allocated to BANK1 (168 bytes)
   260  000DE8  EE01  F000         	lfsr	0,__pbssBANK1
   261  000DEC  0EA8               	movlw	168
   262  000DEE                     clear_0:
   263  000DEE  6AEE               	clrf	postinc0,c
   264  000DF0  06E8               	decf	wreg,f,c
   265  000DF2  E1FD               	bnz	clear_0
   266  000DF4                     end_of_initialization:
   267                           	opt callstack 0
   268  000DF4                     __end_of__initialization:
   269                           	opt callstack 0
   270  000DF4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   271  000DF6  6EF8               	movwf	tblptru,c
   272  000DF8  0100               	movlb	0
   273  000DFA  EF1F  F005         	goto	_main	;jump to C main() function
   274                           
   275                           	psect	dataCOMRAM
   276  00003D                     __pdataCOMRAM:
   277                           	opt callstack 0
   278  00003D                     _randx:
   279                           	opt callstack 0
   280  00003D                     	ds	4
   281                           
   282                           	psect	dataBANK0
   283  0000B8                     __pdataBANK0:
   284                           	opt callstack 0
   285  0000B8                     _matCGRAM:
   286                           	opt callstack 0
   287  0000B8                     	ds	64
   288                           
   289                           	psect	bssBANK1
   290  000100                     __pbssBANK1:
   291                           	opt callstack 0
   292  000100                     _m_tabVue:
   293                           	opt callstack 0
   294  000100                     	ds	84
   295  000154                     _m_tabMines:
   296                           	opt callstack 0
   297  000154                     	ds	84
   298                           
   299                           	psect	cstackBANK0
   300  000060                     __pcstackBANK0:
   301                           	opt callstack 0
   302  000060                     rempliMines@tabSafe:
   303                           	opt callstack 0
   304                           
   305                           ; 80 bytes @ 0x0
   306  000060                     	ds	80
   307  0000B0                     rempliMines@i:
   308                           	opt callstack 0
   309                           
   310                           ; 2 bytes @ 0x50
   311  0000B0                     	ds	2
   312  0000B2                     rempliMines@testX:
   313                           	opt callstack 0
   314                           
   315                           ; 1 bytes @ 0x52
   316  0000B2                     	ds	1
   317  0000B3                     rempliMines@testY:
   318                           	opt callstack 0
   319                           
   320                           ; 1 bytes @ 0x53
   321  0000B3                     	ds	1
   322  0000B4                     rempliMines@j:
   323                           	opt callstack 0
   324                           
   325                           ; 2 bytes @ 0x54
   326  0000B4                     	ds	2
   327  0000B6                     rempliMines@m:
   328                           	opt callstack 0
   329                           
   330                           ; 2 bytes @ 0x56
   331  0000B6                     	ds	2
   332                           
   333                           	psect	cstackCOMRAM
   334  000001                     __pcstackCOMRAM:
   335                           	opt callstack 0
   336  000001                     ??_lcd_ecrireDonnees:
   337  000001                     ??_lcd_busy:
   338  000001                     ?___wmul:
   339                           	opt callstack 0
   340  000001                     ?___lmul:
   341                           	opt callstack 0
   342  000001                     ___wmul@multiplier:
   343                           	opt callstack 0
   344  000001                     srand@x:
   345                           	opt callstack 0
   346  000001                     ___lmul@multiplier:
   347                           	opt callstack 0
   348                           
   349                           ; 4 bytes @ 0x0
   350  000001                     	ds	1
   351  000002                     lcd_ecrireDonnees@donnee:
   352                           	opt callstack 0
   353  000002                     lcd_busy@adresse:
   354                           	opt callstack 0
   355                           
   356                           ; 1 bytes @ 0x1
   357  000002                     	ds	1
   358  000003                     ??_lcd_resetSequence:
   359  000003                     lcd_wrCom@commande:
   360                           	opt callstack 0
   361  000003                     lcd_wrData@caractere:
   362                           	opt callstack 0
   363  000003                     ___wmul@multiplicand:
   364                           	opt callstack 0
   365                           
   366                           ; 2 bytes @ 0x2
   367  000003                     	ds	1
   368  000004                     ??_lcd_initCGRam:
   369  000004                     lcd_gotoXY@y:
   370                           	opt callstack 0
   371  000004                     lcd_ecritChar@car:
   372                           	opt callstack 0
   373                           
   374                           ; 1 bytes @ 0x3
   375  000004                     	ds	1
   376  000005                     lcd_gotoXY@x:
   377                           	opt callstack 0
   378  000005                     lcd_ecritChar@posRam:
   379                           	opt callstack 0
   380  000005                     ___wmul@product:
   381                           	opt callstack 0
   382  000005                     ___lmul@multiplicand:
   383                           	opt callstack 0
   384                           
   385                           ; 4 bytes @ 0x4
   386  000005                     	ds	1
   387  000006                     lcd_initCGRam@i:
   388                           	opt callstack 0
   389  000006                     lcd_putMessage@chaine:
   390                           	opt callstack 0
   391                           
   392                           ; 2 bytes @ 0x5
   393  000006                     	ds	1
   394  000007                     ??_initTabVue:
   395  000007                     lcd_initCGRam@j:
   396                           	opt callstack 0
   397  000007                     calculToucheCombien@ligne:
   398                           	opt callstack 0
   399                           
   400                           ; 2 bytes @ 0x6
   401  000007                     	ds	1
   402  000008                     lcd_putMessage@j:
   403                           	opt callstack 0
   404                           
   405                           ; 1 bytes @ 0x7
   406  000008                     	ds	1
   407  000009                     initTabVue@i:
   408                           	opt callstack 0
   409  000009                     calculToucheCombien@colonne:
   410                           	opt callstack 0
   411  000009                     ___lmul@product:
   412                           	opt callstack 0
   413                           
   414                           ; 4 bytes @ 0x8
   415  000009                     	ds	2
   416  00000B                     ??_calculToucheCombien:
   417  00000B                     initTabVue@k:
   418                           	opt callstack 0
   419                           
   420                           ; 2 bytes @ 0xA
   421  00000B                     	ds	2
   422  00000D                     ?_rand:
   423                           	opt callstack 0
   424                           
   425                           ; 2 bytes @ 0xC
   426  00000D                     	ds	1
   427  00000E                     calculToucheCombien@nombre:
   428                           	opt callstack 0
   429                           
   430                           ; 1 bytes @ 0xD
   431  00000E                     	ds	1
   432  00000F                     ?___awmod:
   433                           	opt callstack 0
   434  00000F                     calculToucheCombien@minLigne:
   435                           	opt callstack 0
   436  00000F                     ___awmod@dividend:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0xE
   440  00000F                     	ds	1
   441  000010                     calculToucheCombien@maxLigne:
   442                           	opt callstack 0
   443                           
   444                           ; 1 bytes @ 0xF
   445  000010                     	ds	1
   446  000011                     calculToucheCombien@minCol:
   447                           	opt callstack 0
   448  000011                     ___awmod@divisor:
   449                           	opt callstack 0
   450                           
   451                           ; 2 bytes @ 0x10
   452  000011                     	ds	1
   453  000012                     calculToucheCombien@maxCol:
   454                           	opt callstack 0
   455                           
   456                           ; 1 bytes @ 0x11
   457  000012                     	ds	1
   458  000013                     ___awmod@counter:
   459                           	opt callstack 0
   460  000013                     calculToucheCombien@j:
   461                           	opt callstack 0
   462                           
   463                           ; 2 bytes @ 0x12
   464  000013                     	ds	1
   465  000014                     ___awmod@sign:
   466                           	opt callstack 0
   467                           
   468                           ; 1 bytes @ 0x13
   469  000014                     	ds	1
   470  000015                     rempliMines@nb:
   471                           	opt callstack 0
   472  000015                     calculToucheCombien@m:
   473                           	opt callstack 0
   474                           
   475                           ; 2 bytes @ 0x14
   476  000015                     	ds	2
   477  000017                     ??_rempliMines:
   478  000017                     ??_metToucheCombien:
   479                           
   480                           ; 1 bytes @ 0x16
   481  000017                     	ds	2
   482  000019                     metToucheCombien@chiffre:
   483                           	opt callstack 0
   484                           
   485                           ; 1 bytes @ 0x18
   486  000019                     	ds	1
   487  00001A                     metToucheCombien@j:
   488                           	opt callstack 0
   489                           
   490                           ; 2 bytes @ 0x19
   491  00001A                     	ds	2
   492  00001C                     metToucheCombien@m:
   493                           	opt callstack 0
   494                           
   495                           ; 2 bytes @ 0x1B
   496  00001C                     	ds	2
   497  00001E                     ??_main:
   498                           
   499                           ; 1 bytes @ 0x1D
   500  00001E                     	ds	2
   501  000020                     main@afficheNom:
   502                           	opt callstack 0
   503                           
   504                           ; 21 bytes @ 0x1F
   505  000020                     	ds	28
   506  00003C                     main@etatInitSW:
   507                           	opt callstack 0
   508                           
   509                           ; 1 bytes @ 0x3B
   510  00003C                     	ds	1
   511                           
   512 ;;
   513 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   514 ;;
   515 ;; *************** function _main *****************
   516 ;; Defined at:
   517 ;;		line 73 in file "main.c"
   518 ;; Parameters:    Size  Location     Type
   519 ;;		None
   520 ;; Auto vars:     Size  Location     Type
   521 ;;  afficheNom     21   31[COMRAM] const unsigned char [21]
   522 ;;  nbMines         2    0        int 
   523 ;;  posY            2    0        int 
   524 ;;  posX            2    0        int 
   525 ;;  etatInitSW      1   59[COMRAM] unsigned char 
   526 ;;  etatAfterSW     1    0        unsigned char 
   527 ;; Return value:  Size  Location     Type
   528 ;;                  1    wreg      void 
   529 ;; Registers used:
   530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   531 ;; Tracked objects:
   532 ;;		On entry : 0/0
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   536 ;;      Params:         0       0       0       0       0       0       0
   537 ;;      Locals:        29       0       0       0       0       0       0
   538 ;;      Temps:          2       0       0       0       0       0       0
   539 ;;      Totals:        31       0       0       0       0       0       0
   540 ;;Total ram usage:       31 bytes
   541 ;; Hardware stack levels required when called:    6
   542 ;; This function calls:
   543 ;;		_afficheTabVue
   544 ;;		_initTabVue
   545 ;;		_init_serie
   546 ;;		_initialisation
   547 ;;		_lcd_gotoXY
   548 ;;		_lcd_init
   549 ;;		_lcd_putMessage
   550 ;;		_metToucheCombien
   551 ;;		_rempliMines
   552 ;;		_testEtat
   553 ;; This function is called by:
   554 ;;		Startup code after reset
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558                           	psect	text0
   559  000A3E                     __ptext0:
   560                           	opt callstack 0
   561  000A3E                     _main:
   562                           	opt callstack 25
   563  000A3E                     
   564                           ;main.c: 76: const char afficheNom[] = "Lab6 Alexandre Alain";
   565  000A3E  0E01               	movlw	low main@F2872
   566  000A40  6EF6               	movwf	tblptrl,c
   567  000A42                     	if	1	;There is more than 1 active tblptr byte
   568  000A42  0E06               	movlw	high main@F2872
   569  000A44  6EF7               	movwf	tblptrh,c
   570  000A46                     	endif
   571  000A46                     	if	0	;There are less than 3 active tblptr bytes
   572  000A46                     	endif
   573  000A46  EE20  F020         	lfsr	2,main@afficheNom
   574  000A4A  0E14               	movlw	20
   575  000A4C                     u700:
   576  000A4C  0009               	tblrd		*+
   577  000A4E  CFF5 FFDE          	movff	tablat,postinc2
   578  000A52  06E8               	decf	wreg,f,c
   579  000A54  E2FB               	bc	u700
   580  000A56                     
   581                           ;main.c: 84: initialisation();
   582  000A56  EC28  F007         	call	_initialisation	;wreg free
   583  000A5A                     
   584                           ;main.c: 85: lcd_init();
   585  000A5A  ECE4  F007         	call	_lcd_init	;wreg free
   586  000A5E                     
   587                           ;main.c: 86: init_serie();
   588  000A5E  EC0B  F008         	call	_init_serie	;wreg free
   589  000A62                     
   590                           ;main.c: 88: lcd_gotoXY(1, 1);
   591  000A62  0E01               	movlw	1
   592  000A64  6E04               	movwf	lcd_gotoXY@y^0,c
   593  000A66  0E01               	movlw	1
   594  000A68  ECE0  F005         	call	_lcd_gotoXY
   595  000A6C                     
   596                           ;main.c: 89: lcd_putMessage(afficheNom);
   597  000A6C  0E20               	movlw	low main@afficheNom
   598  000A6E  6E06               	movwf	lcd_putMessage@chaine^0,c
   599  000A70  0E00               	movlw	high main@afficheNom
   600  000A72  6E07               	movwf	(lcd_putMessage@chaine+1)^0,c
   601  000A74  EC94  F007         	call	_lcd_putMessage	;wreg free
   602  000A78                     
   603                           ;main.c: 91: _delay((unsigned long)((1500)*(1000000/4000.0)));
   604  000A78  0E02               	movlw	2
   605  000A7A  6E1F               	movwf	(??_main+1)^0,c
   606  000A7C  0EE7               	movlw	231
   607  000A7E  6E1E               	movwf	??_main^0,c
   608  000A80  0E00               	movlw	0
   609  000A82                     u717:
   610  000A82  2EE8               	decfsz	wreg,f,c
   611  000A84  D7FE               	bra	u717
   612  000A86  2E1E               	decfsz	??_main^0,f,c
   613  000A88  D7FC               	bra	u717
   614  000A8A  2E1F               	decfsz	(??_main+1)^0,f,c
   615  000A8C  D7FA               	bra	u717
   616  000A8E  F000 F000          	nop2	
   617  000A92                     
   618                           ;main.c: 93: etatInitSW = testEtat();
   619  000A92  EC1A  F008         	call	_testEtat	;wreg free
   620  000A96  6E3C               	movwf	main@etatInitSW^0,c
   621  000A98                     
   622                           ;main.c: 96: initTabVue();
   623  000A98  EC68  F005         	call	_initTabVue	;wreg free
   624  000A9C                     
   625                           ;main.c: 97: rempliMines(nbMines);
   626  000A9C  0E00               	movlw	0
   627  000A9E  6E16               	movwf	(rempliMines@nb+1)^0,c
   628  000AA0  0E05               	movlw	5
   629  000AA2  6E15               	movwf	rempliMines@nb^0,c
   630  000AA4  EC0C  F003         	call	_rempliMines	;wreg free
   631  000AA8                     
   632                           ;main.c: 98: metToucheCombien();
   633  000AA8  ECC8  F004         	call	_metToucheCombien	;wreg free
   634  000AAC                     
   635                           ;main.c: 99: afficheTabVue();
   636  000AAC  ECA5  F006         	call	_afficheTabVue	;wreg free
   637  000AB0                     l2080:
   638                           
   639                           ;main.c: 102: {;main.c: 106: etatInitSW = testEtat();
   640  000AB0  EC1A  F008         	call	_testEtat	;wreg free
   641  000AB4  6E3C               	movwf	main@etatInitSW^0,c
   642  000AB6                     
   643                           ;main.c: 116: _delay((unsigned long)((100)*(1000000/4000.0)));
   644  000AB6  0E21               	movlw	33
   645  000AB8  6E1E               	movwf	??_main^0,c
   646  000ABA  0E76               	movlw	118
   647  000ABC                     u727:
   648  000ABC  2EE8               	decfsz	wreg,f,c
   649  000ABE  D7FE               	bra	u727
   650  000AC0  2E1E               	decfsz	??_main^0,f,c
   651  000AC2  D7FC               	bra	u727
   652  000AC4  F000 F000          	nop2	
   653  000AC8  EF58  F005         	goto	l2080
   654  000ACC  EF00  F000         	goto	start
   655  000AD0                     __end_of_main:
   656                           	opt callstack 0
   657                           
   658 ;; *************** function _testEtat *****************
   659 ;; Defined at:
   660 ;;		line 312 in file "main.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;		None
   663 ;; Auto vars:     Size  Location     Type
   664 ;;		None
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      unsigned char 
   667 ;; Registers used:
   668 ;;		wreg
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   674 ;;      Params:         0       0       0       0       0       0       0
   675 ;;      Locals:         0       0       0       0       0       0       0
   676 ;;      Temps:          0       0       0       0       0       0       0
   677 ;;      Totals:         0       0       0       0       0       0       0
   678 ;;Total ram usage:        0 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; This function calls:
   681 ;;		Nothing
   682 ;; This function is called by:
   683 ;;		_main
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687                           	psect	text1
   688  001034                     __ptext1:
   689                           	opt callstack 0
   690  001034                     _testEtat:
   691                           	opt callstack 30
   692  001034                     
   693                           ;main.c: 314: if(PORTBbits.RB1 == 0)
   694  001034  B281               	btfsc	129,1,c	;volatile
   695  001036  EF1F  F008         	goto	u221
   696  00103A  EF21  F008         	goto	u220
   697  00103E                     u221:
   698  00103E  EF24  F008         	goto	l1430
   699  001042                     u220:
   700  001042                     
   701                           ;main.c: 315: {;main.c: 316: return 1;
   702  001042  0E01               	movlw	1
   703  001044  EF25  F008         	goto	l135
   704  001048                     l1430:
   705                           
   706                           ;main.c: 318: else;main.c: 319: {;main.c: 320: return 0;
   707  001048  0E00               	movlw	0
   708  00104A                     l135:
   709  00104A  0012               	return		;funcret
   710  00104C                     __end_of_testEtat:
   711                           	opt callstack 0
   712                           
   713 ;; *************** function _rempliMines *****************
   714 ;; Defined at:
   715 ;;		line 164 in file "main.c"
   716 ;; Parameters:    Size  Location     Type
   717 ;;  nb              2   20[COMRAM] int 
   718 ;; Auto vars:     Size  Location     Type
   719 ;;  m               2   86[BANK0 ] int 
   720 ;;  i               2   80[BANK0 ] int 
   721 ;;  j               2   84[BANK0 ] int 
   722 ;;  tabSafe        80    0[BANK0 ] unsigned char [20][4]
   723 ;;  testY           1   83[BANK0 ] unsigned char 
   724 ;;  testX           1   82[BANK0 ] unsigned char 
   725 ;; Return value:  Size  Location     Type
   726 ;;                  1    wreg      void 
   727 ;; Registers used:
   728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   729 ;; Tracked objects:
   730 ;;		On entry : 0/0
   731 ;;		On exit  : 0/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   734 ;;      Params:         2       0       0       0       0       0       0
   735 ;;      Locals:         0      88       0       0       0       0       0
   736 ;;      Temps:          3       0       0       0       0       0       0
   737 ;;      Totals:         5      88       0       0       0       0       0
   738 ;;Total ram usage:       93 bytes
   739 ;; Hardware stack levels used:    1
   740 ;; Hardware stack levels required when called:    2
   741 ;; This function calls:
   742 ;;		___awmod
   743 ;;		___wmul
   744 ;;		_rand
   745 ;; This function is called by:
   746 ;;		_main
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750                           	psect	text2
   751  000618                     __ptext2:
   752                           	opt callstack 0
   753  000618                     _rempliMines:
   754                           	opt callstack 28
   755  000618                     
   756                           ;main.c: 168: char testY = 0;
   757  000618  0E00               	movlw	0
   758  00061A  0100               	movlb	0	; () banked
   759  00061C  6FB3               	movwf	rempliMines@testY& (0+255),b
   760                           
   761                           ;main.c: 171: for(int j = 0 ; j < 20 ; j++)
   762  00061E  0E00               	movlw	0
   763  000620  6FB5               	movwf	(rempliMines@j+1)& (0+255),b
   764  000622  0E00               	movlw	0
   765  000624  6FB4               	movwf	rempliMines@j& (0+255),b
   766  000626                     l1970:
   767                           
   768                           ; BSR set to: 0
   769                           ;main.c: 172: {;main.c: 173: for(int m = 0; m < 4 ; m++)
   770  000626  0E00               	movlw	0
   771  000628  6FB7               	movwf	(rempliMines@m+1)& (0+255),b
   772  00062A  0E00               	movlw	0
   773  00062C  6FB6               	movwf	rempliMines@m& (0+255),b
   774  00062E                     l1976:
   775                           
   776                           ; BSR set to: 0
   777                           ;main.c: 174: {;main.c: 175: tabSafe[m][j] = 0;
   778  00062E  C0B6  F001         	movff	rempliMines@m,___wmul@multiplier
   779  000632  C0B7  F002         	movff	rempliMines@m+1,___wmul@multiplier+1
   780  000636  0E00               	movlw	0
   781  000638  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   782  00063A  0E14               	movlw	20
   783  00063C  6E03               	movwf	___wmul@multiplicand^0,c
   784  00063E  ECF8  F007         	call	___wmul	;wreg free
   785  000642  0E60               	movlw	low rempliMines@tabSafe
   786  000644  6E17               	movwf	??_rempliMines^0,c
   787  000646  0E00               	movlw	high rempliMines@tabSafe
   788  000648  6E18               	movwf	(??_rempliMines+1)^0,c
   789  00064A  5001               	movf	?___wmul^0,w,c
   790  00064C  2617               	addwf	??_rempliMines^0,f,c
   791  00064E  5002               	movf	(?___wmul+1)^0,w,c
   792  000650  2218               	addwfc	(??_rempliMines+1)^0,f,c
   793  000652  0100               	movlb	0	; () banked
   794  000654  51B4               	movf	rempliMines@j& (0+255),w,b
   795  000656  2417               	addwf	??_rempliMines^0,w,c
   796  000658  6ED9               	movwf	fsr2l,c
   797  00065A  51B5               	movf	(rempliMines@j+1)& (0+255),w,b
   798  00065C  2018               	addwfc	(??_rempliMines+1)^0,w,c
   799  00065E  6EDA               	movwf	fsr2h,c
   800  000660  0E00               	movlw	0
   801  000662  6EDF               	movwf	indf2,c
   802                           
   803                           ;main.c: 176: m_tabMines[m][j] = ' ';
   804  000664  C0B6  F001         	movff	rempliMines@m,___wmul@multiplier
   805  000668  C0B7  F002         	movff	rempliMines@m+1,___wmul@multiplier+1
   806  00066C  0E00               	movlw	0
   807  00066E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   808  000670  0E15               	movlw	21
   809  000672  6E03               	movwf	___wmul@multiplicand^0,c
   810  000674  ECF8  F007         	call	___wmul	;wreg free
   811  000678  0E54               	movlw	low _m_tabMines
   812  00067A  6E17               	movwf	??_rempliMines^0,c
   813  00067C  0E01               	movlw	high _m_tabMines
   814  00067E  6E18               	movwf	(??_rempliMines+1)^0,c
   815  000680  5001               	movf	?___wmul^0,w,c
   816  000682  2617               	addwf	??_rempliMines^0,f,c
   817  000684  5002               	movf	(?___wmul+1)^0,w,c
   818  000686  2218               	addwfc	(??_rempliMines+1)^0,f,c
   819  000688  0100               	movlb	0	; () banked
   820  00068A  51B4               	movf	rempliMines@j& (0+255),w,b
   821  00068C  2417               	addwf	??_rempliMines^0,w,c
   822  00068E  6ED9               	movwf	fsr2l,c
   823  000690  51B5               	movf	(rempliMines@j+1)& (0+255),w,b
   824  000692  2018               	addwfc	(??_rempliMines+1)^0,w,c
   825  000694  6EDA               	movwf	fsr2h,c
   826  000696  0E20               	movlw	32
   827  000698  6EDF               	movwf	indf2,c
   828  00069A                     
   829                           ; BSR set to: 0
   830  00069A  4BB6               	infsnz	rempliMines@m& (0+255),f,b
   831  00069C  2BB7               	incf	(rempliMines@m+1)& (0+255),f,b
   832  00069E                     
   833                           ; BSR set to: 0
   834  00069E  BFB7               	btfsc	(rempliMines@m+1)& (0+255),7,b
   835  0006A0  EF5B  F003         	goto	u621
   836  0006A4  51B7               	movf	(rempliMines@m+1)& (0+255),w,b
   837  0006A6  E109               	bnz	u620
   838  0006A8  0E04               	movlw	4
   839  0006AA  5DB6               	subwf	rempliMines@m& (0+255),w,b
   840  0006AC  A0D8               	btfss	status,0,c
   841  0006AE  EF5B  F003         	goto	u621
   842  0006B2  EF5D  F003         	goto	u620
   843  0006B6                     u621:
   844  0006B6  EF17  F003         	goto	l1976
   845  0006BA                     u620:
   846  0006BA                     
   847                           ; BSR set to: 0
   848  0006BA  4BB4               	infsnz	rempliMines@j& (0+255),f,b
   849  0006BC  2BB5               	incf	(rempliMines@j+1)& (0+255),f,b
   850  0006BE                     
   851                           ; BSR set to: 0
   852  0006BE  BFB5               	btfsc	(rempliMines@j+1)& (0+255),7,b
   853  0006C0  EF6B  F003         	goto	u631
   854  0006C4  51B5               	movf	(rempliMines@j+1)& (0+255),w,b
   855  0006C6  E109               	bnz	u630
   856  0006C8  0E14               	movlw	20
   857  0006CA  5DB4               	subwf	rempliMines@j& (0+255),w,b
   858  0006CC  A0D8               	btfss	status,0,c
   859  0006CE  EF6B  F003         	goto	u631
   860  0006D2  EF6D  F003         	goto	u630
   861  0006D6                     u631:
   862  0006D6  EF13  F003         	goto	l1970
   863  0006DA                     u630:
   864  0006DA                     
   865                           ; BSR set to: 0
   866                           ;main.c: 177: };main.c: 178: };main.c: 181: for(int i = 0 ; i < nb ; i++)
   867  0006DA  0E00               	movlw	0
   868  0006DC  6FB1               	movwf	(rempliMines@i+1)& (0+255),b
   869  0006DE  0E00               	movlw	0
   870  0006E0  6FB0               	movwf	rempliMines@i& (0+255),b
   871  0006E2  EFC6  F003         	goto	l1996
   872  0006E6                     l1988:
   873                           
   874                           ; BSR set to: 0
   875                           ;main.c: 184: {;main.c: 185: testX = rand()%20;
   876  0006E6  ECFF  F006         	call	_rand	;wreg free
   877  0006EA  C00D  F00F         	movff	?_rand,___awmod@dividend
   878  0006EE  C00E  F010         	movff	?_rand+1,___awmod@dividend+1
   879  0006F2  0E00               	movlw	0
   880  0006F4  6E12               	movwf	(___awmod@divisor+1)^0,c
   881  0006F6  0E14               	movlw	20
   882  0006F8  6E11               	movwf	___awmod@divisor^0,c
   883  0006FA  EC70  F004         	call	___awmod	;wreg free
   884  0006FE  500F               	movf	?___awmod^0,w,c
   885  000700  0100               	movlb	0	; () banked
   886  000702  6FB2               	movwf	rempliMines@testX& (0+255),b
   887                           
   888                           ;main.c: 186: testY = rand()%4;
   889  000704  ECFF  F006         	call	_rand	;wreg free
   890  000708  500D               	movf	?_rand^0,w,c
   891  00070A  0B03               	andlw	3
   892  00070C  0100               	movlb	0	; () banked
   893  00070E  6FB3               	movwf	rempliMines@testY& (0+255),b
   894  000710                     
   895                           ; BSR set to: 0
   896                           ;main.c: 187: };main.c: 188: while(tabSafe[testY][testX] == 1);
   897  000710  51B3               	movf	rempliMines@testY& (0+255),w,b
   898  000712  0D14               	mullw	20
   899  000714  0E60               	movlw	low rempliMines@tabSafe
   900  000716  6E17               	movwf	??_rempliMines^0,c
   901  000718  0E00               	movlw	high rempliMines@tabSafe
   902  00071A  6E18               	movwf	(??_rempliMines+1)^0,c
   903  00071C  50F3               	movf	243,w,c
   904  00071E  2617               	addwf	??_rempliMines^0,f,c
   905  000720  50F4               	movf	244,w,c
   906  000722  2218               	addwfc	(??_rempliMines+1)^0,f,c
   907  000724  51B2               	movf	rempliMines@testX& (0+255),w,b
   908  000726  2417               	addwf	??_rempliMines^0,w,c
   909  000728  6ED9               	movwf	fsr2l,c
   910  00072A  0E00               	movlw	0
   911  00072C  2018               	addwfc	(??_rempliMines+1)^0,w,c
   912  00072E  6EDA               	movwf	fsr2h,c
   913  000730  04DE               	decf	postinc2,w,c
   914  000732  B4D8               	btfsc	status,2,c
   915  000734  EF9E  F003         	goto	u641
   916  000738  EFA0  F003         	goto	u640
   917  00073C                     u641:
   918  00073C  EF73  F003         	goto	l1988
   919  000740                     u640:
   920  000740                     
   921                           ; BSR set to: 0
   922                           ;main.c: 190: tabSafe[testY][testX] = 1;
   923  000740  51B3               	movf	rempliMines@testY& (0+255),w,b
   924  000742  0D14               	mullw	20
   925  000744  0E60               	movlw	low rempliMines@tabSafe
   926  000746  6E17               	movwf	??_rempliMines^0,c
   927  000748  0E00               	movlw	high rempliMines@tabSafe
   928  00074A  6E18               	movwf	(??_rempliMines+1)^0,c
   929  00074C  50F3               	movf	243,w,c
   930  00074E  2617               	addwf	??_rempliMines^0,f,c
   931  000750  50F4               	movf	244,w,c
   932  000752  2218               	addwfc	(??_rempliMines+1)^0,f,c
   933  000754  51B2               	movf	rempliMines@testX& (0+255),w,b
   934  000756  2417               	addwf	??_rempliMines^0,w,c
   935  000758  6ED9               	movwf	fsr2l,c
   936  00075A  0E00               	movlw	0
   937  00075C  2018               	addwfc	(??_rempliMines+1)^0,w,c
   938  00075E  6EDA               	movwf	fsr2h,c
   939  000760  0E01               	movlw	1
   940  000762  6EDF               	movwf	indf2,c
   941                           
   942                           ;main.c: 191: m_tabMines[testY][testX] = 2;
   943  000764  51B3               	movf	rempliMines@testY& (0+255),w,b
   944  000766  0D15               	mullw	21
   945  000768  0E54               	movlw	low _m_tabMines
   946  00076A  6E17               	movwf	??_rempliMines^0,c
   947  00076C  0E01               	movlw	high _m_tabMines
   948  00076E  6E18               	movwf	(??_rempliMines+1)^0,c
   949  000770  50F3               	movf	243,w,c
   950  000772  2617               	addwf	??_rempliMines^0,f,c
   951  000774  50F4               	movf	244,w,c
   952  000776  2218               	addwfc	(??_rempliMines+1)^0,f,c
   953  000778  51B2               	movf	rempliMines@testX& (0+255),w,b
   954  00077A  2417               	addwf	??_rempliMines^0,w,c
   955  00077C  6ED9               	movwf	fsr2l,c
   956  00077E  0E00               	movlw	0
   957  000780  2018               	addwfc	(??_rempliMines+1)^0,w,c
   958  000782  6EDA               	movwf	fsr2h,c
   959  000784  0E02               	movlw	2
   960  000786  6EDF               	movwf	indf2,c
   961  000788                     
   962                           ; BSR set to: 0
   963  000788  4BB0               	infsnz	rempliMines@i& (0+255),f,b
   964  00078A  2BB1               	incf	(rempliMines@i+1)& (0+255),f,b
   965  00078C                     l1996:
   966                           
   967                           ; BSR set to: 0
   968  00078C  5015               	movf	rempliMines@nb^0,w,c
   969  00078E  5DB0               	subwf	rempliMines@i& (0+255),w,b
   970  000790  51B1               	movf	(rempliMines@i+1)& (0+255),w,b
   971  000792  0A80               	xorlw	128
   972  000794  6E17               	movwf	??_rempliMines^0,c
   973  000796  5016               	movf	(rempliMines@nb+1)^0,w,c
   974  000798  0A80               	xorlw	128
   975  00079A  5817               	subwfb	??_rempliMines^0,w,c
   976  00079C  A0D8               	btfss	status,0,c
   977  00079E  EFD3  F003         	goto	u651
   978  0007A2  EFD5  F003         	goto	u650
   979  0007A6                     u651:
   980  0007A6  EF73  F003         	goto	l1988
   981  0007AA                     u650:
   982  0007AA                     
   983                           ; BSR set to: 0
   984  0007AA  0012               	return		;funcret
   985  0007AC                     __end_of_rempliMines:
   986                           	opt callstack 0
   987                           
   988 ;; *************** function _rand *****************
   989 ;; Defined at:
   990 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;		None
   993 ;; Auto vars:     Size  Location     Type
   994 ;;		None
   995 ;; Return value:  Size  Location     Type
   996 ;;                  2   12[COMRAM] int 
   997 ;; Registers used:
   998 ;;		wreg, status,2, status,0, cstack
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1004 ;;      Params:         2       0       0       0       0       0       0
  1005 ;;      Locals:         0       0       0       0       0       0       0
  1006 ;;      Temps:          0       0       0       0       0       0       0
  1007 ;;      Totals:         2       0       0       0       0       0       0
  1008 ;;Total ram usage:        2 bytes
  1009 ;; Hardware stack levels used:    1
  1010 ;; Hardware stack levels required when called:    1
  1011 ;; This function calls:
  1012 ;;		___lmul
  1013 ;; This function is called by:
  1014 ;;		_rempliMines
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           	psect	text3
  1019  000DFE                     __ptext3:
  1020                           	opt callstack 0
  1021  000DFE                     _rand:
  1022                           	opt callstack 28
  1023  000DFE  C03D  F001         	movff	_randx,___lmul@multiplier
  1024  000E02  C03E  F002         	movff	_randx+1,___lmul@multiplier+1
  1025  000E06  C03F  F003         	movff	_randx+2,___lmul@multiplier+2
  1026  000E0A  C040  F004         	movff	_randx+3,___lmul@multiplier+3
  1027  000E0E  0E6D               	movlw	109
  1028  000E10  6E05               	movwf	___lmul@multiplicand^0,c
  1029  000E12  0E4E               	movlw	78
  1030  000E14  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1031  000E16  0EC6               	movlw	198
  1032  000E18  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1033  000E1A  0E41               	movlw	65
  1034  000E1C  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1035  000E1E  ECAB  F005         	call	___lmul	;wreg free
  1036  000E22  C001  F03D         	movff	?___lmul,_randx
  1037  000E26  C002  F03E         	movff	?___lmul+1,_randx+1
  1038  000E2A  C003  F03F         	movff	?___lmul+2,_randx+2
  1039  000E2E  C004  F040         	movff	?___lmul+3,_randx+3
  1040  000E32  0E39               	movlw	57
  1041  000E34  263D               	addwf	_randx^0,f,c
  1042  000E36  0E30               	movlw	48
  1043  000E38  223E               	addwfc	(_randx+1)^0,f,c
  1044  000E3A  0E00               	movlw	0
  1045  000E3C  223F               	addwfc	(_randx+2)^0,f,c
  1046  000E3E  0E00               	movlw	0
  1047  000E40  2240               	addwfc	(_randx+3)^0,f,c
  1048  000E42  0EFF               	movlw	255
  1049  000E44  143F               	andwf	(_randx+2)^0,w,c
  1050  000E46  6E0D               	movwf	?_rand^0,c
  1051  000E48  0E7F               	movlw	127
  1052  000E4A  1440               	andwf	(_randx+3)^0,w,c
  1053  000E4C  6E0E               	movwf	(?_rand+1)^0,c
  1054  000E4E  0012               	return		;funcret
  1055  000E50                     __end_of_rand:
  1056                           	opt callstack 0
  1057                           
  1058 ;; *************** function ___lmul *****************
  1059 ;; Defined at:
  1060 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;  multiplier      4    0[COMRAM] unsigned long 
  1063 ;;  multiplicand    4    4[COMRAM] unsigned long 
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;  product         4    8[COMRAM] unsigned long 
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  4    0[COMRAM] unsigned long 
  1068 ;; Registers used:
  1069 ;;		wreg, status,2, status,0
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1075 ;;      Params:         8       0       0       0       0       0       0
  1076 ;;      Locals:         4       0       0       0       0       0       0
  1077 ;;      Temps:          0       0       0       0       0       0       0
  1078 ;;      Totals:        12       0       0       0       0       0       0
  1079 ;;Total ram usage:       12 bytes
  1080 ;; Hardware stack levels used:    1
  1081 ;; This function calls:
  1082 ;;		Nothing
  1083 ;; This function is called by:
  1084 ;;		_rand
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text4
  1089  000B56                     __ptext4:
  1090                           	opt callstack 0
  1091  000B56                     ___lmul:
  1092                           	opt callstack 28
  1093  000B56  0E00               	movlw	0
  1094  000B58  6E09               	movwf	___lmul@product^0,c
  1095  000B5A  0E00               	movlw	0
  1096  000B5C  6E0A               	movwf	(___lmul@product+1)^0,c
  1097  000B5E  0E00               	movlw	0
  1098  000B60  6E0B               	movwf	(___lmul@product+2)^0,c
  1099  000B62  0E00               	movlw	0
  1100  000B64  6E0C               	movwf	(___lmul@product+3)^0,c
  1101  000B66                     l1724:
  1102  000B66  A001               	btfss	___lmul@multiplier^0,0,c
  1103  000B68  EFB8  F005         	goto	u421
  1104  000B6C  EFBA  F005         	goto	u420
  1105  000B70                     u421:
  1106  000B70  EFC2  F005         	goto	l1728
  1107  000B74                     u420:
  1108  000B74  5005               	movf	___lmul@multiplicand^0,w,c
  1109  000B76  2609               	addwf	___lmul@product^0,f,c
  1110  000B78  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  1111  000B7A  220A               	addwfc	(___lmul@product+1)^0,f,c
  1112  000B7C  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  1113  000B7E  220B               	addwfc	(___lmul@product+2)^0,f,c
  1114  000B80  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  1115  000B82  220C               	addwfc	(___lmul@product+3)^0,f,c
  1116  000B84                     l1728:
  1117  000B84  90D8               	bcf	status,0,c
  1118  000B86  3605               	rlcf	___lmul@multiplicand^0,f,c
  1119  000B88  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  1120  000B8A  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  1121  000B8C  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  1122  000B8E  90D8               	bcf	status,0,c
  1123  000B90  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  1124  000B92  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  1125  000B94  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  1126  000B96  3201               	rrcf	___lmul@multiplier^0,f,c
  1127  000B98  5001               	movf	___lmul@multiplier^0,w,c
  1128  000B9A  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  1129  000B9C  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  1130  000B9E  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  1131  000BA0  A4D8               	btfss	status,2,c
  1132  000BA2  EFD5  F005         	goto	u431
  1133  000BA6  EFD7  F005         	goto	u430
  1134  000BAA                     u431:
  1135  000BAA  EFB3  F005         	goto	l1724
  1136  000BAE                     u430:
  1137  000BAE  C009  F001         	movff	___lmul@product,?___lmul
  1138  000BB2  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  1139  000BB6  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  1140  000BBA  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  1141  000BBE  0012               	return		;funcret
  1142  000BC0                     __end_of___lmul:
  1143                           	opt callstack 0
  1144                           
  1145 ;; *************** function ___awmod *****************
  1146 ;; Defined at:
  1147 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;  dividend        2   14[COMRAM] int 
  1150 ;;  divisor         2   16[COMRAM] int 
  1151 ;; Auto vars:     Size  Location     Type
  1152 ;;  sign            1   19[COMRAM] unsigned char 
  1153 ;;  counter         1   18[COMRAM] unsigned char 
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  2   14[COMRAM] int 
  1156 ;; Registers used:
  1157 ;;		wreg, status,2, status,0
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1163 ;;      Params:         4       0       0       0       0       0       0
  1164 ;;      Locals:         2       0       0       0       0       0       0
  1165 ;;      Temps:          0       0       0       0       0       0       0
  1166 ;;      Totals:         6       0       0       0       0       0       0
  1167 ;;Total ram usage:        6 bytes
  1168 ;; Hardware stack levels used:    1
  1169 ;; This function calls:
  1170 ;;		Nothing
  1171 ;; This function is called by:
  1172 ;;		_rempliMines
  1173 ;; This function uses a non-reentrant model
  1174 ;;
  1175                           
  1176                           	psect	text5
  1177  0008E0                     __ptext5:
  1178                           	opt callstack 0
  1179  0008E0                     ___awmod:
  1180                           	opt callstack 29
  1181  0008E0  0E00               	movlw	0
  1182  0008E2  6E14               	movwf	___awmod@sign^0,c
  1183  0008E4  BE10               	btfsc	(___awmod@dividend+1)^0,7,c
  1184  0008E6  EF79  F004         	goto	u540
  1185  0008EA  EF77  F004         	goto	u541
  1186  0008EE                     u541:
  1187  0008EE  EF7F  F004         	goto	l1872
  1188  0008F2                     u540:
  1189  0008F2  6C0F               	negf	___awmod@dividend^0,c
  1190  0008F4  1E10               	comf	(___awmod@dividend+1)^0,f,c
  1191  0008F6  B0D8               	btfsc	status,0,c
  1192  0008F8  2A10               	incf	(___awmod@dividend+1)^0,f,c
  1193  0008FA  0E01               	movlw	1
  1194  0008FC  6E14               	movwf	___awmod@sign^0,c
  1195  0008FE                     l1872:
  1196  0008FE  BE12               	btfsc	(___awmod@divisor+1)^0,7,c
  1197  000900  EF86  F004         	goto	u550
  1198  000904  EF84  F004         	goto	u551
  1199  000908                     u551:
  1200  000908  EF8A  F004         	goto	l1876
  1201  00090C                     u550:
  1202  00090C  6C11               	negf	___awmod@divisor^0,c
  1203  00090E  1E12               	comf	(___awmod@divisor+1)^0,f,c
  1204  000910  B0D8               	btfsc	status,0,c
  1205  000912  2A12               	incf	(___awmod@divisor+1)^0,f,c
  1206  000914                     l1876:
  1207  000914  5011               	movf	___awmod@divisor^0,w,c
  1208  000916  1012               	iorwf	(___awmod@divisor+1)^0,w,c
  1209  000918  B4D8               	btfsc	status,2,c
  1210  00091A  EF91  F004         	goto	u561
  1211  00091E  EF93  F004         	goto	u560
  1212  000922                     u561:
  1213  000922  EFB7  F004         	goto	l1892
  1214  000926                     u560:
  1215  000926  0E01               	movlw	1
  1216  000928  6E13               	movwf	___awmod@counter^0,c
  1217  00092A  EF9B  F004         	goto	l1882
  1218  00092E                     l1880:
  1219  00092E  90D8               	bcf	status,0,c
  1220  000930  3611               	rlcf	___awmod@divisor^0,f,c
  1221  000932  3612               	rlcf	(___awmod@divisor+1)^0,f,c
  1222  000934  2A13               	incf	___awmod@counter^0,f,c
  1223  000936                     l1882:
  1224  000936  AE12               	btfss	(___awmod@divisor+1)^0,7,c
  1225  000938  EFA0  F004         	goto	u571
  1226  00093C  EFA2  F004         	goto	u570
  1227  000940                     u571:
  1228  000940  EF97  F004         	goto	l1880
  1229  000944                     u570:
  1230  000944                     l1884:
  1231  000944  5011               	movf	___awmod@divisor^0,w,c
  1232  000946  5C0F               	subwf	___awmod@dividend^0,w,c
  1233  000948  5012               	movf	(___awmod@divisor+1)^0,w,c
  1234  00094A  5810               	subwfb	(___awmod@dividend+1)^0,w,c
  1235  00094C  A0D8               	btfss	status,0,c
  1236  00094E  EFAB  F004         	goto	u581
  1237  000952  EFAD  F004         	goto	u580
  1238  000956                     u581:
  1239  000956  EFB1  F004         	goto	l1888
  1240  00095A                     u580:
  1241  00095A  5011               	movf	___awmod@divisor^0,w,c
  1242  00095C  5E0F               	subwf	___awmod@dividend^0,f,c
  1243  00095E  5012               	movf	(___awmod@divisor+1)^0,w,c
  1244  000960  5A10               	subwfb	(___awmod@dividend+1)^0,f,c
  1245  000962                     l1888:
  1246  000962  90D8               	bcf	status,0,c
  1247  000964  3212               	rrcf	(___awmod@divisor+1)^0,f,c
  1248  000966  3211               	rrcf	___awmod@divisor^0,f,c
  1249  000968  2E13               	decfsz	___awmod@counter^0,f,c
  1250  00096A  EFA2  F004         	goto	l1884
  1251  00096E                     l1892:
  1252  00096E  5014               	movf	___awmod@sign^0,w,c
  1253  000970  B4D8               	btfsc	status,2,c
  1254  000972  EFBD  F004         	goto	u591
  1255  000976  EFBF  F004         	goto	u590
  1256  00097A                     u591:
  1257  00097A  EFC3  F004         	goto	l1896
  1258  00097E                     u590:
  1259  00097E  6C0F               	negf	___awmod@dividend^0,c
  1260  000980  1E10               	comf	(___awmod@dividend+1)^0,f,c
  1261  000982  B0D8               	btfsc	status,0,c
  1262  000984  2A10               	incf	(___awmod@dividend+1)^0,f,c
  1263  000986                     l1896:
  1264  000986  C00F  F00F         	movff	___awmod@dividend,?___awmod
  1265  00098A  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  1266  00098E  0012               	return		;funcret
  1267  000990                     __end_of___awmod:
  1268                           	opt callstack 0
  1269                           
  1270 ;; *************** function _metToucheCombien *****************
  1271 ;; Defined at:
  1272 ;;		line 204 in file "main.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;		None
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;  m               2   27[COMRAM] int 
  1277 ;;  j               2   25[COMRAM] int 
  1278 ;;  chiffre         1   24[COMRAM] unsigned char 
  1279 ;; Return value:  Size  Location     Type
  1280 ;;                  1    wreg      void 
  1281 ;; Registers used:
  1282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1283 ;; Tracked objects:
  1284 ;;		On entry : 0/0
  1285 ;;		On exit  : 0/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1288 ;;      Params:         0       0       0       0       0       0       0
  1289 ;;      Locals:         5       0       0       0       0       0       0
  1290 ;;      Temps:          2       0       0       0       0       0       0
  1291 ;;      Totals:         7       0       0       0       0       0       0
  1292 ;;Total ram usage:        7 bytes
  1293 ;; Hardware stack levels used:    1
  1294 ;; Hardware stack levels required when called:    2
  1295 ;; This function calls:
  1296 ;;		___wmul
  1297 ;;		_calculToucheCombien
  1298 ;; This function is called by:
  1299 ;;		_main
  1300 ;; This function uses a non-reentrant model
  1301 ;;
  1302                           
  1303                           	psect	text6
  1304  000990                     __ptext6:
  1305                           	opt callstack 0
  1306  000990                     _metToucheCombien:
  1307                           	opt callstack 28
  1308  000990                     
  1309                           ;main.c: 206: char chiffre;;main.c: 208: for(int j = 0 ; j < 20 ; j++)
  1310  000990  0E00               	movlw	0
  1311  000992  6E1B               	movwf	(metToucheCombien@j+1)^0,c
  1312  000994  0E00               	movlw	0
  1313  000996  6E1A               	movwf	metToucheCombien@j^0,c
  1314  000998                     l2004:
  1315                           
  1316                           ;main.c: 209: {;main.c: 210: for(int m = 0; m < 4 ; m++)
  1317  000998  0E00               	movlw	0
  1318  00099A  6E1D               	movwf	(metToucheCombien@m+1)^0,c
  1319  00099C  0E00               	movlw	0
  1320  00099E  6E1C               	movwf	metToucheCombien@m^0,c
  1321  0009A0                     l2010:
  1322                           
  1323                           ;main.c: 211: {;main.c: 212: chiffre = calculToucheCombien(m, j);
  1324  0009A0  C01C  F007         	movff	metToucheCombien@m,calculToucheCombien@ligne
  1325  0009A4  C01D  F008         	movff	metToucheCombien@m+1,calculToucheCombien@ligne+1
  1326  0009A8  C01A  F009         	movff	metToucheCombien@j,calculToucheCombien@colonne
  1327  0009AC  C01B  F00A         	movff	metToucheCombien@j+1,calculToucheCombien@colonne+1
  1328  0009B0  ECD6  F003         	call	_calculToucheCombien	;wreg free
  1329  0009B4  6E19               	movwf	metToucheCombien@chiffre^0,c
  1330  0009B6                     
  1331                           ;main.c: 214: if( chiffre != 0)
  1332  0009B6  5019               	movf	metToucheCombien@chiffre^0,w,c
  1333  0009B8  B4D8               	btfsc	status,2,c
  1334  0009BA  EFE1  F004         	goto	u661
  1335  0009BE  EFE3  F004         	goto	u660
  1336  0009C2                     u661:
  1337  0009C2  EFFE  F004         	goto	l2016
  1338  0009C6                     u660:
  1339  0009C6                     
  1340                           ;main.c: 215: {;main.c: 216: m_tabMines[m][j] = 48 + chiffre;
  1341  0009C6  C01C  F001         	movff	metToucheCombien@m,___wmul@multiplier
  1342  0009CA  C01D  F002         	movff	metToucheCombien@m+1,___wmul@multiplier+1
  1343  0009CE  0E00               	movlw	0
  1344  0009D0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1345  0009D2  0E15               	movlw	21
  1346  0009D4  6E03               	movwf	___wmul@multiplicand^0,c
  1347  0009D6  ECF8  F007         	call	___wmul	;wreg free
  1348  0009DA  0E54               	movlw	low _m_tabMines
  1349  0009DC  6E17               	movwf	??_metToucheCombien^0,c
  1350  0009DE  0E01               	movlw	high _m_tabMines
  1351  0009E0  6E18               	movwf	(??_metToucheCombien+1)^0,c
  1352  0009E2  5001               	movf	?___wmul^0,w,c
  1353  0009E4  2617               	addwf	??_metToucheCombien^0,f,c
  1354  0009E6  5002               	movf	(?___wmul+1)^0,w,c
  1355  0009E8  2218               	addwfc	(??_metToucheCombien+1)^0,f,c
  1356  0009EA  501A               	movf	metToucheCombien@j^0,w,c
  1357  0009EC  2417               	addwf	??_metToucheCombien^0,w,c
  1358  0009EE  6ED9               	movwf	fsr2l,c
  1359  0009F0  501B               	movf	(metToucheCombien@j+1)^0,w,c
  1360  0009F2  2018               	addwfc	(??_metToucheCombien+1)^0,w,c
  1361  0009F4  6EDA               	movwf	fsr2h,c
  1362  0009F6  5019               	movf	metToucheCombien@chiffre^0,w,c
  1363  0009F8  0F30               	addlw	48
  1364  0009FA  6EDF               	movwf	indf2,c
  1365  0009FC                     l2016:
  1366  0009FC  4A1C               	infsnz	metToucheCombien@m^0,f,c
  1367  0009FE  2A1D               	incf	(metToucheCombien@m+1)^0,f,c
  1368  000A00  BE1D               	btfsc	(metToucheCombien@m+1)^0,7,c
  1369  000A02  EF0C  F005         	goto	u671
  1370  000A06  501D               	movf	(metToucheCombien@m+1)^0,w,c
  1371  000A08  E109               	bnz	u670
  1372  000A0A  0E04               	movlw	4
  1373  000A0C  5C1C               	subwf	metToucheCombien@m^0,w,c
  1374  000A0E  A0D8               	btfss	status,0,c
  1375  000A10  EF0C  F005         	goto	u671
  1376  000A14  EF0E  F005         	goto	u670
  1377  000A18                     u671:
  1378  000A18  EFD0  F004         	goto	l2010
  1379  000A1C                     u670:
  1380  000A1C  4A1A               	infsnz	metToucheCombien@j^0,f,c
  1381  000A1E  2A1B               	incf	(metToucheCombien@j+1)^0,f,c
  1382  000A20  BE1B               	btfsc	(metToucheCombien@j+1)^0,7,c
  1383  000A22  EF1C  F005         	goto	u681
  1384  000A26  501B               	movf	(metToucheCombien@j+1)^0,w,c
  1385  000A28  E109               	bnz	u680
  1386  000A2A  0E14               	movlw	20
  1387  000A2C  5C1A               	subwf	metToucheCombien@j^0,w,c
  1388  000A2E  A0D8               	btfss	status,0,c
  1389  000A30  EF1C  F005         	goto	u681
  1390  000A34  EF1E  F005         	goto	u680
  1391  000A38                     u681:
  1392  000A38  EFCC  F004         	goto	l2004
  1393  000A3C                     u680:
  1394  000A3C  0012               	return		;funcret
  1395  000A3E                     __end_of_metToucheCombien:
  1396                           	opt callstack 0
  1397                           
  1398 ;; *************** function _calculToucheCombien *****************
  1399 ;; Defined at:
  1400 ;;		line 228 in file "main.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;  ligne           2    6[COMRAM] int 
  1403 ;;  colonne         2    8[COMRAM] int 
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;  m               2   20[COMRAM] int 
  1406 ;;  j               2   18[COMRAM] int 
  1407 ;;  maxCol          1   17[COMRAM] unsigned char 
  1408 ;;  minCol          1   16[COMRAM] unsigned char 
  1409 ;;  maxLigne        1   15[COMRAM] unsigned char 
  1410 ;;  minLigne        1   14[COMRAM] unsigned char 
  1411 ;;  nombre          1   13[COMRAM] unsigned char 
  1412 ;; Return value:  Size  Location     Type
  1413 ;;                  1    wreg      unsigned char 
  1414 ;; Registers used:
  1415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1421 ;;      Params:         4       0       0       0       0       0       0
  1422 ;;      Locals:         9       0       0       0       0       0       0
  1423 ;;      Temps:          3       0       0       0       0       0       0
  1424 ;;      Totals:        16       0       0       0       0       0       0
  1425 ;;Total ram usage:       16 bytes
  1426 ;; Hardware stack levels used:    1
  1427 ;; Hardware stack levels required when called:    1
  1428 ;; This function calls:
  1429 ;;		___wmul
  1430 ;; This function is called by:
  1431 ;;		_metToucheCombien
  1432 ;; This function uses a non-reentrant model
  1433 ;;
  1434                           
  1435                           	psect	text7
  1436  0007AC                     __ptext7:
  1437                           	opt callstack 0
  1438  0007AC                     _calculToucheCombien:
  1439                           	opt callstack 28
  1440  0007AC                     
  1441                           ;main.c: 230: char nombre = 0;
  1442  0007AC  0E00               	movlw	0
  1443  0007AE  6E0E               	movwf	calculToucheCombien@nombre^0,c
  1444  0007B0                     
  1445                           ;main.c: 231: char minLigne = -1;
  1446  0007B0  680F               	setf	calculToucheCombien@minLigne^0,c
  1447                           
  1448                           ;main.c: 232: char maxLigne = 2;
  1449  0007B2  0E02               	movlw	2
  1450  0007B4  6E10               	movwf	calculToucheCombien@maxLigne^0,c
  1451  0007B6                     
  1452                           ;main.c: 233: char minCol = -1;
  1453  0007B6  6811               	setf	calculToucheCombien@minCol^0,c
  1454                           
  1455                           ;main.c: 234: char maxCol = 2;
  1456  0007B8  0E02               	movlw	2
  1457  0007BA  6E12               	movwf	calculToucheCombien@maxCol^0,c
  1458  0007BC                     
  1459                           ;main.c: 236: if(ligne == 0)
  1460  0007BC  5007               	movf	calculToucheCombien@ligne^0,w,c
  1461  0007BE  1008               	iorwf	(calculToucheCombien@ligne+1)^0,w,c
  1462  0007C0  A4D8               	btfss	status,2,c
  1463  0007C2  EFE5  F003         	goto	u451
  1464  0007C6  EFE7  F003         	goto	u450
  1465  0007CA                     u451:
  1466  0007CA  EFE8  F003         	goto	l1774
  1467  0007CE                     u450:
  1468  0007CE                     
  1469                           ;main.c: 237: minLigne++;
  1470  0007CE  2A0F               	incf	calculToucheCombien@minLigne^0,f,c
  1471  0007D0                     l1774:
  1472                           
  1473                           ;main.c: 238: if(ligne == 3)
  1474  0007D0  0E03               	movlw	3
  1475  0007D2  1807               	xorwf	calculToucheCombien@ligne^0,w,c
  1476  0007D4  1008               	iorwf	(calculToucheCombien@ligne+1)^0,w,c
  1477  0007D6  A4D8               	btfss	status,2,c
  1478  0007D8  EFF0  F003         	goto	u461
  1479  0007DC  EFF2  F003         	goto	u460
  1480  0007E0                     u461:
  1481  0007E0  EFF3  F003         	goto	l1778
  1482  0007E4                     u460:
  1483  0007E4                     
  1484                           ;main.c: 239: maxLigne--;
  1485  0007E4  0610               	decf	calculToucheCombien@maxLigne^0,f,c
  1486  0007E6                     l1778:
  1487                           
  1488                           ;main.c: 240: if(colonne == 0)
  1489  0007E6  5009               	movf	calculToucheCombien@colonne^0,w,c
  1490  0007E8  100A               	iorwf	(calculToucheCombien@colonne+1)^0,w,c
  1491  0007EA  A4D8               	btfss	status,2,c
  1492  0007EC  EFFA  F003         	goto	u471
  1493  0007F0  EFFC  F003         	goto	u470
  1494  0007F4                     u471:
  1495  0007F4  EFFD  F003         	goto	l1782
  1496  0007F8                     u470:
  1497  0007F8                     
  1498                           ;main.c: 241: minCol++;
  1499  0007F8  2A11               	incf	calculToucheCombien@minCol^0,f,c
  1500  0007FA                     l1782:
  1501                           
  1502                           ;main.c: 242: if(colonne == 19)
  1503  0007FA  0E13               	movlw	19
  1504  0007FC  1809               	xorwf	calculToucheCombien@colonne^0,w,c
  1505  0007FE  100A               	iorwf	(calculToucheCombien@colonne+1)^0,w,c
  1506  000800  A4D8               	btfss	status,2,c
  1507  000802  EF05  F004         	goto	u481
  1508  000806  EF07  F004         	goto	u480
  1509  00080A                     u481:
  1510  00080A  EF08  F004         	goto	l1786
  1511  00080E                     u480:
  1512  00080E                     
  1513                           ;main.c: 243: maxCol--;
  1514  00080E  0612               	decf	calculToucheCombien@maxCol^0,f,c
  1515  000810                     l1786:
  1516                           
  1517                           ;main.c: 246: for(int j = minCol ; j < maxCol ; j++)
  1518  000810  C011  F013         	movff	calculToucheCombien@minCol,calculToucheCombien@j
  1519  000814  6A14               	clrf	(calculToucheCombien@j+1)^0,c
  1520  000816  EF5C  F004         	goto	l1796
  1521  00081A                     l113:
  1522                           
  1523                           ;main.c: 247: {;main.c: 248: for(int m = minLigne; m < maxLigne ; m++)
  1524  00081A  C00F  F015         	movff	calculToucheCombien@minLigne,calculToucheCombien@m
  1525  00081E  6A16               	clrf	(calculToucheCombien@m+1)^0,c
  1526  000820  EF48  F004         	goto	l1792
  1527  000824                     l1788:
  1528                           
  1529                           ;main.c: 249: {;main.c: 250: if( m_tabMines[ligne+m][colonne+j] == 2)
  1530  000824  C007  F001         	movff	calculToucheCombien@ligne,___wmul@multiplier
  1531  000828  C008  F002         	movff	calculToucheCombien@ligne+1,___wmul@multiplier+1
  1532  00082C  0E00               	movlw	0
  1533  00082E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1534  000830  0E15               	movlw	21
  1535  000832  6E03               	movwf	___wmul@multiplicand^0,c
  1536  000834  ECF8  F007         	call	___wmul	;wreg free
  1537  000838  0E54               	movlw	low _m_tabMines
  1538  00083A  6E0B               	movwf	??_calculToucheCombien^0,c
  1539  00083C  0E01               	movlw	high _m_tabMines
  1540  00083E  6E0C               	movwf	(??_calculToucheCombien+1)^0,c
  1541  000840  5001               	movf	?___wmul^0,w,c
  1542  000842  260B               	addwf	??_calculToucheCombien^0,f,c
  1543  000844  5002               	movf	(?___wmul+1)^0,w,c
  1544  000846  220C               	addwfc	(??_calculToucheCombien+1)^0,f,c
  1545  000848  C015  F001         	movff	calculToucheCombien@m,___wmul@multiplier
  1546  00084C  C016  F002         	movff	calculToucheCombien@m+1,___wmul@multiplier+1
  1547  000850  0E00               	movlw	0
  1548  000852  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1549  000854  0E15               	movlw	21
  1550  000856  6E03               	movwf	___wmul@multiplicand^0,c
  1551  000858  ECF8  F007         	call	___wmul	;wreg free
  1552  00085C  5001               	movf	?___wmul^0,w,c
  1553  00085E  260B               	addwf	??_calculToucheCombien^0,f,c
  1554  000860  5002               	movf	(?___wmul+1)^0,w,c
  1555  000862  220C               	addwfc	(??_calculToucheCombien+1)^0,f,c
  1556  000864  5009               	movf	calculToucheCombien@colonne^0,w,c
  1557  000866  260B               	addwf	??_calculToucheCombien^0,f,c
  1558  000868  500A               	movf	(calculToucheCombien@colonne+1)^0,w,c
  1559  00086A  220C               	addwfc	(??_calculToucheCombien+1)^0,f,c
  1560  00086C  5013               	movf	calculToucheCombien@j^0,w,c
  1561  00086E  240B               	addwf	??_calculToucheCombien^0,w,c
  1562  000870  6ED9               	movwf	fsr2l,c
  1563  000872  5014               	movf	(calculToucheCombien@j+1)^0,w,c
  1564  000874  200C               	addwfc	(??_calculToucheCombien+1)^0,w,c
  1565  000876  6EDA               	movwf	fsr2h,c
  1566  000878  0E02               	movlw	2
  1567  00087A  18DE               	xorwf	postinc2,w,c
  1568  00087C  A4D8               	btfss	status,2,c
  1569  00087E  EF43  F004         	goto	u491
  1570  000882  EF45  F004         	goto	u490
  1571  000886                     u491:
  1572  000886  EF46  F004         	goto	l116
  1573  00088A                     u490:
  1574  00088A                     
  1575                           ;main.c: 251: {;main.c: 252: nombre++;
  1576  00088A  2A0E               	incf	calculToucheCombien@nombre^0,f,c
  1577  00088C                     l116:
  1578  00088C  4A15               	infsnz	calculToucheCombien@m^0,f,c
  1579  00088E  2A16               	incf	(calculToucheCombien@m+1)^0,f,c
  1580  000890                     l1792:
  1581  000890  5010               	movf	calculToucheCombien@maxLigne^0,w,c
  1582  000892  6E0B               	movwf	??_calculToucheCombien^0,c
  1583  000894  6A0C               	clrf	(??_calculToucheCombien+1)^0,c
  1584  000896  500B               	movf	??_calculToucheCombien^0,w,c
  1585  000898  5C15               	subwf	calculToucheCombien@m^0,w,c
  1586  00089A  5016               	movf	(calculToucheCombien@m+1)^0,w,c
  1587  00089C  0A80               	xorlw	128
  1588  00089E  6E0D               	movwf	(??_calculToucheCombien+2)^0,c
  1589  0008A0  500C               	movf	(??_calculToucheCombien+1)^0,w,c
  1590  0008A2  0A80               	xorlw	128
  1591  0008A4  580D               	subwfb	(??_calculToucheCombien+2)^0,w,c
  1592  0008A6  A0D8               	btfss	status,0,c
  1593  0008A8  EF58  F004         	goto	u501
  1594  0008AC  EF5A  F004         	goto	u500
  1595  0008B0                     u501:
  1596  0008B0  EF12  F004         	goto	l1788
  1597  0008B4                     u500:
  1598  0008B4  4A13               	infsnz	calculToucheCombien@j^0,f,c
  1599  0008B6  2A14               	incf	(calculToucheCombien@j+1)^0,f,c
  1600  0008B8                     l1796:
  1601  0008B8  5012               	movf	calculToucheCombien@maxCol^0,w,c
  1602  0008BA  6E0B               	movwf	??_calculToucheCombien^0,c
  1603  0008BC  6A0C               	clrf	(??_calculToucheCombien+1)^0,c
  1604  0008BE  500B               	movf	??_calculToucheCombien^0,w,c
  1605  0008C0  5C13               	subwf	calculToucheCombien@j^0,w,c
  1606  0008C2  5014               	movf	(calculToucheCombien@j+1)^0,w,c
  1607  0008C4  0A80               	xorlw	128
  1608  0008C6  6E0D               	movwf	(??_calculToucheCombien+2)^0,c
  1609  0008C8  500C               	movf	(??_calculToucheCombien+1)^0,w,c
  1610  0008CA  0A80               	xorlw	128
  1611  0008CC  580D               	subwfb	(??_calculToucheCombien+2)^0,w,c
  1612  0008CE  A0D8               	btfss	status,0,c
  1613  0008D0  EF6C  F004         	goto	u511
  1614  0008D4  EF6E  F004         	goto	u510
  1615  0008D8                     u511:
  1616  0008D8  EF0D  F004         	goto	l113
  1617  0008DC                     u510:
  1618  0008DC                     
  1619                           ;main.c: 253: };main.c: 254: };main.c: 255: };main.c: 257: return nombre;
  1620  0008DC  500E               	movf	calculToucheCombien@nombre^0,w,c
  1621  0008DE  0012               	return		;funcret
  1622  0008E0                     __end_of_calculToucheCombien:
  1623                           	opt callstack 0
  1624                           
  1625 ;; *************** function _lcd_init *****************
  1626 ;; Defined at:
  1627 ;;		line 258 in file "Lcd4Lignes.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;		None
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;		None
  1632 ;; Return value:  Size  Location     Type
  1633 ;;                  1    wreg      void 
  1634 ;; Registers used:
  1635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1636 ;; Tracked objects:
  1637 ;;		On entry : 0/0
  1638 ;;		On exit  : 0/0
  1639 ;;		Unchanged: 0/0
  1640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1641 ;;      Params:         0       0       0       0       0       0       0
  1642 ;;      Locals:         0       0       0       0       0       0       0
  1643 ;;      Temps:          0       0       0       0       0       0       0
  1644 ;;      Totals:         0       0       0       0       0       0       0
  1645 ;;Total ram usage:        0 bytes
  1646 ;; Hardware stack levels used:    1
  1647 ;; Hardware stack levels required when called:    5
  1648 ;; This function calls:
  1649 ;;		_lcd_initCGRam
  1650 ;;		_lcd_resetSequence
  1651 ;;		_lcd_wrCom
  1652 ;; This function is called by:
  1653 ;;		_main
  1654 ;; This function uses a non-reentrant model
  1655 ;;
  1656                           
  1657                           	psect	text8
  1658  000FC8                     __ptext8:
  1659                           	opt callstack 0
  1660  000FC8                     _lcd_init:
  1661                           	opt callstack 25
  1662  000FC8                     
  1663                           ;Lcd4Lignes.c: 261: lcd_resetSequence();
  1664  000FC8  EC13  F006         	call	_lcd_resetSequence	;wreg free
  1665                           
  1666                           ;Lcd4Lignes.c: 262: lcd_wrCom(0x28);
  1667  000FCC  0E28               	movlw	40
  1668  000FCE  EC45  F006         	call	_lcd_wrCom
  1669                           
  1670                           ;Lcd4Lignes.c: 263: lcd_wrCom(0x0F);
  1671  000FD2  0E0F               	movlw	15
  1672  000FD4  EC45  F006         	call	_lcd_wrCom
  1673                           
  1674                           ;Lcd4Lignes.c: 264: lcd_wrCom(0x01);
  1675  000FD8  0E01               	movlw	1
  1676  000FDA  EC45  F006         	call	_lcd_wrCom
  1677                           
  1678                           ;Lcd4Lignes.c: 265: lcd_wrCom(0x06);
  1679  000FDE  0E06               	movlw	6
  1680  000FE0  EC45  F006         	call	_lcd_wrCom
  1681                           
  1682                           ;Lcd4Lignes.c: 266: lcd_wrCom(0x80);
  1683  000FE4  0E80               	movlw	128
  1684  000FE6  EC45  F006         	call	_lcd_wrCom
  1685  000FEA                     
  1686                           ;Lcd4Lignes.c: 267: lcd_initCGRam();
  1687  000FEA  EC76  F006         	call	_lcd_initCGRam	;wreg free
  1688  000FEE  0012               	return		;funcret
  1689  000FF0                     __end_of_lcd_init:
  1690                           	opt callstack 0
  1691                           
  1692 ;; *************** function _lcd_resetSequence *****************
  1693 ;; Defined at:
  1694 ;;		line 221 in file "Lcd4Lignes.c"
  1695 ;; Parameters:    Size  Location     Type
  1696 ;;		None
  1697 ;; Auto vars:     Size  Location     Type
  1698 ;;		None
  1699 ;; Return value:  Size  Location     Type
  1700 ;;                  1    wreg      void 
  1701 ;; Registers used:
  1702 ;;		wreg, status,2, status,0, cstack
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1708 ;;      Params:         0       0       0       0       0       0       0
  1709 ;;      Locals:         0       0       0       0       0       0       0
  1710 ;;      Temps:          1       0       0       0       0       0       0
  1711 ;;      Totals:         1       0       0       0       0       0       0
  1712 ;;Total ram usage:        1 bytes
  1713 ;; Hardware stack levels used:    1
  1714 ;; Hardware stack levels required when called:    1
  1715 ;; This function calls:
  1716 ;;		_lcd_ecrireDonnees
  1717 ;;		_lcd_strobeEnableBit
  1718 ;; This function is called by:
  1719 ;;		_lcd_init
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           	psect	text9
  1724  000C26                     __ptext9:
  1725                           	opt callstack 0
  1726  000C26                     _lcd_resetSequence:
  1727                           	opt callstack 28
  1728  000C26                     
  1729                           ;Lcd4Lignes.c: 226: TRISD = 0b00000000;
  1730  000C26  0E00               	movlw	0
  1731  000C28  6E95               	movwf	149,c	;volatile
  1732  000C2A                     
  1733                           ;Lcd4Lignes.c: 228: _delay((unsigned long)((40)*(1000000/4000.0)));
  1734  000C2A  0E0D               	movlw	13
  1735  000C2C  6E03               	movwf	??_lcd_resetSequence^0,c
  1736  000C2E  0EFC               	movlw	252
  1737  000C30                     u737:
  1738  000C30  2EE8               	decfsz	wreg,f,c
  1739  000C32  D7FE               	bra	u737
  1740  000C34  2E03               	decfsz	??_lcd_resetSequence^0,f,c
  1741  000C36  D7FC               	bra	u737
  1742  000C38                     
  1743                           ;Lcd4Lignes.c: 229: PORTAbits.RA0 = 0;
  1744  000C38  9080               	bcf	128,0,c	;volatile
  1745  000C3A                     
  1746                           ;Lcd4Lignes.c: 230: PORTAbits.RA1 = 0;
  1747  000C3A  9280               	bcf	128,1,c	;volatile
  1748  000C3C                     
  1749                           ;Lcd4Lignes.c: 232: lcd_ecrireDonnees(0x03);
  1750  000C3C  0E03               	movlw	3
  1751  000C3E  EC26  F008         	call	_lcd_ecrireDonnees
  1752  000C42                     
  1753                           ;Lcd4Lignes.c: 233: lcd_strobeEnableBit();
  1754  000C42  EC42  F008         	call	_lcd_strobeEnableBit	;wreg free
  1755  000C46                     
  1756                           ;Lcd4Lignes.c: 234: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1757  000C46  0E03               	movlw	3
  1758  000C48                     u747:
  1759  000C48  2EE8               	decfsz	wreg,f,c
  1760  000C4A  D7FE               	bra	u747
  1761  000C4C  F000               	nop	
  1762  000C4E                     
  1763                           ;Lcd4Lignes.c: 237: lcd_ecrireDonnees(0x03);
  1764  000C4E  0E03               	movlw	3
  1765  000C50  EC26  F008         	call	_lcd_ecrireDonnees
  1766  000C54                     
  1767                           ;Lcd4Lignes.c: 238: lcd_strobeEnableBit();
  1768  000C54  EC42  F008         	call	_lcd_strobeEnableBit	;wreg free
  1769  000C58                     
  1770                           ;Lcd4Lignes.c: 239: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1771  000C58  0E03               	movlw	3
  1772  000C5A                     u757:
  1773  000C5A  2EE8               	decfsz	wreg,f,c
  1774  000C5C  D7FE               	bra	u757
  1775  000C5E  F000               	nop	
  1776  000C60                     
  1777                           ;Lcd4Lignes.c: 241: lcd_ecrireDonnees(0x03);
  1778  000C60  0E03               	movlw	3
  1779  000C62  EC26  F008         	call	_lcd_ecrireDonnees
  1780  000C66                     
  1781                           ;Lcd4Lignes.c: 242: lcd_strobeEnableBit();
  1782  000C66  EC42  F008         	call	_lcd_strobeEnableBit	;wreg free
  1783  000C6A                     
  1784                           ;Lcd4Lignes.c: 243: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1785  000C6A  0E03               	movlw	3
  1786  000C6C                     u767:
  1787  000C6C  2EE8               	decfsz	wreg,f,c
  1788  000C6E  D7FE               	bra	u767
  1789  000C70  F000               	nop	
  1790  000C72                     
  1791                           ;Lcd4Lignes.c: 245: lcd_ecrireDonnees(0x02);
  1792  000C72  0E02               	movlw	2
  1793  000C74  EC26  F008         	call	_lcd_ecrireDonnees
  1794  000C78                     
  1795                           ;Lcd4Lignes.c: 246: lcd_strobeEnableBit();
  1796  000C78  EC42  F008         	call	_lcd_strobeEnableBit	;wreg free
  1797  000C7C                     
  1798                           ;Lcd4Lignes.c: 247: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1799  000C7C  0E03               	movlw	3
  1800  000C7E                     u777:
  1801  000C7E  2EE8               	decfsz	wreg,f,c
  1802  000C80  D7FE               	bra	u777
  1803  000C82  F000               	nop	
  1804  000C84                     
  1805                           ;Lcd4Lignes.c: 249: TRISD = 0b00001111;
  1806  000C84  0E0F               	movlw	15
  1807  000C86  6E95               	movwf	149,c	;volatile
  1808  000C88  0012               	return		;funcret
  1809  000C8A                     __end_of_lcd_resetSequence:
  1810                           	opt callstack 0
  1811                           
  1812 ;; *************** function _lcd_initCGRam *****************
  1813 ;; Defined at:
  1814 ;;		line 417 in file "Lcd4Lignes.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;		None
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;  j               1    6[COMRAM] unsigned char 
  1819 ;;  i               1    5[COMRAM] unsigned char 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  1    wreg      void 
  1822 ;; Registers used:
  1823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1829 ;;      Params:         0       0       0       0       0       0       0
  1830 ;;      Locals:         2       0       0       0       0       0       0
  1831 ;;      Temps:          2       0       0       0       0       0       0
  1832 ;;      Totals:         4       0       0       0       0       0       0
  1833 ;;Total ram usage:        4 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; Hardware stack levels required when called:    4
  1836 ;; This function calls:
  1837 ;;		_lcd_curseurHome
  1838 ;;		_lcd_wrCom
  1839 ;;		_lcd_wrData
  1840 ;; This function is called by:
  1841 ;;		_lcd_init
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text10
  1846  000CEC                     __ptext10:
  1847                           	opt callstack 0
  1848  000CEC                     _lcd_initCGRam:
  1849                           	opt callstack 25
  1850  000CEC                     
  1851                           ;Lcd4Lignes.c: 419: char i,j;;Lcd4Lignes.c: 421: lcd_wrCom(0x40);
  1852  000CEC  0E40               	movlw	64
  1853  000CEE  EC45  F006         	call	_lcd_wrCom
  1854  000CF2                     
  1855                           ;Lcd4Lignes.c: 422: for(i=0;i<8;i++)
  1856  000CF2  0E00               	movlw	0
  1857  000CF4  6E06               	movwf	lcd_initCGRam@i^0,c
  1858  000CF6                     l1846:
  1859                           
  1860                           ;Lcd4Lignes.c: 423: {;Lcd4Lignes.c: 424: for(j=0;j<8;j++)
  1861  000CF6  0E00               	movlw	0
  1862  000CF8  6E07               	movwf	lcd_initCGRam@j^0,c
  1863  000CFA                     l1852:
  1864                           
  1865                           ;Lcd4Lignes.c: 425: lcd_wrData(matCGRAM[i][j]);
  1866  000CFA  5006               	movf	lcd_initCGRam@i^0,w,c
  1867  000CFC  0D08               	mullw	8
  1868  000CFE  0EB8               	movlw	low _matCGRAM
  1869  000D00  6E04               	movwf	??_lcd_initCGRam^0,c
  1870  000D02  0E00               	movlw	high _matCGRAM
  1871  000D04  6E05               	movwf	(??_lcd_initCGRam+1)^0,c
  1872  000D06  50F3               	movf	243,w,c
  1873  000D08  2604               	addwf	??_lcd_initCGRam^0,f,c
  1874  000D0A  50F4               	movf	244,w,c
  1875  000D0C  2205               	addwfc	(??_lcd_initCGRam+1)^0,f,c
  1876  000D0E  5007               	movf	lcd_initCGRam@j^0,w,c
  1877  000D10  2404               	addwf	??_lcd_initCGRam^0,w,c
  1878  000D12  6ED9               	movwf	fsr2l,c
  1879  000D14  0E00               	movlw	0
  1880  000D16  2005               	addwfc	(??_lcd_initCGRam+1)^0,w,c
  1881  000D18  6EDA               	movwf	fsr2h,c
  1882  000D1A  50DF               	movf	indf2,w,c
  1883  000D1C  ECCD  F007         	call	_lcd_wrData
  1884  000D20  2A07               	incf	lcd_initCGRam@j^0,f,c
  1885  000D22  0E07               	movlw	7
  1886  000D24  6407               	cpfsgt	lcd_initCGRam@j^0,c
  1887  000D26  EF97  F006         	goto	u521
  1888  000D2A  EF99  F006         	goto	u520
  1889  000D2E                     u521:
  1890  000D2E  EF7D  F006         	goto	l1852
  1891  000D32                     u520:
  1892  000D32  2A06               	incf	lcd_initCGRam@i^0,f,c
  1893  000D34  0E07               	movlw	7
  1894  000D36  6406               	cpfsgt	lcd_initCGRam@i^0,c
  1895  000D38  EFA0  F006         	goto	u531
  1896  000D3C  EFA2  F006         	goto	u530
  1897  000D40                     u531:
  1898  000D40  EF7B  F006         	goto	l1846
  1899  000D44                     u530:
  1900  000D44                     
  1901                           ;Lcd4Lignes.c: 426: };Lcd4Lignes.c: 427: lcd_curseurHome();
  1902  000D44  EC3E  F008         	call	_lcd_curseurHome	;wreg free
  1903  000D48  0012               	return		;funcret
  1904  000D4A                     __end_of_lcd_initCGRam:
  1905                           	opt callstack 0
  1906                           
  1907 ;; *************** function _lcd_curseurHome *****************
  1908 ;; Defined at:
  1909 ;;		line 288 in file "Lcd4Lignes.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;		None
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;		None
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		wreg, status,2, status,0, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1923 ;;      Params:         0       0       0       0       0       0       0
  1924 ;;      Locals:         0       0       0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0       0       0
  1926 ;;      Totals:         0       0       0       0       0       0       0
  1927 ;;Total ram usage:        0 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    3
  1930 ;; This function calls:
  1931 ;;		_lcd_wrCom
  1932 ;; This function is called by:
  1933 ;;		_lcd_initCGRam
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           	psect	text11
  1938  00107C                     __ptext11:
  1939                           	opt callstack 0
  1940  00107C                     _lcd_curseurHome:
  1941                           	opt callstack 25
  1942  00107C                     
  1943                           ;Lcd4Lignes.c: 290: lcd_wrCom(0x02);
  1944  00107C  0E02               	movlw	2
  1945  00107E  EC45  F006         	call	_lcd_wrCom
  1946  001082  0012               	return		;funcret
  1947  001084                     __end_of_lcd_curseurHome:
  1948                           	opt callstack 0
  1949                           
  1950 ;; *************** function _initialisation *****************
  1951 ;; Defined at:
  1952 ;;		line 343 in file "main.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;		None
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;		None
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      void 
  1959 ;; Registers used:
  1960 ;;		wreg, status,2, cstack
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1966 ;;      Params:         0       0       0       0       0       0       0
  1967 ;;      Locals:         0       0       0       0       0       0       0
  1968 ;;      Temps:          0       0       0       0       0       0       0
  1969 ;;      Totals:         0       0       0       0       0       0       0
  1970 ;;Total ram usage:        0 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; Hardware stack levels required when called:    1
  1973 ;; This function calls:
  1974 ;;		_srand
  1975 ;; This function is called by:
  1976 ;;		_main
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text12
  1981  000E50                     __ptext12:
  1982                           	opt callstack 0
  1983  000E50                     _initialisation:
  1984                           	opt callstack 29
  1985  000E50                     
  1986                           ;main.c: 345: TRISD = 0;
  1987  000E50  0E00               	movlw	0
  1988  000E52  6E95               	movwf	149,c	;volatile
  1989                           
  1990                           ;main.c: 347: ANSELH = 0;
  1991  000E54  0E00               	movlw	0
  1992  000E56  6E7F               	movwf	127,c	;volatile
  1993  000E58                     
  1994                           ;main.c: 348: TRISB = 0xFF;
  1995  000E58  6893               	setf	147,c	;volatile
  1996                           
  1997                           ;main.c: 350: ANSEL = 0;
  1998  000E5A  0E00               	movlw	0
  1999  000E5C  6E7E               	movwf	126,c	;volatile
  2000                           
  2001                           ;main.c: 351: TRISA = 0;
  2002  000E5E  0E00               	movlw	0
  2003  000E60  6E92               	movwf	146,c	;volatile
  2004  000E62                     
  2005                           ;main.c: 355: T1CONbits.TMR1ON = 1;
  2006  000E62  80CD               	bsf	205,0,c	;volatile
  2007  000E64                     
  2008                           ;main.c: 356: srand(TMR1);
  2009  000E64  CFCE F001          	movff	4046,srand@x	;volatile
  2010  000E68  CFCF F002          	movff	4047,srand@x+1	;volatile
  2011  000E6C  EC30  F008         	call	_srand	;wreg free
  2012  000E70                     
  2013                           ;main.c: 359: ANSELbits.ANS7 = 1;
  2014  000E70  8E7E               	bsf	126,7,c	;volatile
  2015  000E72                     
  2016                           ;main.c: 361: ADCON0bits.ADON = 1;
  2017  000E72  80C2               	bsf	194,0,c	;volatile
  2018  000E74                     
  2019                           ;main.c: 362: ADCON1 = 0;
  2020  000E74  0E00               	movlw	0
  2021  000E76  6EC1               	movwf	193,c	;volatile
  2022  000E78                     
  2023                           ;main.c: 364: ADCON2bits.ADFM = 0;
  2024  000E78  9EC0               	bcf	192,7,c	;volatile
  2025  000E7A                     
  2026                           ;main.c: 365: ADCON2bits.ACQT = 0;
  2027  000E7A  0EC7               	movlw	-57
  2028  000E7C  16C0               	andwf	192,f,c	;volatile
  2029  000E7E                     
  2030                           ;main.c: 366: ADCON2bits.ADCS = 0;
  2031  000E7E  0EF8               	movlw	-8
  2032  000E80  16C0               	andwf	192,f,c	;volatile
  2033  000E82                     
  2034                           ;main.c: 370: T0CONbits.TMR0ON = 1;
  2035  000E82  8ED5               	bsf	213,7,c	;volatile
  2036  000E84                     
  2037                           ;main.c: 371: T0CONbits.T08BIT = 0;
  2038  000E84  9CD5               	bcf	213,6,c	;volatile
  2039  000E86                     
  2040                           ;main.c: 372: T0CONbits.T0CS = 0;
  2041  000E86  9AD5               	bcf	213,5,c	;volatile
  2042  000E88                     
  2043                           ;main.c: 373: T0CONbits.PSA = 0;
  2044  000E88  96D5               	bcf	213,3,c	;volatile
  2045  000E8A                     
  2046                           ;main.c: 374: T0CONbits.T0PS = 0b010;
  2047  000E8A  50D5               	movf	213,w,c	;volatile
  2048  000E8C  0BF8               	andlw	-8
  2049  000E8E  0902               	iorlw	2
  2050  000E90  6ED5               	movwf	213,c	;volatile
  2051  000E92                     
  2052                           ;main.c: 376: INTCONbits.TMR0IE = 1;
  2053  000E92  8AF2               	bsf	242,5,c	;volatile
  2054  000E94                     
  2055                           ;main.c: 377: INTCONbits.TMR0IF = 0;
  2056  000E94  94F2               	bcf	242,2,c	;volatile
  2057  000E96                     
  2058                           ;main.c: 378: INTCONbits.PEIE = 1;
  2059  000E96  8CF2               	bsf	242,6,c	;volatile
  2060  000E98                     
  2061                           ;main.c: 379: INTCONbits.GIE = 1;
  2062  000E98  8EF2               	bsf	242,7,c	;volatile
  2063  000E9A  0012               	return		;funcret
  2064  000E9C                     __end_of_initialisation:
  2065                           	opt callstack 0
  2066                           
  2067 ;; *************** function _srand *****************
  2068 ;; Defined at:
  2069 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;  x               2    0[COMRAM] unsigned int 
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      void 
  2076 ;; Registers used:
  2077 ;;		status,2
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2083 ;;      Params:         2       0       0       0       0       0       0
  2084 ;;      Locals:         0       0       0       0       0       0       0
  2085 ;;      Temps:          0       0       0       0       0       0       0
  2086 ;;      Totals:         2       0       0       0       0       0       0
  2087 ;;Total ram usage:        2 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; This function calls:
  2090 ;;		Nothing
  2091 ;; This function is called by:
  2092 ;;		_initialisation
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text13
  2097  001060                     __ptext13:
  2098                           	opt callstack 0
  2099  001060                     _srand:
  2100                           	opt callstack 29
  2101  001060  C001  F03D         	movff	srand@x,_randx
  2102  001064  C002  F03E         	movff	srand@x+1,_randx+1
  2103  001068  6A3F               	clrf	(_randx+2)^0,c
  2104  00106A  6A40               	clrf	(_randx+3)^0,c
  2105  00106C  0012               	return		;funcret
  2106  00106E                     __end_of_srand:
  2107                           	opt callstack 0
  2108                           
  2109 ;; *************** function _init_serie *****************
  2110 ;; Defined at:
  2111 ;;		line 29 in file "serie.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;		None
  2114 ;; Auto vars:     Size  Location     Type
  2115 ;;		None
  2116 ;; Return value:  Size  Location     Type
  2117 ;;                  1    wreg      void 
  2118 ;; Registers used:
  2119 ;;		wreg, status,2
  2120 ;; Tracked objects:
  2121 ;;		On entry : 0/0
  2122 ;;		On exit  : 0/0
  2123 ;;		Unchanged: 0/0
  2124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2125 ;;      Params:         0       0       0       0       0       0       0
  2126 ;;      Locals:         0       0       0       0       0       0       0
  2127 ;;      Temps:          0       0       0       0       0       0       0
  2128 ;;      Totals:         0       0       0       0       0       0       0
  2129 ;;Total ram usage:        0 bytes
  2130 ;; Hardware stack levels used:    1
  2131 ;; This function calls:
  2132 ;;		Nothing
  2133 ;; This function is called by:
  2134 ;;		_main
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           	psect	text14
  2139  001016                     __ptext14:
  2140                           	opt callstack 0
  2141  001016                     _init_serie:
  2142                           	opt callstack 30
  2143  001016                     
  2144                           ;serie.c: 32: TRISCbits.TRISC7=1;
  2145  001016  8E94               	bsf	148,7,c	;volatile
  2146                           
  2147                           ;serie.c: 33: TRISCbits.TRISC6=1;
  2148  001018  8C94               	bsf	148,6,c	;volatile
  2149  00101A                     
  2150                           ;serie.c: 37: SPBRGH=0x00;
  2151  00101A  0E00               	movlw	0
  2152  00101C  6EB0               	movwf	176,c	;volatile
  2153                           
  2154                           ;serie.c: 38: SPBRG=25;
  2155  00101E  0E19               	movlw	25
  2156  001020  6EAF               	movwf	175,c	;volatile
  2157  001022                     
  2158                           ;serie.c: 39: BAUDCONbits.BRG16=1;
  2159  001022  86B8               	bsf	184,3,c	;volatile
  2160  001024                     
  2161                           ;serie.c: 40: TXSTAbits.BRGH=1;
  2162  001024  84AC               	bsf	172,2,c	;volatile
  2163  001026                     
  2164                           ;serie.c: 43: TXSTAbits.SYNC=0;
  2165  001026  98AC               	bcf	172,4,c	;volatile
  2166  001028                     
  2167                           ;serie.c: 44: TXSTAbits.TXEN=1;
  2168  001028  8AAC               	bsf	172,5,c	;volatile
  2169  00102A                     
  2170                           ;serie.c: 45: RCSTAbits.CREN = 1;
  2171  00102A  88AB               	bsf	171,4,c	;volatile
  2172  00102C                     
  2173                           ;serie.c: 46: RCSTAbits.SPEN=1;
  2174  00102C  8EAB               	bsf	171,7,c	;volatile
  2175                           
  2176                           ;serie.c: 47: ANSEL = 0;
  2177  00102E  0E00               	movlw	0
  2178  001030  6E7E               	movwf	126,c	;volatile
  2179  001032  0012               	return		;funcret
  2180  001034                     __end_of_init_serie:
  2181                           	opt callstack 0
  2182                           
  2183 ;; *************** function _initTabVue *****************
  2184 ;; Defined at:
  2185 ;;		line 146 in file "main.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;  k               2   10[COMRAM] int 
  2190 ;;  i               2    8[COMRAM] int 
  2191 ;; Return value:  Size  Location     Type
  2192 ;;                  1    wreg      void 
  2193 ;; Registers used:
  2194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2195 ;; Tracked objects:
  2196 ;;		On entry : 0/0
  2197 ;;		On exit  : 0/0
  2198 ;;		Unchanged: 0/0
  2199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2200 ;;      Params:         0       0       0       0       0       0       0
  2201 ;;      Locals:         4       0       0       0       0       0       0
  2202 ;;      Temps:          2       0       0       0       0       0       0
  2203 ;;      Totals:         6       0       0       0       0       0       0
  2204 ;;Total ram usage:        6 bytes
  2205 ;; Hardware stack levels used:    1
  2206 ;; Hardware stack levels required when called:    1
  2207 ;; This function calls:
  2208 ;;		___wmul
  2209 ;; This function is called by:
  2210 ;;		_main
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           	psect	text15
  2215  000AD0                     __ptext15:
  2216                           	opt callstack 0
  2217  000AD0                     _initTabVue:
  2218                           	opt callstack 29
  2219  000AD0                     
  2220                           ;main.c: 148: for(int i = 0 ; i < 4 ; i++)
  2221  000AD0  0E00               	movlw	0
  2222  000AD2  6E0A               	movwf	(initTabVue@i+1)^0,c
  2223  000AD4  0E00               	movlw	0
  2224  000AD6  6E09               	movwf	initTabVue@i^0,c
  2225  000AD8                     l1948:
  2226                           
  2227                           ;main.c: 149: {;main.c: 150: for(int k = 0 ; k < 20 ; k++)
  2228  000AD8  0E00               	movlw	0
  2229  000ADA  6E0C               	movwf	(initTabVue@k+1)^0,c
  2230  000ADC  0E00               	movlw	0
  2231  000ADE  6E0B               	movwf	initTabVue@k^0,c
  2232  000AE0                     l1954:
  2233                           
  2234                           ;main.c: 151: {;main.c: 152: m_tabVue[i][k] = 1;
  2235  000AE0  C009  F001         	movff	initTabVue@i,___wmul@multiplier
  2236  000AE4  C00A  F002         	movff	initTabVue@i+1,___wmul@multiplier+1
  2237  000AE8  0E00               	movlw	0
  2238  000AEA  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2239  000AEC  0E15               	movlw	21
  2240  000AEE  6E03               	movwf	___wmul@multiplicand^0,c
  2241  000AF0  ECF8  F007         	call	___wmul	;wreg free
  2242  000AF4  0E00               	movlw	low _m_tabVue
  2243  000AF6  6E07               	movwf	??_initTabVue^0,c
  2244  000AF8  0E01               	movlw	high _m_tabVue
  2245  000AFA  6E08               	movwf	(??_initTabVue+1)^0,c
  2246  000AFC  5001               	movf	?___wmul^0,w,c
  2247  000AFE  2607               	addwf	??_initTabVue^0,f,c
  2248  000B00  5002               	movf	(?___wmul+1)^0,w,c
  2249  000B02  2208               	addwfc	(??_initTabVue+1)^0,f,c
  2250  000B04  500B               	movf	initTabVue@k^0,w,c
  2251  000B06  2407               	addwf	??_initTabVue^0,w,c
  2252  000B08  6ED9               	movwf	fsr2l,c
  2253  000B0A  500C               	movf	(initTabVue@k+1)^0,w,c
  2254  000B0C  2008               	addwfc	(??_initTabVue+1)^0,w,c
  2255  000B0E  6EDA               	movwf	fsr2h,c
  2256  000B10  0E01               	movlw	1
  2257  000B12  6EDF               	movwf	indf2,c
  2258  000B14  4A0B               	infsnz	initTabVue@k^0,f,c
  2259  000B16  2A0C               	incf	(initTabVue@k+1)^0,f,c
  2260  000B18  BE0C               	btfsc	(initTabVue@k+1)^0,7,c
  2261  000B1A  EF98  F005         	goto	u601
  2262  000B1E  500C               	movf	(initTabVue@k+1)^0,w,c
  2263  000B20  E109               	bnz	u600
  2264  000B22  0E14               	movlw	20
  2265  000B24  5C0B               	subwf	initTabVue@k^0,w,c
  2266  000B26  A0D8               	btfss	status,0,c
  2267  000B28  EF98  F005         	goto	u601
  2268  000B2C  EF9A  F005         	goto	u600
  2269  000B30                     u601:
  2270  000B30  EF70  F005         	goto	l1954
  2271  000B34                     u600:
  2272  000B34  4A09               	infsnz	initTabVue@i^0,f,c
  2273  000B36  2A0A               	incf	(initTabVue@i+1)^0,f,c
  2274  000B38  BE0A               	btfsc	(initTabVue@i+1)^0,7,c
  2275  000B3A  EFA8  F005         	goto	u611
  2276  000B3E  500A               	movf	(initTabVue@i+1)^0,w,c
  2277  000B40  E109               	bnz	u610
  2278  000B42  0E04               	movlw	4
  2279  000B44  5C09               	subwf	initTabVue@i^0,w,c
  2280  000B46  A0D8               	btfss	status,0,c
  2281  000B48  EFA8  F005         	goto	u611
  2282  000B4C  EFAA  F005         	goto	u610
  2283  000B50                     u611:
  2284  000B50  EF6C  F005         	goto	l1948
  2285  000B54                     u610:
  2286  000B54  0012               	return		;funcret
  2287  000B56                     __end_of_initTabVue:
  2288                           	opt callstack 0
  2289                           
  2290 ;; *************** function ___wmul *****************
  2291 ;; Defined at:
  2292 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;  multiplier      2    0[COMRAM] unsigned int 
  2295 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  product         2    4[COMRAM] unsigned int 
  2298 ;; Return value:  Size  Location     Type
  2299 ;;                  2    0[COMRAM] unsigned int 
  2300 ;; Registers used:
  2301 ;;		wreg, status,2, status,0, prodl, prodh
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2307 ;;      Params:         4       0       0       0       0       0       0
  2308 ;;      Locals:         2       0       0       0       0       0       0
  2309 ;;      Temps:          0       0       0       0       0       0       0
  2310 ;;      Totals:         6       0       0       0       0       0       0
  2311 ;;Total ram usage:        6 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; This function calls:
  2314 ;;		Nothing
  2315 ;; This function is called by:
  2316 ;;		_initTabVue
  2317 ;;		_rempliMines
  2318 ;;		_metToucheCombien
  2319 ;;		_calculToucheCombien
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text16
  2324  000FF0                     __ptext16:
  2325                           	opt callstack 0
  2326  000FF0                     ___wmul:
  2327                           	opt callstack 29
  2328  000FF0  5001               	movf	___wmul@multiplier^0,w,c
  2329  000FF2  0203               	mulwf	___wmul@multiplicand^0,c
  2330  000FF4  CFF3 F005          	movff	prodl,___wmul@product
  2331  000FF8  CFF4 F006          	movff	prodh,___wmul@product+1
  2332  000FFC  5001               	movf	___wmul@multiplier^0,w,c
  2333  000FFE  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2334  001000  50F3               	movf	243,w,c
  2335  001002  2606               	addwf	(___wmul@product+1)^0,f,c
  2336  001004  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2337  001006  0203               	mulwf	___wmul@multiplicand^0,c
  2338  001008  50F3               	movf	243,w,c
  2339  00100A  2606               	addwf	(___wmul@product+1)^0,f,c
  2340  00100C  C005  F001         	movff	___wmul@product,?___wmul
  2341  001010  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2342  001014  0012               	return		;funcret
  2343  001016                     __end_of___wmul:
  2344                           	opt callstack 0
  2345                           
  2346 ;; *************** function _afficheTabVue *****************
  2347 ;; Defined at:
  2348 ;;		line 126 in file "main.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;		None
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;		None
  2353 ;; Return value:  Size  Location     Type
  2354 ;;                  1    wreg      void 
  2355 ;; Registers used:
  2356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2362 ;;      Params:         0       0       0       0       0       0       0
  2363 ;;      Locals:         0       0       0       0       0       0       0
  2364 ;;      Temps:          0       0       0       0       0       0       0
  2365 ;;      Totals:         0       0       0       0       0       0       0
  2366 ;;Total ram usage:        0 bytes
  2367 ;; Hardware stack levels used:    1
  2368 ;; Hardware stack levels required when called:    5
  2369 ;; This function calls:
  2370 ;;		_lcd_effaceAffichage
  2371 ;;		_lcd_gotoXY
  2372 ;;		_lcd_putMessage
  2373 ;; This function is called by:
  2374 ;;		_main
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377                           
  2378                           	psect	text17
  2379  000D4A                     __ptext17:
  2380                           	opt callstack 0
  2381  000D4A                     _afficheTabVue:
  2382                           	opt callstack 25
  2383  000D4A                     
  2384                           ;main.c: 128: lcd_effaceAffichage();
  2385  000D4A  EC37  F008         	call	_lcd_effaceAffichage	;wreg free
  2386                           
  2387                           ;main.c: 129: lcd_gotoXY(1, 1);
  2388  000D4E  0E01               	movlw	1
  2389  000D50  6E04               	movwf	lcd_gotoXY@y^0,c
  2390  000D52  0E01               	movlw	1
  2391  000D54  ECE0  F005         	call	_lcd_gotoXY
  2392  000D58                     
  2393                           ;main.c: 130: lcd_putMessage(m_tabVue[0]);
  2394  000D58  0E00               	movlw	low _m_tabVue
  2395  000D5A  6E06               	movwf	lcd_putMessage@chaine^0,c
  2396  000D5C  0E01               	movlw	high _m_tabVue
  2397  000D5E  6E07               	movwf	(lcd_putMessage@chaine+1)^0,c
  2398  000D60  EC94  F007         	call	_lcd_putMessage	;wreg free
  2399  000D64                     
  2400                           ;main.c: 131: lcd_gotoXY(1, 2);
  2401  000D64  0E02               	movlw	2
  2402  000D66  6E04               	movwf	lcd_gotoXY@y^0,c
  2403  000D68  0E01               	movlw	1
  2404  000D6A  ECE0  F005         	call	_lcd_gotoXY
  2405                           
  2406                           ;main.c: 132: lcd_putMessage(m_tabVue[1]);
  2407  000D6E  0E15               	movlw	low (_m_tabVue+21)
  2408  000D70  6E06               	movwf	lcd_putMessage@chaine^0,c
  2409  000D72  0E01               	movlw	high (_m_tabVue+21)
  2410  000D74  6E07               	movwf	(lcd_putMessage@chaine+1)^0,c
  2411  000D76  EC94  F007         	call	_lcd_putMessage	;wreg free
  2412  000D7A                     
  2413                           ;main.c: 133: lcd_gotoXY(1, 3);
  2414  000D7A  0E03               	movlw	3
  2415  000D7C  6E04               	movwf	lcd_gotoXY@y^0,c
  2416  000D7E  0E01               	movlw	1
  2417  000D80  ECE0  F005         	call	_lcd_gotoXY
  2418  000D84                     
  2419                           ;main.c: 134: lcd_putMessage(m_tabVue[2]);
  2420  000D84  0E2A               	movlw	low (_m_tabVue+42)
  2421  000D86  6E06               	movwf	lcd_putMessage@chaine^0,c
  2422  000D88  0E01               	movlw	high (_m_tabVue+42)
  2423  000D8A  6E07               	movwf	(lcd_putMessage@chaine+1)^0,c
  2424  000D8C  EC94  F007         	call	_lcd_putMessage	;wreg free
  2425                           
  2426                           ;main.c: 135: lcd_gotoXY(1, 4);
  2427  000D90  0E04               	movlw	4
  2428  000D92  6E04               	movwf	lcd_gotoXY@y^0,c
  2429  000D94  0E01               	movlw	1
  2430  000D96  ECE0  F005         	call	_lcd_gotoXY
  2431  000D9A                     
  2432                           ;main.c: 136: lcd_putMessage(m_tabVue[3]);
  2433  000D9A  0E3F               	movlw	low (_m_tabVue+63)
  2434  000D9C  6E06               	movwf	lcd_putMessage@chaine^0,c
  2435  000D9E  0E01               	movlw	high (_m_tabVue+63)
  2436  000DA0  6E07               	movwf	(lcd_putMessage@chaine+1)^0,c
  2437  000DA2  EC94  F007         	call	_lcd_putMessage	;wreg free
  2438  000DA6  0012               	return		;funcret
  2439  000DA8                     __end_of_afficheTabVue:
  2440                           	opt callstack 0
  2441                           
  2442 ;; *************** function _lcd_putMessage *****************
  2443 ;; Defined at:
  2444 ;;		line 387 in file "Lcd4Lignes.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;  chaine          2    5[COMRAM] PTR const unsigned char 
  2447 ;;		 -> m_tabVue(84), main@afficheNom(21), 
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;  j               1    7[COMRAM] unsigned char 
  2450 ;; Return value:  Size  Location     Type
  2451 ;;                  1    wreg      void 
  2452 ;; Registers used:
  2453 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2459 ;;      Params:         2       0       0       0       0       0       0
  2460 ;;      Locals:         1       0       0       0       0       0       0
  2461 ;;      Temps:          0       0       0       0       0       0       0
  2462 ;;      Totals:         3       0       0       0       0       0       0
  2463 ;;Total ram usage:        3 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    4
  2466 ;; This function calls:
  2467 ;;		_lcd_ecritChar
  2468 ;; This function is called by:
  2469 ;;		_main
  2470 ;;		_afficheTabVue
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text18
  2475  000F28                     __ptext18:
  2476                           	opt callstack 0
  2477  000F28                     _lcd_putMessage:
  2478                           	opt callstack 26
  2479  000F28                     
  2480                           ;Lcd4Lignes.c: 389: unsigned char j;;Lcd4Lignes.c: 391: for(j = 0; chaine[j] != 0; j++)
  2481  000F28  0E00               	movlw	0
  2482  000F2A  6E08               	movwf	lcd_putMessage@j^0,c
  2483  000F2C  EFA2  F007         	goto	l1752
  2484  000F30                     l1748:
  2485                           
  2486                           ;Lcd4Lignes.c: 392: lcd_ecritChar(chaine[j]);
  2487  000F30  5008               	movf	lcd_putMessage@j^0,w,c
  2488  000F32  2406               	addwf	lcd_putMessage@chaine^0,w,c
  2489  000F34  6ED9               	movwf	fsr2l,c
  2490  000F36  0E00               	movlw	0
  2491  000F38  2007               	addwfc	(lcd_putMessage@chaine+1)^0,w,c
  2492  000F3A  6EDA               	movwf	fsr2h,c
  2493  000F3C  50DF               	movf	indf2,w,c
  2494  000F3E  EC4E  F007         	call	_lcd_ecritChar
  2495  000F42  2A08               	incf	lcd_putMessage@j^0,f,c
  2496  000F44                     l1752:
  2497  000F44  5008               	movf	lcd_putMessage@j^0,w,c
  2498  000F46  2406               	addwf	lcd_putMessage@chaine^0,w,c
  2499  000F48  6ED9               	movwf	fsr2l,c
  2500  000F4A  0E00               	movlw	0
  2501  000F4C  2007               	addwfc	(lcd_putMessage@chaine+1)^0,w,c
  2502  000F4E  6EDA               	movwf	fsr2h,c
  2503  000F50  50DF               	movf	indf2,w,c
  2504  000F52  A4D8               	btfss	status,2,c
  2505  000F54  EFAE  F007         	goto	u441
  2506  000F58  EFB0  F007         	goto	u440
  2507  000F5C                     u441:
  2508  000F5C  EF98  F007         	goto	l1748
  2509  000F60                     u440:
  2510  000F60  0012               	return		;funcret
  2511  000F62                     __end_of_lcd_putMessage:
  2512                           	opt callstack 0
  2513                           
  2514 ;; *************** function _lcd_ecritChar *****************
  2515 ;; Defined at:
  2516 ;;		line 359 in file "Lcd4Lignes.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  car             1    wreg     unsigned char 
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  car             1    3[COMRAM] unsigned char 
  2521 ;;  posRam          1    4[COMRAM] unsigned char 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  1    wreg      void 
  2524 ;; Registers used:
  2525 ;;		wreg, status,2, status,0, cstack
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2531 ;;      Params:         0       0       0       0       0       0       0
  2532 ;;      Locals:         2       0       0       0       0       0       0
  2533 ;;      Temps:          0       0       0       0       0       0       0
  2534 ;;      Totals:         2       0       0       0       0       0       0
  2535 ;;Total ram usage:        2 bytes
  2536 ;; Hardware stack levels used:    1
  2537 ;; Hardware stack levels required when called:    3
  2538 ;; This function calls:
  2539 ;;		_lcd_wrCom
  2540 ;;		_lcd_wrData
  2541 ;; This function is called by:
  2542 ;;		_lcd_putMessage
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           	psect	text19
  2547  000E9C                     __ptext19:
  2548                           	opt callstack 0
  2549  000E9C                     _lcd_ecritChar:
  2550                           	opt callstack 26
  2551                           
  2552                           ;incstack = 0
  2553                           ;lcd_ecritChar@car stored from wreg
  2554  000E9C  6E04               	movwf	lcd_ecritChar@car^0,c
  2555  000E9E                     
  2556                           ;Lcd4Lignes.c: 361: unsigned char posRam;;Lcd4Lignes.c: 363: posRam = lcd_wrData(car);
  2557  000E9E  5004               	movf	lcd_ecritChar@car^0,w,c
  2558  000EA0  ECCD  F007         	call	_lcd_wrData
  2559  000EA4  6E05               	movwf	lcd_ecritChar@posRam^0,c
  2560                           
  2561                           ;Lcd4Lignes.c: 364: switch(posRam)
  2562  000EA6  EF64  F007         	goto	l1714
  2563  000EAA                     l1706:
  2564                           
  2565                           ;Lcd4Lignes.c: 367: lcd_wrCom(0xC0|0x80);
  2566  000EAA  0EC0               	movlw	192
  2567  000EAC  EC45  F006         	call	_lcd_wrCom
  2568                           
  2569                           ;Lcd4Lignes.c: 368: break;
  2570  000EB0  EF73  F007         	goto	l219
  2571  000EB4                     l1708:
  2572                           
  2573                           ;Lcd4Lignes.c: 370: lcd_wrCom(0x94|0x80);
  2574  000EB4  0E94               	movlw	148
  2575  000EB6  EC45  F006         	call	_lcd_wrCom
  2576                           
  2577                           ;Lcd4Lignes.c: 371: break;
  2578  000EBA  EF73  F007         	goto	l219
  2579  000EBE                     l1710:
  2580                           
  2581                           ;Lcd4Lignes.c: 373: lcd_wrCom(0xD4|0x80);
  2582  000EBE  0ED4               	movlw	212
  2583  000EC0  EC45  F006         	call	_lcd_wrCom
  2584                           
  2585                           ;Lcd4Lignes.c: 374: break;
  2586  000EC4  EF73  F007         	goto	l219
  2587  000EC8                     l1714:
  2588  000EC8  5005               	movf	lcd_ecritChar@posRam^0,w,c
  2589                           
  2590                           ; Switch size 1, requested type "simple"
  2591                           ; Number of cases is 3, Range of values is 148 to 212
  2592                           ; switch strategies available:
  2593                           ; Name         Instructions Cycles
  2594                           ; simple_byte           10     6 (average)
  2595                           ;	Chosen strategy is simple_byte
  2596  000ECA  0A94               	xorlw	148	; case 148
  2597  000ECC  B4D8               	btfsc	status,2,c
  2598  000ECE  EF55  F007         	goto	l1706
  2599  000ED2  0A54               	xorlw	84	; case 192
  2600  000ED4  B4D8               	btfsc	status,2,c
  2601  000ED6  EF5F  F007         	goto	l1710
  2602  000EDA  0A14               	xorlw	20	; case 212
  2603  000EDC  B4D8               	btfsc	status,2,c
  2604  000EDE  EF5A  F007         	goto	l1708
  2605  000EE2  EF73  F007         	goto	l219
  2606  000EE6                     l219:
  2607  000EE6  0012               	return		;funcret
  2608  000EE8                     __end_of_lcd_ecritChar:
  2609                           	opt callstack 0
  2610                           
  2611 ;; *************** function _lcd_wrData *****************
  2612 ;; Defined at:
  2613 ;;		line 188 in file "Lcd4Lignes.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  caractere       1    wreg     unsigned char 
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;  caractere       1    2[COMRAM] unsigned char 
  2618 ;; Return value:  Size  Location     Type
  2619 ;;                  1    wreg      unsigned char 
  2620 ;; Registers used:
  2621 ;;		wreg, status,2, status,0, cstack
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2627 ;;      Params:         0       0       0       0       0       0       0
  2628 ;;      Locals:         1       0       0       0       0       0       0
  2629 ;;      Temps:          0       0       0       0       0       0       0
  2630 ;;      Totals:         1       0       0       0       0       0       0
  2631 ;;Total ram usage:        1 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; Hardware stack levels required when called:    2
  2634 ;; This function calls:
  2635 ;;		_lcd_busy
  2636 ;;		_lcd_ecrireDonnees
  2637 ;;		_lcd_strobeEnableBit
  2638 ;; This function is called by:
  2639 ;;		_lcd_ecritChar
  2640 ;;		_lcd_initCGRam
  2641 ;;		_lcd_effaceChar
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text20
  2646  000F9A                     __ptext20:
  2647                           	opt callstack 0
  2648  000F9A                     _lcd_wrData:
  2649                           	opt callstack 26
  2650                           
  2651                           ;incstack = 0
  2652                           ;lcd_wrData@caractere stored from wreg
  2653  000F9A  6E03               	movwf	lcd_wrData@caractere^0,c
  2654  000F9C                     
  2655                           ;Lcd4Lignes.c: 190: lcd_busy();
  2656  000F9C  ECB1  F007         	call	_lcd_busy	;wreg free
  2657  000FA0                     
  2658                           ;Lcd4Lignes.c: 191: TRISD = 0b00000000;
  2659  000FA0  0E00               	movlw	0
  2660  000FA2  6E95               	movwf	149,c	;volatile
  2661  000FA4                     
  2662                           ;Lcd4Lignes.c: 194: PORTAbits.RA0 = 1;
  2663  000FA4  8080               	bsf	128,0,c	;volatile
  2664  000FA6                     
  2665                           ;Lcd4Lignes.c: 195: PORTAbits.RA1 = 0;
  2666  000FA6  9280               	bcf	128,1,c	;volatile
  2667  000FA8                     
  2668                           ;Lcd4Lignes.c: 197: lcd_ecrireDonnees(caractere >> 4);
  2669  000FA8  3803               	swapf	lcd_wrData@caractere^0,w,c
  2670  000FAA  0B0F               	andlw	15
  2671  000FAC  EC26  F008         	call	_lcd_ecrireDonnees
  2672  000FB0                     
  2673                           ;Lcd4Lignes.c: 198: lcd_strobeEnableBit();
  2674  000FB0  EC42  F008         	call	_lcd_strobeEnableBit	;wreg free
  2675  000FB4                     
  2676                           ;Lcd4Lignes.c: 201: lcd_ecrireDonnees(caractere);
  2677  000FB4  5003               	movf	lcd_wrData@caractere^0,w,c
  2678  000FB6  EC26  F008         	call	_lcd_ecrireDonnees
  2679  000FBA                     
  2680                           ;Lcd4Lignes.c: 202: lcd_strobeEnableBit();
  2681  000FBA  EC42  F008         	call	_lcd_strobeEnableBit	;wreg free
  2682  000FBE                     
  2683                           ;Lcd4Lignes.c: 205: TRISD = 0b00001111;
  2684  000FBE  0E0F               	movlw	15
  2685  000FC0  6E95               	movwf	149,c	;volatile
  2686  000FC2                     
  2687                           ;Lcd4Lignes.c: 206: _delay((unsigned long)((2)*(1000000/4000000.0)));
  2688                           ;Lcd4Lignes.c: 207: return(lcd_busy());
  2689  000FC2  ECB1  F007         	call	_lcd_busy	;wreg free
  2690  000FC6  0012               	return		;funcret
  2691  000FC8                     __end_of_lcd_wrData:
  2692                           	opt callstack 0
  2693                           
  2694 ;; *************** function _lcd_gotoXY *****************
  2695 ;; Defined at:
  2696 ;;		line 314 in file "Lcd4Lignes.c"
  2697 ;; Parameters:    Size  Location     Type
  2698 ;;  x               1    wreg     unsigned char 
  2699 ;;  y               1    3[COMRAM] unsigned char 
  2700 ;; Auto vars:     Size  Location     Type
  2701 ;;  x               1    4[COMRAM] unsigned char 
  2702 ;; Return value:  Size  Location     Type
  2703 ;;                  1    wreg      void 
  2704 ;; Registers used:
  2705 ;;		wreg, status,2, status,0, cstack
  2706 ;; Tracked objects:
  2707 ;;		On entry : 0/0
  2708 ;;		On exit  : 0/0
  2709 ;;		Unchanged: 0/0
  2710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2711 ;;      Params:         1       0       0       0       0       0       0
  2712 ;;      Locals:         1       0       0       0       0       0       0
  2713 ;;      Temps:          0       0       0       0       0       0       0
  2714 ;;      Totals:         2       0       0       0       0       0       0
  2715 ;;Total ram usage:        2 bytes
  2716 ;; Hardware stack levels used:    1
  2717 ;; Hardware stack levels required when called:    3
  2718 ;; This function calls:
  2719 ;;		_lcd_wrCom
  2720 ;; This function is called by:
  2721 ;;		_main
  2722 ;;		_afficheTabVue
  2723 ;;		_lcd_effaceLigne
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           	psect	text21
  2728  000BC0                     __ptext21:
  2729                           	opt callstack 0
  2730  000BC0                     _lcd_gotoXY:
  2731                           	opt callstack 27
  2732                           
  2733                           ;incstack = 0
  2734                           ;lcd_gotoXY@x stored from wreg
  2735  000BC0  6E05               	movwf	lcd_gotoXY@x^0,c
  2736  000BC2                     
  2737                           ;Lcd4Lignes.c: 316: switch(y)
  2738  000BC2  EFFF  F005         	goto	l1744
  2739  000BC6                     l1734:
  2740                           
  2741                           ;Lcd4Lignes.c: 319: lcd_wrCom((x-1+0x80)|0x80);
  2742  000BC6  5005               	movf	lcd_gotoXY@x^0,w,c
  2743  000BC8  0F7F               	addlw	127
  2744  000BCA  0980               	iorlw	128
  2745  000BCC  EC45  F006         	call	_lcd_wrCom
  2746                           
  2747                           ;Lcd4Lignes.c: 320: break;
  2748  000BD0  EF12  F006         	goto	l208
  2749  000BD4                     l1736:
  2750                           
  2751                           ;Lcd4Lignes.c: 322: lcd_wrCom((x-1+0xC0)|0x80);
  2752  000BD4  5005               	movf	lcd_gotoXY@x^0,w,c
  2753  000BD6  0FBF               	addlw	191
  2754  000BD8  0980               	iorlw	128
  2755  000BDA  EC45  F006         	call	_lcd_wrCom
  2756                           
  2757                           ;Lcd4Lignes.c: 323: break;
  2758  000BDE  EF12  F006         	goto	l208
  2759  000BE2                     l1738:
  2760                           
  2761                           ;Lcd4Lignes.c: 325: lcd_wrCom((x-1+0x94)|0x80);
  2762  000BE2  5005               	movf	lcd_gotoXY@x^0,w,c
  2763  000BE4  0F93               	addlw	147
  2764  000BE6  0980               	iorlw	128
  2765  000BE8  EC45  F006         	call	_lcd_wrCom
  2766                           
  2767                           ;Lcd4Lignes.c: 326: break;
  2768  000BEC  EF12  F006         	goto	l208
  2769  000BF0                     l1740:
  2770                           
  2771                           ;Lcd4Lignes.c: 328: lcd_wrCom((x-1+0xD4)|0x80);
  2772  000BF0  5005               	movf	lcd_gotoXY@x^0,w,c
  2773  000BF2  0FD3               	addlw	211
  2774  000BF4  0980               	iorlw	128
  2775  000BF6  EC45  F006         	call	_lcd_wrCom
  2776                           
  2777                           ;Lcd4Lignes.c: 329: break;
  2778  000BFA  EF12  F006         	goto	l208
  2779  000BFE                     l1744:
  2780  000BFE  5004               	movf	lcd_gotoXY@y^0,w,c
  2781                           
  2782                           ; Switch size 1, requested type "simple"
  2783                           ; Number of cases is 4, Range of values is 1 to 4
  2784                           ; switch strategies available:
  2785                           ; Name         Instructions Cycles
  2786                           ; simple_byte           13     7 (average)
  2787                           ;	Chosen strategy is simple_byte
  2788  000C00  0A01               	xorlw	1	; case 1
  2789  000C02  B4D8               	btfsc	status,2,c
  2790  000C04  EFE3  F005         	goto	l1734
  2791  000C08  0A03               	xorlw	3	; case 2
  2792  000C0A  B4D8               	btfsc	status,2,c
  2793  000C0C  EFEA  F005         	goto	l1736
  2794  000C10  0A01               	xorlw	1	; case 3
  2795  000C12  B4D8               	btfsc	status,2,c
  2796  000C14  EFF1  F005         	goto	l1738
  2797  000C18  0A07               	xorlw	7	; case 4
  2798  000C1A  B4D8               	btfsc	status,2,c
  2799  000C1C  EFF8  F005         	goto	l1740
  2800  000C20  EF12  F006         	goto	l208
  2801  000C24                     l208:
  2802  000C24  0012               	return		;funcret
  2803  000C26                     __end_of_lcd_gotoXY:
  2804                           	opt callstack 0
  2805                           
  2806 ;; *************** function _lcd_effaceAffichage *****************
  2807 ;; Defined at:
  2808 ;;		line 276 in file "Lcd4Lignes.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;		None
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;		None
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  1    wreg      void 
  2815 ;; Registers used:
  2816 ;;		wreg, status,2, status,0, cstack
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2822 ;;      Params:         0       0       0       0       0       0       0
  2823 ;;      Locals:         0       0       0       0       0       0       0
  2824 ;;      Temps:          0       0       0       0       0       0       0
  2825 ;;      Totals:         0       0       0       0       0       0       0
  2826 ;;Total ram usage:        0 bytes
  2827 ;; Hardware stack levels used:    1
  2828 ;; Hardware stack levels required when called:    3
  2829 ;; This function calls:
  2830 ;;		_lcd_wrCom
  2831 ;; This function is called by:
  2832 ;;		_afficheTabVue
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           	psect	text22
  2837  00106E                     __ptext22:
  2838                           	opt callstack 0
  2839  00106E                     _lcd_effaceAffichage:
  2840                           	opt callstack 26
  2841  00106E                     
  2842                           ;Lcd4Lignes.c: 278: lcd_wrCom(0x01);
  2843  00106E  0E01               	movlw	1
  2844  001070  EC45  F006         	call	_lcd_wrCom
  2845                           
  2846                           ;Lcd4Lignes.c: 279: lcd_wrCom(0x80);
  2847  001074  0E80               	movlw	128
  2848  001076  EC45  F006         	call	_lcd_wrCom
  2849  00107A  0012               	return		;funcret
  2850  00107C                     __end_of_lcd_effaceAffichage:
  2851                           	opt callstack 0
  2852                           
  2853 ;; *************** function _lcd_wrCom *****************
  2854 ;; Defined at:
  2855 ;;		line 156 in file "Lcd4Lignes.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;  commande        1    wreg     unsigned char 
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;  commande        1    2[COMRAM] unsigned char 
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      unsigned char 
  2862 ;; Registers used:
  2863 ;;		wreg, status,2, status,0, cstack
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2869 ;;      Params:         0       0       0       0       0       0       0
  2870 ;;      Locals:         1       0       0       0       0       0       0
  2871 ;;      Temps:          0       0       0       0       0       0       0
  2872 ;;      Totals:         1       0       0       0       0       0       0
  2873 ;;Total ram usage:        1 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    2
  2876 ;; This function calls:
  2877 ;;		_lcd_busy
  2878 ;;		_lcd_ecrireDonnees
  2879 ;;		_lcd_strobeEnableBit
  2880 ;; This function is called by:
  2881 ;;		_lcd_init
  2882 ;;		_lcd_effaceAffichage
  2883 ;;		_lcd_curseurHome
  2884 ;;		_lcd_gotoXY
  2885 ;;		_lcd_ecritChar
  2886 ;;		_lcd_initCGRam
  2887 ;;		_lcd_cacheCurseur
  2888 ;;		_lcd_montreCurseur
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           	psect	text23
  2893  000C8A                     __ptext23:
  2894                           	opt callstack 0
  2895  000C8A                     _lcd_wrCom:
  2896                           	opt callstack 26
  2897                           
  2898                           ;incstack = 0
  2899                           ;lcd_wrCom@commande stored from wreg
  2900  000C8A  6E03               	movwf	lcd_wrCom@commande^0,c
  2901  000C8C                     
  2902                           ;Lcd4Lignes.c: 158: lcd_busy();
  2903  000C8C  ECB1  F007         	call	_lcd_busy	;wreg free
  2904  000C90                     
  2905                           ;Lcd4Lignes.c: 160: TRISD = 0b00000000;
  2906  000C90  0E00               	movlw	0
  2907  000C92  6E95               	movwf	149,c	;volatile
  2908  000C94                     
  2909                           ;Lcd4Lignes.c: 163: PORTAbits.RA0 = 0;
  2910  000C94  9080               	bcf	128,0,c	;volatile
  2911  000C96                     
  2912                           ;Lcd4Lignes.c: 164: PORTAbits.RA1 = 0;
  2913  000C96  9280               	bcf	128,1,c	;volatile
  2914  000C98                     
  2915                           ;Lcd4Lignes.c: 166: lcd_ecrireDonnees(commande >> 4);
  2916  000C98  3803               	swapf	lcd_wrCom@commande^0,w,c
  2917  000C9A  0B0F               	andlw	15
  2918  000C9C  EC26  F008         	call	_lcd_ecrireDonnees
  2919  000CA0                     
  2920                           ;Lcd4Lignes.c: 167: lcd_strobeEnableBit();
  2921  000CA0  EC42  F008         	call	_lcd_strobeEnableBit	;wreg free
  2922  000CA4                     
  2923                           ;Lcd4Lignes.c: 170: lcd_ecrireDonnees(commande);
  2924  000CA4  5003               	movf	lcd_wrCom@commande^0,w,c
  2925  000CA6  EC26  F008         	call	_lcd_ecrireDonnees
  2926  000CAA                     
  2927                           ;Lcd4Lignes.c: 171: lcd_strobeEnableBit();
  2928  000CAA  EC42  F008         	call	_lcd_strobeEnableBit	;wreg free
  2929  000CAE                     
  2930                           ;Lcd4Lignes.c: 172: _delay((unsigned long)((40)*(1000000/4000000.0)));
  2931  000CAE  0E03               	movlw	3
  2932  000CB0                     u787:
  2933  000CB0  2EE8               	decfsz	wreg,f,c
  2934  000CB2  D7FE               	bra	u787
  2935  000CB4  F000               	nop	
  2936  000CB6                     
  2937                           ;Lcd4Lignes.c: 174: if ((commande == 0x01) || commande == 0x02)
  2938  000CB6  0403               	decf	lcd_wrCom@commande^0,w,c
  2939  000CB8  B4D8               	btfsc	status,2,c
  2940  000CBA  EF61  F006         	goto	u401
  2941  000CBE  EF63  F006         	goto	u400
  2942  000CC2                     u401:
  2943  000CC2  EF6C  F006         	goto	l1664
  2944  000CC6                     u400:
  2945  000CC6  0E02               	movlw	2
  2946  000CC8  1803               	xorwf	lcd_wrCom@commande^0,w,c
  2947  000CCA  A4D8               	btfss	status,2,c
  2948  000CCC  EF6A  F006         	goto	u411
  2949  000CD0  EF6C  F006         	goto	u410
  2950  000CD4                     u411:
  2951  000CD4  EF71  F006         	goto	l1666
  2952  000CD8                     u410:
  2953  000CD8                     l1664:
  2954                           
  2955                           ;Lcd4Lignes.c: 175: _delay((unsigned long)((2)*(1000000/4000.0)));
  2956  000CD8  0EA6               	movlw	166
  2957  000CDA                     u797:
  2958  000CDA  2EE8               	decfsz	wreg,f,c
  2959  000CDC  D7FE               	bra	u797
  2960  000CDE  F000 F000          	nop2	
  2961  000CE2                     l1666:
  2962                           
  2963                           ;Lcd4Lignes.c: 177: TRISD = 0b00001111;
  2964  000CE2  0E0F               	movlw	15
  2965  000CE4  6E95               	movwf	149,c	;volatile
  2966  000CE6                     
  2967                           ;Lcd4Lignes.c: 179: return(lcd_busy());;	Return value of _lcd_wrCom is never used
  2968  000CE6  ECB1  F007         	call	_lcd_busy	;wreg free
  2969  000CEA  0012               	return		;funcret
  2970  000CEC                     __end_of_lcd_wrCom:
  2971                           	opt callstack 0
  2972                           
  2973 ;; *************** function _lcd_strobeEnableBit *****************
  2974 ;; Defined at:
  2975 ;;		line 431 in file "Lcd4Lignes.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;		None
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;		None
  2980 ;; Return value:  Size  Location     Type
  2981 ;;                  1    wreg      void 
  2982 ;; Registers used:
  2983 ;;		None
  2984 ;; Tracked objects:
  2985 ;;		On entry : 0/0
  2986 ;;		On exit  : 0/0
  2987 ;;		Unchanged: 0/0
  2988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2989 ;;      Params:         0       0       0       0       0       0       0
  2990 ;;      Locals:         0       0       0       0       0       0       0
  2991 ;;      Temps:          0       0       0       0       0       0       0
  2992 ;;      Totals:         0       0       0       0       0       0       0
  2993 ;;Total ram usage:        0 bytes
  2994 ;; Hardware stack levels used:    1
  2995 ;; This function calls:
  2996 ;;		Nothing
  2997 ;; This function is called by:
  2998 ;;		_lcd_wrCom
  2999 ;;		_lcd_wrData
  3000 ;;		_lcd_resetSequence
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           	psect	text24
  3005  001084                     __ptext24:
  3006                           	opt callstack 0
  3007  001084                     _lcd_strobeEnableBit:
  3008                           	opt callstack 27
  3009  001084                     
  3010                           ;Lcd4Lignes.c: 433: PORTAbits.RA2 = 1;
  3011  001084  8480               	bsf	128,2,c	;volatile
  3012                           
  3013                           ;Lcd4Lignes.c: 434: __nop();
  3014  001086  F000               	nop	
  3015                           
  3016                           ;Lcd4Lignes.c: 435: PORTAbits.RA2 = 0;
  3017  001088  9480               	bcf	128,2,c	;volatile
  3018  00108A  0012               	return		;funcret
  3019  00108C                     __end_of_lcd_strobeEnableBit:
  3020                           	opt callstack 0
  3021                           
  3022 ;; *************** function _lcd_ecrireDonnees *****************
  3023 ;; Defined at:
  3024 ;;		line 107 in file "Lcd4Lignes.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;  donnee          1    wreg     unsigned char 
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;  donnee          1    1[COMRAM] unsigned char 
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      void 
  3031 ;; Registers used:
  3032 ;;		wreg, status,2, status,0
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3038 ;;      Params:         0       0       0       0       0       0       0
  3039 ;;      Locals:         1       0       0       0       0       0       0
  3040 ;;      Temps:          1       0       0       0       0       0       0
  3041 ;;      Totals:         2       0       0       0       0       0       0
  3042 ;;Total ram usage:        2 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; This function calls:
  3045 ;;		Nothing
  3046 ;; This function is called by:
  3047 ;;		_lcd_wrCom
  3048 ;;		_lcd_wrData
  3049 ;;		_lcd_resetSequence
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           	psect	text25
  3054  00104C                     __ptext25:
  3055                           	opt callstack 0
  3056  00104C                     _lcd_ecrireDonnees:
  3057                           	opt callstack 27
  3058                           
  3059                           ;incstack = 0
  3060                           ;lcd_ecrireDonnees@donnee stored from wreg
  3061  00104C  6E02               	movwf	lcd_ecrireDonnees@donnee^0,c
  3062  00104E                     
  3063                           ;Lcd4Lignes.c: 110: PORTD = (donnee & 0x0F) | (PORTD & 0xF0);
  3064  00104E  CF83 F001          	movff	3971,??_lcd_ecrireDonnees	;volatile
  3065  001052  0EF0               	movlw	240
  3066  001054  1601               	andwf	??_lcd_ecrireDonnees^0,f,c
  3067  001056  5002               	movf	lcd_ecrireDonnees@donnee^0,w,c
  3068  001058  0B0F               	andlw	15
  3069  00105A  1001               	iorwf	??_lcd_ecrireDonnees^0,w,c
  3070  00105C  6E83               	movwf	131,c	;volatile
  3071  00105E  0012               	return		;funcret
  3072  001060                     __end_of_lcd_ecrireDonnees:
  3073                           	opt callstack 0
  3074                           
  3075 ;; *************** function _lcd_busy *****************
  3076 ;; Defined at:
  3077 ;;		line 124 in file "Lcd4Lignes.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;		None
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  adresse         1    1[COMRAM] unsigned char 
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  1    wreg      unsigned char 
  3084 ;; Registers used:
  3085 ;;		wreg, status,2, status,0, cstack
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3091 ;;      Params:         0       0       0       0       0       0       0
  3092 ;;      Locals:         1       0       0       0       0       0       0
  3093 ;;      Temps:          1       0       0       0       0       0       0
  3094 ;;      Totals:         2       0       0       0       0       0       0
  3095 ;;Total ram usage:        2 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; Hardware stack levels required when called:    1
  3098 ;; This function calls:
  3099 ;;		_lcd_lireDonnees
  3100 ;; This function is called by:
  3101 ;;		_lcd_wrCom
  3102 ;;		_lcd_wrData
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           	psect	text26
  3107  000F62                     __ptext26:
  3108                           	opt callstack 0
  3109  000F62                     _lcd_busy:
  3110                           	opt callstack 26
  3111  000F62                     
  3112                           ;Lcd4Lignes.c: 126: unsigned char adresse;;Lcd4Lignes.c: 128: PORTAbits.RA0 = 0;
  3113  000F62  9080               	bcf	128,0,c	;volatile
  3114                           
  3115                           ;Lcd4Lignes.c: 129: PORTAbits.RA1 = 1;
  3116  000F64  8280               	bsf	128,1,c	;volatile
  3117  000F66                     l170:
  3118                           
  3119                           ;Lcd4Lignes.c: 132: {;Lcd4Lignes.c: 133: PORTAbits.RA2 = 1;
  3120  000F66  8480               	bsf	128,2,c	;volatile
  3121                           
  3122                           ;Lcd4Lignes.c: 134: __nop();
  3123  000F68  F000               	nop	
  3124  000F6A                     
  3125                           ;Lcd4Lignes.c: 135: adresse = lcd_lireDonnees() << 4;
  3126  000F6A  EC46  F008         	call	_lcd_lireDonnees	;wreg free
  3127  000F6E  6E01               	movwf	??_lcd_busy^0,c
  3128  000F70  3801               	swapf	??_lcd_busy^0,w,c
  3129  000F72  0BF0               	andlw	240
  3130  000F74  6E02               	movwf	lcd_busy@adresse^0,c
  3131  000F76                     
  3132                           ;Lcd4Lignes.c: 136: PORTAbits.RA2 = 0;
  3133  000F76  9480               	bcf	128,2,c	;volatile
  3134  000F78                     
  3135                           ;Lcd4Lignes.c: 138: PORTAbits.RA2 = 1;
  3136  000F78  8480               	bsf	128,2,c	;volatile
  3137  000F7A                     
  3138                           ;Lcd4Lignes.c: 139: __nop();
  3139  000F7A  F000               	nop	
  3140                           
  3141                           ;Lcd4Lignes.c: 140: adresse |= lcd_lireDonnees();
  3142  000F7C  EC46  F008         	call	_lcd_lireDonnees	;wreg free
  3143  000F80  1202               	iorwf	lcd_busy@adresse^0,f,c
  3144  000F82                     
  3145                           ;Lcd4Lignes.c: 141: PORTAbits.RA2 = 0;
  3146  000F82  9480               	bcf	128,2,c	;volatile
  3147  000F84                     
  3148                           ;Lcd4Lignes.c: 143: };Lcd4Lignes.c: 144: while(adresse&0x80);
  3149  000F84  BE02               	btfsc	lcd_busy@adresse^0,7,c
  3150  000F86  EFC7  F007         	goto	u391
  3151  000F8A  EFC9  F007         	goto	u390
  3152  000F8E                     u391:
  3153  000F8E  EFB3  F007         	goto	l170
  3154  000F92                     u390:
  3155  000F92                     
  3156                           ;Lcd4Lignes.c: 146: PORTAbits.RA1 = 0;
  3157  000F92  9280               	bcf	128,1,c	;volatile
  3158  000F94                     
  3159                           ;Lcd4Lignes.c: 147: return(adresse&0x7f);
  3160  000F94  5002               	movf	lcd_busy@adresse^0,w,c
  3161  000F96  0B7F               	andlw	127
  3162  000F98  0012               	return		;funcret
  3163  000F9A                     __end_of_lcd_busy:
  3164                           	opt callstack 0
  3165                           
  3166 ;; *************** function _lcd_lireDonnees *****************
  3167 ;; Defined at:
  3168 ;;		line 93 in file "Lcd4Lignes.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;		None
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;		None
  3173 ;; Return value:  Size  Location     Type
  3174 ;;                  1    wreg      unsigned char 
  3175 ;; Registers used:
  3176 ;;		wreg, status,2, status,0
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3182 ;;      Params:         0       0       0       0       0       0       0
  3183 ;;      Locals:         0       0       0       0       0       0       0
  3184 ;;      Temps:          0       0       0       0       0       0       0
  3185 ;;      Totals:         0       0       0       0       0       0       0
  3186 ;;Total ram usage:        0 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; This function calls:
  3189 ;;		Nothing
  3190 ;; This function is called by:
  3191 ;;		_lcd_busy
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           	psect	text27
  3196  00108C                     __ptext27:
  3197                           	opt callstack 0
  3198  00108C                     _lcd_lireDonnees:
  3199                           	opt callstack 26
  3200  00108C                     
  3201                           ;Lcd4Lignes.c: 96: return (PORTD & 0x0f);
  3202  00108C  5083               	movf	131,w,c	;volatile
  3203  00108E  0B0F               	andlw	15
  3204  001090  0012               	return		;funcret
  3205  001092                     __end_of_lcd_lireDonnees:
  3206                           	opt callstack 0
  3207                           
  3208                           	psect	rparam
  3209  0000                     tosu	equ	0xFFF
  3210                           tosh	equ	0xFFE
  3211                           tosl	equ	0xFFD
  3212                           stkptr	equ	0xFFC
  3213                           pclatu	equ	0xFFB
  3214                           pclath	equ	0xFFA
  3215                           pcl	equ	0xFF9
  3216                           tblptru	equ	0xFF8
  3217                           tblptrh	equ	0xFF7
  3218                           tblptrl	equ	0xFF6
  3219                           tablat	equ	0xFF5
  3220                           prodh	equ	0xFF4
  3221                           prodl	equ	0xFF3
  3222                           indf0	equ	0xFEF
  3223                           postinc0	equ	0xFEE
  3224                           postdec0	equ	0xFED
  3225                           preinc0	equ	0xFEC
  3226                           plusw0	equ	0xFEB
  3227                           fsr0h	equ	0xFEA
  3228                           fsr0l	equ	0xFE9
  3229                           wreg	equ	0xFE8
  3230                           indf1	equ	0xFE7
  3231                           postinc1	equ	0xFE6
  3232                           postdec1	equ	0xFE5
  3233                           preinc1	equ	0xFE4
  3234                           plusw1	equ	0xFE3
  3235                           fsr1h	equ	0xFE2
  3236                           fsr1l	equ	0xFE1
  3237                           bsr	equ	0xFE0
  3238                           indf2	equ	0xFDF
  3239                           postinc2	equ	0xFDE
  3240                           postdec2	equ	0xFDD
  3241                           preinc2	equ	0xFDC
  3242                           plusw2	equ	0xFDB
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    21
    Data        68
    BSS         168
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     60      64
    BANK0           160     88     152
    BANK1           256      0     168
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    lcd_putMessage@chaine	PTR const unsigned char  size(2) Largest target is 84
		 -> m_tabVue(BANK1[84]), main@afficheNom(COMRAM[21]), 


Critical Paths under _main in COMRAM

    _main->_metToucheCombien
    _rempliMines->___awmod
    _rand->___lmul
    ___awmod->_rand
    _metToucheCombien->_calculToucheCombien
    _calculToucheCombien->___wmul
    _lcd_init->_lcd_initCGRam
    _lcd_resetSequence->_lcd_ecrireDonnees
    _lcd_initCGRam->_lcd_wrCom
    _lcd_initCGRam->_lcd_wrData
    _lcd_curseurHome->_lcd_wrCom
    _initialisation->_srand
    _initTabVue->___wmul
    _afficheTabVue->_lcd_putMessage
    _lcd_putMessage->_lcd_ecritChar
    _lcd_ecritChar->_lcd_wrCom
    _lcd_ecritChar->_lcd_wrData
    _lcd_wrData->_lcd_busy
    _lcd_wrData->_lcd_ecrireDonnees
    _lcd_gotoXY->_lcd_wrCom
    _lcd_effaceAffichage->_lcd_wrCom
    _lcd_wrCom->_lcd_busy
    _lcd_wrCom->_lcd_ecrireDonnees

Critical Paths under _main in BANK0

    _main->_rempliMines

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0   10388
                                             29 COMRAM    31    31      0
                      _afficheTabVue
                         _initTabVue
                         _init_serie
                     _initialisation
                         _lcd_gotoXY
                           _lcd_init
                     _lcd_putMessage
                   _metToucheCombien
                        _rempliMines
                           _testEtat
 ---------------------------------------------------------------------------------
 (1) _testEtat                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rempliMines                                         93    91      2    2298
                                             20 COMRAM     5     3      2
                                              0 BANK0     88    88      0
                            ___awmod
                             ___wmul
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 2     0      2     370
                                             12 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                             14 COMRAM     6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _metToucheCombien                                     7     7      0    2663
                                             22 COMRAM     7     7      0
                             ___wmul
                _calculToucheCombien
 ---------------------------------------------------------------------------------
 (2) _calculToucheCombien                                 16    12      4    1467
                                              6 COMRAM    16    12      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     738
                      _lcd_initCGRam
                  _lcd_resetSequence
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (2) _lcd_resetSequence                                    1     1      0      22
                                              2 COMRAM     1     1      0
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (2) _lcd_initCGRam                                        4     4      0     560
                                              3 COMRAM     4     4      0
                    _lcd_curseurHome
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (3) _lcd_curseurHome                                      0     0      0     156
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (1) _initialisation                                       0     0      0      98
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _init_serie                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTabVue                                           6     6      0    1107
                                              6 COMRAM     6     6      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     971
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _afficheTabVue                                        0     0      0    1737
                _lcd_effaceAffichage
                         _lcd_gotoXY
                     _lcd_putMessage
 ---------------------------------------------------------------------------------
 (1) _lcd_putMessage                                       3     1      2     783
                                              5 COMRAM     3     1      2
                      _lcd_ecritChar
 ---------------------------------------------------------------------------------
 (2) _lcd_ecritChar                                        2     2      0     313
                                              3 COMRAM     2     2      0
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (3) _lcd_wrData                                           1     1      0     112
                                              2 COMRAM     1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoXY                                           2     1      1     798
                                              3 COMRAM     2     1      1
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (2) _lcd_effaceAffichage                                  0     0      0     156
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (3) _lcd_wrCom                                            1     1      0     156
                                              2 COMRAM     1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (4) _lcd_strobeEnableBit                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _lcd_ecrireDonnees                                    2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _lcd_busy                                             2     2      0      46
                                              0 COMRAM     2     2      0
                    _lcd_lireDonnees
 ---------------------------------------------------------------------------------
 (5) _lcd_lireDonnees                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _afficheTabVue
     _lcd_effaceAffichage
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_gotoXY
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_putMessage
       _lcd_ecritChar
         _lcd_wrCom
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
         _lcd_wrData
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
   _initTabVue
     ___wmul
   _init_serie
   _initialisation
     _srand
   _lcd_gotoXY
     _lcd_wrCom
       _lcd_busy
         _lcd_lireDonnees
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
   _lcd_init
     _lcd_initCGRam
       _lcd_curseurHome
         _lcd_wrCom
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
       _lcd_wrData
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_resetSequence
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
     _lcd_wrCom
       _lcd_busy
         _lcd_lireDonnees
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
   _lcd_putMessage
     _lcd_ecritChar
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
       _lcd_wrData
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
   _metToucheCombien
     ___wmul
     _calculToucheCombien
       ___wmul
   _rempliMines
     ___awmod
       _rand (ARG)
         ___lmul
     ___wmul
     _rand
       ___lmul
   _testEtat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A8       7       65.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     58      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3C      40       1       67.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     180      15        0.0%
DATA                 0      0     180       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Nov 29 15:39:54 2019

 __end_of_calculToucheCombien 08E0                            l72 0AB6                            l85 0B54  
                          l78 0DA6                            l97 07AA           ___wmul@multiplicand 0003  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000  __size_of_lcd_strobeEnableBit 0008                           l113 081A  
                         l105 0A3C                           l116 088C                           l302 0BAE  
                         l119 08DE                           l303 0BBE                           l135 104A  
                         l208 0C24                           l241 108A                           l225 0F60  
                         l145 0E9A                           l170 0F66                           l171 0F92  
                         l219 0EE6                           l164 1090                           l172 0F98  
                         l181 0FC6                           l190 107A                           l238 0D48  
                         l167 105E                           l264 1032                           l184 0C88  
                         l193 1082                           l178 0CEA                           l291 1014  
                         l187 0FEE                           l535 098E                           l955 106C  
                         l958 0E4E                  __CFG_CPB$OFF 000000                           u220 1042  
                         u221 103E                           u400 0CC6                           u401 0CC2  
                         u410 0CD8                           u411 0CD4                           u500 08B4  
                         u420 0B74                           u501 08B0                           u421 0B70  
                         u510 08DC                           u430 0BAE                           u511 08D8  
                         u431 0BAA                           u440 0F60                           u600 0B34  
                         u520 0D32                           u441 0F5C                           u601 0B30  
                         u521 0D2E                           u610 0B54                           u530 0D44  
                         u450 07CE                  __CFG_CPD$OFF 000000                           u611 0B50  
                         u531 0D40                           u451 07CA                           u460 07E4  
                         u540 08F2                           u620 06BA                           u700 0A4C  
                         u461 07E0                           u541 08EE                           u621 06B6  
                         u390 0F92                           u470 07F8                           u550 090C  
                         u630 06DA                           u391 0F8E                           u471 07F4  
                         u551 0908                           u631 06D6                           u480 080E  
                         u560 0926                           u640 0740                           u481 080A  
                         u561 0922                           u641 073C                           u490 088A  
                         u570 0944                           u650 07AA                           u491 0886  
                         u571 0940                           u651 07A6                           u660 09C6  
                         u580 095A                           u661 09C2                           u581 0956  
                         u717 0A82                           u670 0A1C                           u590 097E  
                         u671 0A18                           u591 097A                           u727 0ABC  
                         u680 0A3C                           u737 0C30                           u681 0A38  
                         u747 0C48                           u757 0C5A                           u767 0C6C  
                         u777 0C7E                           u787 0CB0                           u797 0CDA  
                __CFG_BORV$18 000000                  ___awmod@sign 0014                   lcd_gotoXY@x 0005  
                         wreg 000FE8                   lcd_gotoXY@y 0004  __size_of_lcd_effaceAffichage 000E  
                __CFG_LVP$OFF 000000                          l2010 09A0                          l2020 0A1C  
                        l2012 09B6                          l2004 0998                          l2030 0D7A  
                        l2022 0A20                          l2014 09C6                          l2032 0D84  
                        l2024 0D4A                          l2016 09FC                          l2034 0D9A  
                        l2026 0D58                          l1410 1022                          l2018 0A00  
                        l2050 0A56                          l2028 0D64                          l1420 102C  
                        l1412 1024                          l2060 0A5E                          l2052 0A56  
                        l2044 0A3E                          l1414 1026                          l1406 1016  
                        l1430 1048                          l1422 1034                          l2070 0A98  
                        l2062 0A62                          l2054 0A56                          l2046 0A56  
                        l1416 1028                          l1408 101A                          l1424 1042  
                        l2080 0AB0                          l2072 0A98                          l2064 0A6C  
                        l2056 0A56                          l2048 0A56                          l1418 102A  
                        l2074 0A9C                          l2066 0A78                          l2058 0A5A  
                        l1620 0F78                          l1612 104E                          l2076 0AA8  
                        l2068 0A92                          l1630 0F84                          l1622 0F78  
                        l1614 0F62                          l1710 0EBE                          l1702 107C  
                        l2086 0AB6                          l2078 0AAC                          l1608 108C  
                        l1632 0F94                          l1624 0F7A                          l1616 0F6A  
                        l1640 0C90                          l1704 0E9E                          l1626 0F82  
                        l1618 0F76                          l1650 0CA0                          l1642 0C94  
                        l1706 0EAA                          l1714 0EC8                          l1802 1060  
                        l1810 0C3A                          l1730 0B8E                          l1722 0B56  
                        l1628 0F84                          l1636 1084                          l1660 0CB6  
                        l1652 0CA4                          l1644 0C94                          l1740 0BF0  
                        l1732 0BC2                          l1708 0EB4                          l1716 0FF0  
                        l1900 0E50                          l1820 0C54                          l1812 0C3C  
                        l1804 0C26                          l1724 0B66                          l1670 0CE6  
                        l1662 0CC6                          l1654 0CA4                          l1646 0C96  
                        l1638 0C8C                          l1734 0BC6                          l1750 0F42  
                        l1718 100C                          l1910 0E72                          l1902 0E58  
                        l1830 0C72                          l1822 0C58                          l1814 0C42  
                        l1806 0C2A                          l1726 0B74                          l1664 0CD8  
                        l1656 0CAA                          l1648 0C98                          l1736 0BD4  
                        l1744 0BFE                          l1680 0FA4                          l1752 0F44  
                        l1920 0E82                          l1912 0E74                          l1904 0E62  
                        l1840 0CF2                          l1832 0C78                          l1824 0C60  
                        l1816 0C46                          l1808 0C38                          l1728 0B84  
                        l1760 0E42                          l1666 0CE2                          l1658 0CAE  
                        l1754 106E                          l1738 0BE2                          l1690 0FB4  
                        l1682 0FA6                          l1674 0F9C                          l1746 0F28  
                        l1930 0E92                          l1922 0E84                          l1914 0E78  
                        l1906 0E64                          l1834 0C7C                          l1826 0C66  
                        l1818 0C4E                          l1770 07BC                          l1668 0CE6  
                        l1692 0FBA                          l1684 0FA8                          l1676 0FA0  
                        l1748 0F30                          l1932 0E94                          l1924 0E86  
                        l1916 0E7A                          l1908 0E70                          l1860 0D34  
                        l1852 0CFA                          l1836 0C84                          l1828 0C6A  
                        l1940 0FEA                          l1780 07F8                          l1772 07CE  
                        l1764 07AC                          l1756 0DFE                          l1694 0FBE  
                        l1686 0FB0                          l1678 0FA4                          l1942 0AD0  
                        l1934 0E96                          l1926 0E88                          l1918 0E7E  
                        l1862 0D44                          l1854 0D20                          l1846 0CF6  
                        l1838 0CEC                          l1790 088A                          l1782 07FA  
                        l1774 07D0                          l1766 07B0                          l1870 08FA  
                        l1758 0E32                          l1696 0FBE                          l1688 0FB4  
                        l1960 0B34                          l1936 0E98                          l1928 0E8A  
                        l1856 0D22                          l1792 0890                          l1784 080E  
                        l1776 07E4                          l1768 07B6                          l1880 092E  
                        l1872 08FE                          l1864 08E0                          l1698 0FC2  
                        l1962 0B38                          l1954 0AE0                          l1858 0D32  
                        l1938 0FC8                          l1794 08B4                          l1786 0810  
                        l1778 07E6                          l1890 0968                          l1882 0936  
                        l1874 090C                          l1866 08E4                          l1970 0626  
                        l1956 0B14                          l1948 0AD8                          l1788 0824  
                        l1796 08B8                          l1884 0944                          l1892 096E  
                        l1876 0914                          l1868 08F2                          l1980 069E  
                        l1964 0618                          l1958 0B18                          l1798 08DC  
                        l1894 097E                          l1886 095A                          l1878 0926  
                        l1990 0710                          l1982 06BA                          l1896 0986  
                        l1888 0962                          l1992 0740                          l1984 06BE  
                        l1976 062E                          l1994 0788                          l1986 06DA  
                        l1978 069A                          l1988 06E6                          l1996 078C  
                        l1998 0990                          _RCIF 007CF5                          _TMR1 000FCE  
            ??_initialisation 0003                          _main 0A3E                          _rand 0DFE  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        prodh 000FF4                          prodl 000FF3                          start 0000  
             ?_lcd_putMessage 0006                 __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000               ??_lcd_ecritChar 0004                         ?_main 0001  
                       ?_rand 000D               __end_of___awmod 0990                         _ANSEL 000F7E  
                       _RCREG 000FAE                         _SPBRG 000FAF                         _PORTD 000F83  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISD 000F95  
                       _TXREG 000FAD                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000           ___lmul@multiplicand 0005  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000               ??_lcd_initCGRam 0004                         _randx 003D  
                       _srand 1060                         tablat 000FF5                         status 000FD8  
              __CFG_HFOFST$ON 000000                __CFG_PBADEN$ON 000000              _metToucheCombien 0990  
             __initialization 0DA8                  __end_of_main 0AD0                  __end_of_rand 0E50  
        lcd_putMessage@chaine 0006    calculToucheCombien@colonne 0009                        ??_main 001E  
                      ??_rand 000F                 __activetblptr 000002                        _ADCON1 000FC1  
                      _ADRESH 000FC4                        ?_srand 0001                        _ANSELH 000F7F  
                 initTabVue@i 0009                   initTabVue@k 000B                __CFG_WDTEN$OFF 000000  
                ?_rempliMines 0015                        _SPBRGH 000FB0                __CFG_XINST$OFF 000000  
              lcd_initCGRam@i 0006                lcd_initCGRam@j 0007              __end_of_lcd_busy 0F9A  
            __end_of_lcd_init 0FF0                        ___lmul 0B56                        ___wmul 0FF0  
              __CFG_STVREN$ON 000000                     ??___awmod 0013                        clear_0 0DEE  
             ___awmod@divisor 0011               ___awmod@counter 0013                  __pdataCOMRAM 003D  
            __end_of_testEtat 104C                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                        srand@x 0001  
      __size_of_afficheTabVue 005E             _lcd_resetSequence 0C26                    __accesstop 0060  
     __end_of__initialization 0DF4           _lcd_strobeEnableBit 1084            ?_lcd_resetSequence 0001  
               ___rparam_used 000001                main@afficheNom 0020                __pcstackCOMRAM 0001  
         _lcd_effaceAffichage 106E                  __pidataBANK0 0EE8           ??_lcd_resetSequence 0003  
               __end_of_srand 106E     calculToucheCombien@maxCol 0012     calculToucheCombien@minCol 0011  
        ?_lcd_strobeEnableBit 0001     calculToucheCombien@nombre 000E   calculToucheCombien@maxLigne 0010  
        ?_lcd_effaceAffichage 0001            __size_of_lcd_wrCom 0062   calculToucheCombien@minLigne 000F  
   __end_of_lcd_resetSequence 0C8A                       ??_srand 0003      __size_of_lcd_lireDonnees 0006  
           _lcd_ecrireDonnees 104C                    __pbssBANK1 0100              ??_lcd_putMessage 0008  
          ?_lcd_ecrireDonnees 0001      __size_of_lcd_curseurHome 0008           ??_lcd_ecrireDonnees 0001  
                     ?___lmul 0001                       ?___wmul 0001                 _afficheTabVue 0D4A  
              main@etatInitSW 003C                ___lmul@product 0009         ??_lcd_strobeEnableBit 0001  
__size_of_calculToucheCombien 0134      __end_of_metToucheCombien 0A3E                    _lcd_gotoXY 0BC0  
       ??_lcd_effaceAffichage 0004                    _lcd_wrData 0F9A     __end_of_lcd_ecrireDonnees 1060  
                   ?_lcd_busy 0001                     ?_lcd_init 0001       lcd_ecrireDonnees@donnee 0002  
                  _m_tabMines 0154          __size_of_rempliMines 0194                       __Hparam 0000  
                     __Lparam 0000                     ?_testEtat 0001                    _initTabVue 0AD0  
           __end_of_lcd_wrCom 0CEC                ?_afficheTabVue 0001               __size_of___lmul 006A  
                     ___awmod 08E0               __size_of___wmul 0026            rempliMines@tabSafe 0060  
                __psmallconst 0600                       __pcinit 0DA8                    _init_serie 1016  
                   _ANSELbits 000F7E                       __ramtop 0600                       __ptext0 0A3E  
                     __ptext1 1034                       __ptext2 0618                       __ptext3 0DFE  
                     __ptext4 0B56                       __ptext5 08E0                       __ptext6 0990  
                     __ptext7 07AC                       __ptext8 0FC8                       __ptext9 0C26  
       __end_of_lcd_ecritChar 0EE8                     _T0CONbits 000FD5               lcd_busy@adresse 0002  
                   _T1CONbits 000FCD              ___awmod@dividend 000F              lcd_ecritChar@car 0004  
                  ??_lcd_busy 0001                    ??_lcd_init 0008    __size_of_lcd_resetSequence 0064  
        end_of_initialization 0DF4         __end_of_lcd_initCGRam 0D4A                 __Lmediumconst 0000  
           __end_ofmain@F2872 0616             ??_lcd_lireDonnees 0001                    ??_testEtat 0001  
                   _RCSTAbits 000FAB                       postdec1 000FE5                       postinc0 000FEE  
                     postinc2 000FDE       __size_of_initialisation 004C             ??_lcd_curseurHome 0004  
         lcd_ecritChar@posRam 0005                     _PORTAbits 000F80                     _PORTBbits 000F81  
                 ?_lcd_gotoXY 0004                     _TRISCbits 000F94                   ?_lcd_wrData 0001  
  __size_of_lcd_ecrireDonnees 0014                     _TXSTAbits 000FAC               ??_afficheTabVue 0009  
                 ?_initTabVue 0001                __end_of___lmul 0BC0                __end_of___wmul 1016  
                 _BAUDCONbits 000FB8                   ?_init_serie 0001                 __pidataCOMRAM 1092  
         start_initialization 0DA8           _calculToucheCombien 07AC           __size_of_lcd_gotoXY 0066  
                    ??___lmul 0009                      ??___wmul 0005                 rempliMines@nb 0015  
         __size_of_lcd_wrData 002E                   __pdataBANK0 00B8              __CFG_LPT1OSC$OFF 000000  
        ?_calculToucheCombien 0007                 __pcstackBANK0 0060             ?_metToucheCombien 0001  
         __size_of_initTabVue 0086            ??_metToucheCombien 0017             __size_of_lcd_busy 0038  
           __size_of_lcd_init 0028           __size_of_init_serie 001E             __CFG_CCP2MX$PORTC 000000  
 __end_of_lcd_strobeEnableBit 108C                _initialisation 0E50                      ?___awmod 000F  
           __size_of_testEtat 0018   __end_of_lcd_effaceAffichage 107C                     _lcd_wrCom 0C8A  
       ??_calculToucheCombien 000B                   __smallconst 0600               _lcd_lireDonnees 108C  
         lcd_wrData@caractere 0003                __size_of_srand 000E                 ??_rempliMines 0017  
             _lcd_curseurHome 107C                ___wmul@product 0005       metToucheCombien@chiffre 0019  
      __end_of_initialisation 0E9C              __CFG_WDTPS$32768 000000       __size_of_lcd_putMessage 003A  
                   main@F2872 0601                    ?_lcd_wrCom 0001                    _ADCON0bits 000FC2  
                  _ADCON2bits 000FC0             ___wmul@multiplier 0001                  ??_lcd_gotoXY 0005  
                ??_lcd_wrData 0003             lcd_wrCom@commande 0003             ___lmul@multiplier 0001  
                   copy_data0 0DBC                     copy_data1 0DDC        __size_of_lcd_ecritChar 004C  
                    __Hrparam 0000               ?_initialisation 0001           __end_of_rempliMines 07AC  
                    __Lrparam 0000                  ??_initTabVue 0007            __CFG_BOREN$SBORDIS 000000  
                rempliMines@i 00B0                  rempliMines@j 00B4                  rempliMines@m 00B6  
          __end_of_lcd_gotoXY 0C26            __end_of_lcd_wrData 0FC8              __size_of___awmod 00B0  
                ??_init_serie 0001        __size_of_lcd_initCGRam 005E               lcd_putMessage@j 0008  
     __end_of_lcd_lireDonnees 1092                      _matCGRAM 00B8       __end_of_lcd_curseurHome 1084  
                    __ptext10 0CEC                      __ptext11 107C                      __ptext20 0F9A  
                    __ptext12 0E50                      __ptext21 0BC0                      __ptext13 1060  
                    __ptext22 106E                      __ptext14 1016                      __ptext23 0C8A  
                    __ptext15 0AD0                      __ptext24 1084                      __ptext16 0FF0  
                    __ptext25 104C                      __ptext17 0D4A                      __ptext26 0F62  
                    __ptext18 0F28                      __ptext27 108C                      __ptext19 0E9C  
           metToucheCombien@j 001A             metToucheCombien@m 001C                      _lcd_busy 0F62  
                    _lcd_init 0FC8            __end_of_initTabVue 0B56      calculToucheCombien@ligne 0007  
                    _m_tabVue 0100                 __size_of_main 0092                 __size_of_rand 0052  
            rempliMines@testX 00B2              rempliMines@testY 00B3            __end_of_init_serie 1034  
                    _testEtat 1034         __end_of_afficheTabVue 0DA8                   ??_lcd_wrCom 0003  
               _lcd_ecritChar 0E9C                    _INTCONbits 000FF2                 _lcd_initCGRam 0CEC  
                 _rempliMines 0618          calculToucheCombien@j 0013          calculToucheCombien@m 0015  
   __size_of_metToucheCombien 00AE                _lcd_putMessage 0F28                ?_lcd_ecritChar 0001  
            ?_lcd_lireDonnees 0001              ?_lcd_curseurHome 0001                ?_lcd_initCGRam 0001  
           __CFG_FOSC$INTIO67 000000        __end_of_lcd_putMessage 0F62  
